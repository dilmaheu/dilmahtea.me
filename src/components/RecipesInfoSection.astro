---
import he from "he";
import { parseHTML } from "linkedom";
import OptimizeContentImages from "@components/OptimizeContentImages.astro";

const { page } = Astro.props;

let contentBlocksHTML = he.decode(
  // @ts-ignore
  await Astro.__renderMarkdown(page.Block_text)
);

let { document: contentBlocksDocument } = await parseHTML(contentBlocksHTML),
  titles = [...contentBlocksDocument.querySelectorAll("h2")];

titles.forEach((title, i) => {
  contentBlocksHTML = contentBlocksHTML.replace(
    title.outerHTML,
    (i === 0 ? "" : "</div>") + title.outerHTML + "<div>"
  );
});

titles.length > 0 && (contentBlocksHTML += "</div>");

// refresh linkedom generated dom
({ document: contentBlocksDocument } = await parseHTML(contentBlocksHTML));
titles = [...contentBlocksDocument.querySelectorAll("h2")];
---

<style is:global>
  .chapter:nth-child(1) .recipe-sec-title {
    margin-top: 0;
  }
</style>

<style lang="scss">
  .recipe-content-img {
    margin-top: 20px;
    max-height: 391px !important;
  }

  .recipe-info-img-container {
    aspect-ratio: 2 / 1;
    width: 100%;
    height: 100%;
  }
</style>

{
  titles.map((title) => {
    const { textContent: titleText } = title,
      { innerHTML } = title.nextElementSibling;

    return (
      <>
        <h2
          id={titleText.replaceAll(" ", "-")}
          class="bg-primary alice leading-[110%] text-lightgray2 rounded-[10px] mt-[50px] recipe-sec-title"
        >
          {titleText}
        </h2>

        <div class="bg-white2 rounded-[10px] p-[15px] sm:p-5 md:p-[25px] lg:p-[35px] mt-[25px]">
          <div class="prose max-w-none mb-[15px] text-dark recipe-sec-text">
            <Fragment set:html={innerHTML} />

            {/* <OptimizeContentImages>
                <Fragment set:html={outerHTML} />
              </OptimizeContentImages> */}
          </div>
        </div>
      </>
    );
  })
}
