---
import he from "he";
import { parseHTML } from "linkedom";
import renderMarkdown from "@utils/renderMarkdown";
import OptimizeContentImages from "@components/OptimizeContentImages.astro";

const { page } = Astro.props;

let contentBlocksHTML = he.decode(await renderMarkdown(page.Block_text));

let { document: contentBlocksDocument } = parseHTML(contentBlocksHTML),
  titles = [...contentBlocksDocument.querySelectorAll("h2")];

titles.forEach((title, i) => {
  contentBlocksHTML = contentBlocksHTML.replace(
    title.outerHTML,
    (i === 0 ? "" : "</div>") + title.outerHTML + "<div>"
  );
});

titles.length > 0 && (contentBlocksHTML += "</div>");

// refresh linkedom generated dom
({ document: contentBlocksDocument } = parseHTML(contentBlocksHTML));
titles = [...contentBlocksDocument.querySelectorAll("h2")];
---

{
  titles.map((title) => {
    const { textContent: titleText } = title,
      { innerHTML } = title.nextElementSibling;

    return (
      <div>
        <h2
          id={titleText.replaceAll(" ", "-")}
          class:list={[
            "recipe-title bg-primary mt-[50px] rounded-[10px]",
            "recoleta text-secondary-light font-bold leading-[110%]",
          ]}
        >
          {titleText}
        </h2>

        <div class="bg-secondary-light p-[15px] sm:p-5 md:p-[25px] lg:p-[35px] mt-[25px] rounded-[10px]">
          <div class="recipe-content prose max-w-none mb-[15px] text-black-light">
            <OptimizeContentImages>
              <Fragment set:html={innerHTML} />
            </OptimizeContentImages>
          </div>
        </div>
      </div>
    );
  })
}
