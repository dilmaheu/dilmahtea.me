---
import fs from "fs/promises";
import { parseHTML } from "linkedom";

declare interface Props {
  type?: "Error" | "Warning" | "Info" | "Success" | "Default";
  closingEnabled?: boolean;
  notification?: Record<string, any>;
}

const { type, closingEnabled, notification } = Astro.props as Props;

if (type === "Error" && closingEnabled === true) {
  throw Error("Error notifications can't have closing functionality enabled");
}

if (type !== "Default") {
  var notificationSVG = await fs.readFile(
    `./public/images/notifications/${type}.svg`,
    "utf8"
  );
}

const defaultSlotHTML = await Astro.slots.render("default");

const { document: defaultSlotDocument } = await parseHTML(defaultSlotHTML);

const notificationPlaceholder =
  defaultSlotDocument.querySelector("notification");

const notificationsHTML = Object.keys(notification)
  .map(
    (lang) =>
      `<span class="${lang === "nl-NL" ? "nl" : lang} hidden">${
        notification[lang]
      }</span>`
  )
  .join("");

notificationPlaceholder.outerHTML = notificationsHTML;

const notificationContentHTML = defaultSlotDocument.documentElement.outerHTML;
---

<style lang="scss">
  $notification-error-bg-color: #f9eae9;
  $notification-warning-bg-color: #faf2e5;
  $notification-info-bg-color: #e7eef9;
  $notification-success-bg-color: #e9f9ef;
  $notification-default-bg-color: #fbf7f7;
  $notification-default-text-color: #000000;

  .notification {
    display: none;
    padding: 1.125rem;
    position: relative;
    align-items: center;
    font-family: "Roboto";
    font-style: normal;
    font-weight: 400;
    font-size: 16px;
    line-height: 18.75px;
    color: $notification-default-text-color;

    &.notification-error {
      background-color: $notification-error-bg-color;
    }

    &.notification-warning {
      background-color: $notification-warning-bg-color;
    }

    &.notification-info {
      background-color: $notification-info-bg-color;
    }

    &.notification-success {
      background-color: $notification-success-bg-color;
    }

    > div {
      display: flex;
      gap: 1.125rem;
      margin: 0 auto;
      align-items: center;
    }
  }
</style>

<div class={`notification notification-${type.toLowerCase()}`}>
  <div>
    {notificationSVG && (
      <div>
        <Fragment set:html={notificationSVG} />
      </div>
    )}

    <div class="notification-content">
      <Fragment set:html={notificationContentHTML} />
    </div>
  </div>

  {closingEnabled && (
    <button class="close-button">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="15"
        height="14"
        fill="none"
      >
        <path
          fill-rule="evenodd"
          d="M.3.4A1.2 1.2 0 0 1 2 .4l5 5 5-5A1.2 1.2 0 1 1 13.7 2l-5 5 5 5a1.2 1.2 0 0 1-1.7 1.7l-5-5-5 5A1.2 1.2 0 0 1 .3 12l5-5-5-5A1.2 1.2 0 0 1 .3.4Z"
          fill="#4c4847"
        />
      </svg>
    </button>
  )}
</div>

<script>
  const notificationCloseButtons = document.querySelectorAll(
    ".notification .close-button"
  );

  notificationCloseButtons.forEach((button) => {
    button.addEventListener("click", () => {
      // @ts-ignore
      slideOutTopNotification(
        button.parentElement
      ); /* slideOutTopNotification is declared in NotificationAnimations.astro */
    });
  });
</script>
