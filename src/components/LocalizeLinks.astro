---
import getLocalesData from "@utils/getLocalesData";

const { locales } = getLocalesData();

declare interface Props {
  locale: string;
  documentBody: Document;
}

const { locale, documentBody } = Astro.props as Props,
  documentLinks = documentBody.querySelectorAll("a");

documentLinks.forEach((link) => {
  const href = link.getAttribute("href");

  if (!href.startsWith("#")) {
    const origin = "https://dilmahtea.me",
      url = new URL(href, origin);

    // check if link is internal
    if (url.origin === origin) {
      const { pathname } = url,
        href = url.href.replace(origin, ""),
        localizedLinkRegex = new RegExp(
          `^/(${locales.map((locale) => locale).join("|")})/`,
        );

      const hrefWithTrailingSlash = href.replace(
        pathname,
        pathname.endsWith("/") ? pathname : pathname + "/",
      );

      link.href =
        // localize unlocalized link
        (!localizedLinkRegex.test(pathname) ? "/" + locale : "") +
        hrefWithTrailingSlash;
    }
  }
});
---

<Fragment set:html={documentBody.toString()} />
