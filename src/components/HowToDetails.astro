---
import MainBG from "/images/willian-justen-de-vasconcellos-_MMP5j_fCqw-unsplash.webp";
import CupIcon from "/images/cup.svg";
import CupGreenIcon from "/images/cupGreen.svg";
import RightArrow from "/images/rightArrow.svg";

import Markdown from "@astrojs/markdown-component";
import UpdateHeroTopMargin from "./UpdateHeroTopMargin.astro";

const url = `${import.meta.env.CloudImg_URL}`;

const { page } = Astro.props;

const allHowTos = page.allHowTos
  .filter((val) => val?.props?.page?.locale == page.locale)
  .map((val) => val.props.page);

allHowTos.sort((a, b) => {
  return new Date(b.createdAt) - new Date(a.createdAt);
});

const recentHowTos = allHowTos.filter(
  (val) => val.Meta.URL_slug != page.Meta.URL_slug
);
---

<!-- Hero Section -->
<div class="hero overflow-hidden relative">
  <UpdateHeroTopMargin />

  <!-- Background -->
  <div class="w-full absolute bottom-0">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 1056.7 660.3"
      class="heroCurve1"
    >
      <defs>
        <clipPath id="heroImgFrame">
          <path
            d="M1056.7,0V619.7c-31,16.2-92.5,40.6-182,40.6H855.8c-24.8,0-49-.9-72.9-2.4-32.8-1.6-65.2-3.8-98-6-65.8-4.4-133.1-9-208.2-9-79.4,0-147.5,5.1-210.1,9.8-53,3.9-102.1,7.6-150.7,7.6h-13C9.3,657.9,0,631.4,0,631.4V0Z"
          ></path>
        </clipPath>
      </defs>
      <image
        class="h-full w-auto"
        height="100%"
        width="100%"
        href={MainBG}
        clip-path="url(#heroImgFrame)"></image>
    </svg>
  </div>

  <!-- Text content -->

  <div class="relative h-full wrapper z-30 HeroTxtContainer">
    <div
      class="sm:w-8/12 md:w-7/12 HeroTxtContent BlogDetails_HeroTxtContent"
      role="banner"
    >
      <div class="flex flex-wrap items-start">
        <div>
          <div class="flex flex-wrap gap-x-2.5 blogDetails_heroAuthContainer">
            <div class="flex relative">
              {page.authors.data.map((author, idx) => (
                <div
                  class={
                    idx > 0
                      ? "blogDetails_authImg relative -ml-5"
                      : "blogDetails_authImg"
                  }
                >
                  <img
                    src={
                      url +
                      author.attributes.Profile_picture.data.attributes
                        .provider_metadata.public_id +
                      `/authBlob`
                    }
                    alt={
                      author.attributes.Profile_picture.data.attributes
                        .alternativeText
                    }
                  />
                </div>
              ))}
            </div>

            <div class="grid content-between">
              <div class="flex flex-wrap font-bold blogDetails_heroAuth">
                {page.authors.data.map((author, idx) => (
                  <a>
                    {`${idx > 0 ? ", " : " "}` + author.attributes.givenName}
                  </a>
                ))}
              </div>
              <ul class="flex flex-wrap items-center">
                <li class="blogHome_HdItem">
                  {new Date(page.createdAt).toLocaleString("en-US", {
                    day: "numeric",
                    month: "long",
                  })}
                </li>
                <!-- <li class="blogHome_HdItem">5 min read</li>
								<li class="blogHome_HdItem"><a class="blogHome_HdItemBtn">Manufacturing</a></li> -->
              </ul>
            </div>
          </div>

          <h1 class="blogDetails_heroTitle">
            <a>{page.Title}</a>
            <span class="icon relative top-0">
              <span class="relative headingInlineIcon">
                <img class="w-full h-full" src={CupIcon} alt="cup-icon" />
              </span>
            </span>
          </h1>
          <a>
            <div class="prose max-w-none blogDetails_heroTxt">
              <Markdown>{page.Intro_text}</Markdown>
            </div>
          </a>
        </div>
      </div>
    </div>
  </div>

  <!-- Blob Image  Desktop view-->

  <div
    class="hidden sm:block absolute z-20 h-full heroCurve2Container BlogHeroCurveContainer"
  >
    <div class="w-full h-full relative">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 617.8 543.8"
        class="h-full w-full"
      >
        <defs>
          <clipPath id="heroImgFrame2">
            <path
              d="M617.8,0S213.3.3,60.8.8C-7.9,85.7-4.5,186,5.3,329.5,15.7,482.7,89,543.8,331.2,543.8c185.2,0,233.9-51.5,286.6-79.8Z"
            ></path>
          </clipPath>
        </defs>
        <image
          class="w-auto h-full"
          style=""
          height="100%"
          width="100%"
          href={url +
            page.Intro_blob.data.attributes.provider_metadata.public_id +
            `/small`}
          clip-path="url(#heroImgFrame2)"></image>
      </svg>
    </div>
  </div>
</div>

<!-- Blob Image Mobile view -->

<div class="block sm:hidden relative -mt-20 z-20 w-full">
  <div class="heroCurve3Container relative">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 375 290.3"
      class="h-full w-full"
    >
      <defs>
        <clipPath id="heroImgFrame3">
          <path
            d="M375,21.4V283.8s-35.1,6.5-84.6,6.5c-25.5,0-51.2-1.1-76.9-2.1-30.8-1.3-61.6-2.6-92-2-14.4.2-29.5.9-44,1.5-34.4,1.5-65.7,2.9-77.5-1.5V21.4C23.2,7.1,55.3,0,105.7,0c28.3,0,62,6.7,91.6,12.6,23.3,4.6,44.1,8.8,57.7,8.8,9.6,0,22.5-1.9,36.4-4C322.9,12.8,359.7,7.4,375,21.4Z"
          ></path>
        </clipPath>
      </defs>
      <image
        class="h-full w-auto"
        height="100%"
        width="100%"
        href={url +
          page.Intro_blob.data.attributes.provider_metadata.public_id +
          `/small`}
        clip-path="url(#heroImgFrame3)"></image>
    </svg>
  </div>
</div>

<!-- Blog Section -->

<div class="wrapper flex relative z-20 -top-10 lg:-top-16 xl:-top-24">
  <div class="how_headerSteps">
    <h2 class="how_headerStepsHeading text-center sm:text-left">
      {page.Method.length}
      Practices to follow
    </h2>
    <div class="howTo_headerStepsContainer">
      <div
        class="flex flex-wrap justify-center sm:justify-start gap-x-5 gap-y-2.5"
      >
        {page.Method.map((method) => (
          <a href={`#` + method.Method_title}>
            <div class="flex items-center cursor-pointer howTo_headerStepItem">
              {method.Method_title}
            </div>
          </a>
        ))}
      </div>
    </div>
  </div>
</div>

<div class="blogContentContainer z-30" role="main">
  <div
    class="block md:hidden sticky overflow-hiden self-start z-30"
    id="blogContent_StickyContainerMd"
  >
    <div
      id="blog_StickyDropdownContainer"
      class="wrapper text-sm lg:text-base font-bold relative noselect"
    >
      <div
        id="blogStickyBtn"
        class="flex items-center justify-between gap-x-1.5 md:gap-x-3 font-bold focus:outline-none"
      >
        <div id="blog_StickyDropdown" class="flex">
          <div>
            <img
              class="blog_StickyItemHeaderImgMd"
              src="/images/bookGreen.svg"
              alt="arrow"
            />
          </div>
          <div id="blog_StickyDropdownHeaderTop">Practices</div>
          <div id="blog_StickyDropdownHeader">Practices</div>
          <ul id="blog_StickyItemContainerMd"></ul>
        </div>
        <div class="w-3">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 11.6 6.7"
            id="StickyDropdpwnIcon"
          >
            <path
              class="cls-1"
              d="M.3.3A.6.6,0,0,1,.9,0a.9.9,0,0,1,.6.3L5.8,4.6,10.2.3a.6.6,0,0,1,.6-.3l.6.3a.8.8,0,0,1,.2.6.7.7,0,0,1-.2.6l-5,4.9a.6.6,0,0,1-.6.3.9.9,0,0,1-.6-.3L.3,1.5A.9.9,0,0,1,0,.9.6.6,0,0,1,.3.3Z"
              fill="#2B4B50"></path>
          </svg>
        </div>
      </div>
      <div id="blog_StickyDropdownItem"></div>
    </div>
    <div id="sticky_p_bar"></div>
  </div>
  <div class="wrapper w-full flex flex-wrap">
    <div
      class="md:w-8/12 order-2 md:order-1 relative z-20 md:-mt-10 lg:-mt-16 xl:-mt-24"
      id="howToStepDetails"
    >
      {page.Method.map((method) => (
        <div>
          <h2 class="HowToMethodHead" id={method.Method_title}>
            {method.Method_title}
          </h2>
          {method.Steps.map((step, idx) => (
            <div class="howToStepContainer">
              <h3 class="howToStepTitle">
                {idx + 1}.{step.Step_title}
              </h3>
              <div class="howToStepTxt">
                <Markdown>{step.Step_text}</Markdown>
              </div>

              <div
                class={
                  step.Step_blob.data == null ? "hidden" : "stepImgContainer"
                }
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 1080 578.5"
                  class="h-auto w-full"
                >
                  <defs>
                    <clipPath id="stepImg">
                      <path d="M557.7,4.4C388.5,4.4,108.5-4.7,42.9,47.5S2.2,286.3,18.3,426s178,152.5,552.1,152.5c307.5,0,403.7-36.8,481.9-163.6,33.2-53.9,50.7-186.5-31.1-341C968.3-26.1,793.3,4.4,557.7,4.4Z" />
                    </clipPath>
                  </defs>
                  <image
                    class="h-auto w-full"
                    height="100%"
                    width="100%"
                    href={
                      step.Step_blob.data == null
                        ? ""
                        : url +
                          step.Step_blob.data.attributes.provider_metadata
                            .public_id +
                          `/small`
                    }
                    clip-path="url(#stepImg)"
                  ></image>
                </svg>
              </div>
            </div>
          ))}
        </div>
      ))}
    </div>

    <div
      class="md:w-4/12 order-1 md:order-2 blogContent_StickyContainer md:sticky top-0 overflow-hiden self-start"
      id="blogContent_StickyContainer"
    >
      <h3 id="blog_StickyHeader">Practices</h3>
      <div id="blog_StickyItemContainer"></div>
    </div>
  </div>
</div>

<div class="wrapper">
  <h2 class="blogDetails_recentTitle">Explore the world of kindness</h2>

  <div
    class="w-full grid sm:grid-cols-2 lg:grid-cols-3 gap-6 lg:gap-10 mx-auto justify-items-center sm:justify-items-start blogDetails_CardsContainer"
    role="list"
    aria-label="Kindness Items"
  >
    {recentHowTos.slice(0, 3).map((howTo, idx) => (
      <div class="blogDetails_Card" role="listitem" aria-label="Kindness Item">
        <div class="relative">
          <div>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              preserveAspectRatio="none"
              viewBox="0 0 423.3 559.8"
              class="blogDetails_cardBg"
            >
              <path
                d="M419.2,306.4c-1.2,40.4,0,72.6,0,93.6,0,176.6-12.5,158-197.8,158S2.1,587.1,2.1,410c0-58.7.1-86,.3-97.5-.1-1.2-.2-3.1-.3-6.1v-.3C-2.2,194.8-1.3,81.5,17.9,43.2,43.3-7.3,151.7,1.5,217.2,1.5c91.3,0,173.8-18.8,194.3,78.1,19.3,91,9.6,163.8,7.7,226.8Z"
                fill="#273E3F"
              />
            </svg>
          </div>
          <div class="absolute inset-0 z-30">
            <div class="w-full">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 423.3 306.1"
                class="h-full w-full"
              >
                <defs>
                  <clipPath id={`blogDetails_Card` + idx}>
                    <path d="M419.2,306.1H2.1C-2.2,194.8-1.3,81.5,17.9,43.2,43.3-7.3,151.7,1.5,217.2,1.5c91.3,0,173.8-18.8,194.3,78.1C430.7,170.5,421.1,243.2,419.2,306.1Z" />
                  </clipPath>
                </defs>
                <a href={`/` + howTo.Meta.URL_slug}>
                  <image
                    class="h-full w-auto"
                    height="100%"
                    width="100%"
                    href={
                      url +
                      howTo.Intro_blob.data.attributes.provider_metadata
                        .public_id +
                      `/small`
                    }
                    clip-path={`url(#` + `blogDetails_Card` + idx + `)`}
                  />
                </a>
              </svg>
            </div>

            <div class="blogDetails_CardConentConatiner">
              <div class="flex flex-wrap font-bold blogDetails_cardAuth">
                {howTo.authors.data.map((author, idx) => (
                  <a>
                    {`${idx > 0 ? ", " : " "}` + author.attributes.givenName}
                  </a>
                ))}
              </div>
              <ul class="flex flex-wrap items-center blogHome_cardItemContainer">
                <li class="blogHome_cardItem">
                  {new Date(howTo.createdAt).toLocaleString("en-US", {
                    day: "numeric",
                    month: "long",
                  })}
                </li>
                {/*<li class="blogHome_cardItem">5 min read</li>
								<li class="flex items-center blogHome_cardItem">
									<a><div class="blogHome_cardItemBtn">Manufacturing</div></a>
								</li>*/}
              </ul>
              <div class="blogDetails_CardTitle">
                <a href={`/` + howTo.Meta.URL_slug}>{howTo.Title}</a>
                <span class="icon relative top-0">
                  <span class="relative blogDetails_CardTitleIcon">
                    <img
                      class="w-full h-full"
                      src={RightArrow}
                      alt="cup-icon"
                    />
                  </span>
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>
    ))}
  </div>
</div>

<script is:inline>
  document.addEventListener("DOMContentLoaded", function () {
    // creating blog chapters
    const hsd = document.getElementById("howToStepDetails");
    const tags = hsd.querySelectorAll("h2");

    console.log(tags);

    for (const tag of tags) {
      // chapters in desktop screen
      var div = document.getElementById("blog_StickyItemContainer");
      var aTag = document.createElement("a");
      aTag.setAttribute("href", "#" + tag.id);
      aTag.innerHTML =
        `<img class="blog_StickyItemImg opacity-0" src="/images/rightArrowGreen.svg" alt="arrow">` +
        tag.id;
      div.appendChild(aTag);

      // sticky active chapter heading in mobile screen
      var divMd = document.getElementById("blog_StickyItemContainerMd");
      var liTagMd = document.createElement("li");
      liTagMd.setAttribute("class", "truncate");
      liTagMd.innerHTML = tag.id;
      divMd.appendChild(liTagMd);

      // sticky button chapters in mobile screen
      var dropdownDiv = document.getElementById("blog_StickyDropdownItem");
      var dropdownATag = document.createElement("a");
      dropdownATag.setAttribute("href", "#" + tag.id);
      dropdownATag.setAttribute(
        "class",
        "flex items-center pt-6 font-normal color-default-80"
      );
      dropdownATag.innerHTML =
        `<img class="blog_StickyItemImgMd opacity-0" src="/images/rightArrowGreen.svg" alt="arrow">` +
        tag.id;
      dropdownDiv.appendChild(dropdownATag);
    }

    // highlight active blog section header desktop screen
    const stickyItemCon = document.getElementById("blog_StickyItemContainer");
    const blogStickyAtag = stickyItemCon.querySelectorAll("a");
    const blogStickyImg = stickyItemCon.querySelectorAll(".blog_StickyItemImg");

    const dropdownStickyItemCon = document.getElementById(
      "blog_StickyDropdownItem"
    );
    const dropdownStickyAtag = dropdownStickyItemCon.querySelectorAll("a");
    const dropdownStickyImg = dropdownStickyItemCon.querySelectorAll(
      ".blog_StickyItemImgMd"
    );

    document.addEventListener("scroll", (e) => {
      for (var i = 0; i < tags.length; i++) {
        var scrolled = document.scrollingElement.scrollTop;
        var position = tags[i].offsetTop;

        if (i > 0) {
          if (scrolled > position - 300) {
            blogStickyAtag[i].classList.add("font-bold");
            blogStickyAtag[i - 1].classList.remove("font-bold");
            blogStickyImg[i].classList.remove("opacity-0");
            blogStickyImg[i - 1].classList.add("opacity-0");

            dropdownStickyAtag[i].classList.add("font-medium", "color-default");
            dropdownStickyAtag[i - 1].classList.remove(
              "font-medium",
              "color-default"
            );
            dropdownStickyImg[i].classList.remove("opacity-0");
            dropdownStickyImg[i - 1].classList.add("opacity-0");
          } else {
            blogStickyAtag[i].classList.remove("font-bold");
            blogStickyImg[i].classList.add("opacity-0");

            dropdownStickyAtag[i].classList.remove(
              "font-medium",
              "color-default"
            );
            dropdownStickyImg[i].classList.add("opacity-0");
          }
        } else {
          if (scrolled > position - 300) {
            blogStickyAtag[i].classList.add("font-bold");
            blogStickyImg[i].classList.remove("opacity-0");

            dropdownStickyAtag[i].classList.add("font-medium", "color-default");
            dropdownStickyImg[i].classList.remove("opacity-0");
          } else {
            blogStickyAtag[i].classList.remove("font-bold");
            blogStickyImg[i].classList.add("opacity-0");

            dropdownStickyAtag[i].classList.remove(
              "font-medium",
              "color-default"
            );
            dropdownStickyImg[i].classList.add("opacity-0");
          }
        }
      }
    });

    const mqMd = window.matchMedia("(max-width: 767.98px)");
    if (mqMd.matches) {
      // show active blog section header name top on sticky in mobile screen
      document.addEventListener("scroll", (e) => {
        const stickyItemConMd = document.getElementById(
          "blog_StickyItemContainerMd"
        );
        const blogStickyMdAtag = stickyItemConMd.querySelectorAll("li");
        const dropdownContainer = document.getElementById(
          "blog_StickyDropdownContainer"
        );
        dropdownHeader = document.getElementById("blog_StickyDropdownHeader");
        var scrolled = document.scrollingElement.scrollTop;
        const hsd = document.getElementById("howToStepDetails");
        stickyProgress = document.getElementById("sticky_p_bar");
        hsdPosition = hsd.offsetTop;

        if (scrolled > hsdPosition + 1) {
          dropdownContainer.style.display = "block";
          stickyProgress.style.display = "block";
        } else {
          dropdownContainer.style.display = "none";
          stickyProgress.style.display = "none";
        }

        for (var i = 0; i < tags.length; i++) {
          var position = tags[i].offsetTop;
          if (i > 0) {
            if (scrolled > position - 40) {
              blogStickyMdAtag[i].style.display = "inline-flex";
              blogStickyMdAtag[i - 1].style.display = "none";
            } else {
              blogStickyMdAtag[i].style.display = "none";
            }
          } else {
            if (scrolled > position - 40) {
              blogStickyMdAtag[i].style.display = "inline-flex";
            } else {
              blogStickyMdAtag[i].style.display = "none";
            }
          }
        }
      });

      // sticky chapters heading toggle by "Chapters" when toggling stcky button
      document.addEventListener("scroll", (e) => {
        var scrolled = document.scrollingElement.scrollTop;
        const hsd = document.getElementById("howToStepDetails");
        hsdPosition = hsd.offsetTop;
        dropdownHeader = document.getElementById("blog_StickyDropdownHeader");
        dropdownHeaderTop = document.getElementById(
          "blog_StickyDropdownHeaderTop"
        );
        dropdownHeaderItem = document.getElementById(
          "blog_StickyItemContainerMd"
        );
        const firstTag = hsd.querySelector("h2");

        if (scrolled > hsdPosition - 40) {
          if (dropdownHeader.style.display == "block") {
            dropdownHeaderTop.style.display = "none";
          } else if (scrolled > firstTag.offsetTop - 40) {
            dropdownHeaderTop.style.display = "none";
          } else {
            dropdownHeaderTop.style.display = "block";
          }
        } else {
          dropdownHeaderTop.style.display = "block";
        }
      });
    }
    const mqSm = window.matchMedia("(max-width: 639.98px)");
    if (mqSm.matches) {
      // show active blog section header name top on sticky in mobile screen
      document.addEventListener("scroll", (e) => {
        const stickyItemConMd = document.getElementById(
          "blog_StickyItemContainerMd"
        );
        const blogStickyMdAtag = stickyItemConMd.querySelectorAll("li");
        const dropdownContainer = document.getElementById(
          "blog_StickyDropdownContainer"
        );
        dropdownHeader = document.getElementById("blog_StickyDropdownHeader");
        var scrolled = document.scrollingElement.scrollTop;
        const hsd = document.getElementById("howToStepDetails");
        stickyProgress = document.getElementById("sticky_p_bar");
        hsdPosition = hsd.offsetTop;

        if (scrolled > hsdPosition - 50) {
          dropdownContainer.style.display = "block";
          stickyProgress.style.display = "block";
        } else {
          dropdownContainer.style.display = "none";
          stickyProgress.style.display = "none";
        }
        for (var i = 0; i < tags.length; i++) {
          var position = tags[i].offsetTop;

          if (i > 0) {
            if (scrolled > position - 120) {
              blogStickyMdAtag[i].style.display = "inline-flex";
              blogStickyMdAtag[i - 1].style.display = "none";
            } else {
              blogStickyMdAtag[i].style.display = "none";
            }
          } else {
            if (scrolled > position - 120) {
              blogStickyMdAtag[i].style.display = "inline-flex";
            } else {
              blogStickyMdAtag[i].style.display = "none";
            }
          }
        }
      });

      // sticky chapters heading toggle by "Chapters" when toggling stcky button
      document.addEventListener("scroll", (e) => {
        var scrolled = document.scrollingElement.scrollTop;
        const hsd = document.getElementById("howToStepDetails");
        hsdPosition = hsd.offsetTop;
        dropdownHeader = document.getElementById("blog_StickyDropdownHeader");
        dropdownHeaderTop = document.getElementById(
          "blog_StickyDropdownHeaderTop"
        );
        dropdownHeaderItem = document.getElementById(
          "blog_StickyItemContainerMd"
        );

        const firstTag = hsd.querySelector("h2");

        if (scrolled > hsdPosition - 120) {
          if (dropdownHeader.style.display == "block") {
            dropdownHeaderTop.style.display = "none";
          } else if (scrolled > firstTag.offsetTop - 120) {
            dropdownHeaderTop.style.display = "none";
          } else {
            dropdownHeaderTop.style.display = "block";
          }
        } else {
          dropdownHeaderTop.style.display = "block";
        }
      });
    }

    //sticky chapters button toggle
    document.getElementById("blogStickyBtn").addEventListener(
      "click",
      function () {
        const dropdownItem = document.getElementById("blog_StickyDropdownItem");
        dropdownHeader = document.getElementById("blog_StickyDropdownHeader");
        dropdownHeaderItem = document.getElementById(
          "blog_StickyItemContainerMd"
        );
        dropdpwnIcon = document.getElementById("StickyDropdpwnIcon");

        if (dropdownHeader.style.display == "none") {
          if (dropdownItem.style.display == "block") {
            dropdownItem.style.display = "none";
            dropdownHeader.style.display = "block";
            dropdownHeaderItem.style.display = "grid";
            dropdpwnIcon.style.transform = "rotate(0deg)";
          } else {
            dropdownItem.style.display = "block";
            dropdownHeaderItem.style.display = "none";
            dropdownHeader.style.display = "block";
            dropdpwnIcon.style.transform = "rotate(180deg)";
          }
        } else {
          if (dropdownItem.style.display == "block") {
            dropdownItem.style.display = "none";
            dropdownHeader.style.display = "none";
            dropdownHeaderItem.style.display = "grid";
            dropdpwnIcon.style.transform = "rotate(0deg)";
          } else {
            dropdownItem.style.display = "block";
            dropdownHeaderItem.style.display = "none";
            dropdownHeader.style.display = "block";
            dropdpwnIcon.style.transform = "rotate(180deg)";
          }
        }
      },
      false
    );

    // blog reading progress bar
    document.addEventListener("scroll", (e) => {
      var winScroll =
        document.body.scrollTop || document.documentElement.scrollTop;
      var height =
        document.documentElement.scrollHeight -
        document.documentElement.clientHeight;

      const contentHeight =
        document.querySelector("#howToStepDetails").offsetHeight;
      const contentOffssetTop =
        document.querySelector("#howToStepDetails").offsetTop;

      var scrolled = (winScroll / height) * 100;
      let ScrollBarWidth;
      const diff = winScroll - contentOffssetTop;
      if (diff <= 0) {
        ScrollBarWidth = 0;
      } else {
        //check if we hav reached div bottom
        if (winScroll + 100 <= contentOffssetTop + contentHeight) {
          ScrollBarWidth = (diff / contentHeight) * 100;
        } else {
          ScrollBarWidth = 100;
        }
      }
      document.getElementById("sticky_p_bar").style.width =
        ScrollBarWidth + "%";
    });
  });
</script>
