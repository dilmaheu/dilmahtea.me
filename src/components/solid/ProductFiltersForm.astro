---
import subset from "@utils/shared/subset";
import ProductFiltersForm from "@solid/ProductFiltersForm";
import Products, { teaBag, teaBagVariants } from "@store/Products";

let { locale, productSizes, productVariants, recurData, type } =
  structuredClone(Astro.props);

recurData = subset(recurData, ["text_all_tea_variants", "text_all_tea_sizes"]);

const teaBagVariant = productVariants.data.find(
  ({ attributes }) => attributes.is_tea_bag,
);

const teaBagVariantLocalizedTitle = [
  teaBagVariant,
  ...teaBagVariant.attributes.localizations.data,
].find(({ attributes }) => attributes.locale.substring(0, 2) === locale)
  .attributes.Title;

[productSizes, productVariants] = [productSizes, productVariants].map(
  ({ data }, i) => ({
    data: data
      .map(({ attributes }) => {
        const allVersions = [{ attributes }, ...attributes.localizations.data];

        let localizedTitle = allVersions.find(
          ({ attributes }) => attributes.locale.substring(0, 2) === locale,
        )?.attributes.Title;

        if (localizedTitle) {
          const { Title, is_tea_bag, is_tea_bag_subvariant } = attributes;

          if (is_tea_bag_subvariant) {
            localizedTitle =
              teaBagVariantLocalizedTitle + "- " + localizedTitle;
          }

          const products = !is_tea_bag
            ? attributes.products.data.map(({ attributes }) => attributes)
            : Products.get("en | " + teaBag)
                .map(([, variants]) => variants.map(([, variant]) => variant))
                .flat();

          const rawAvailableCombinations = products.map((attributes) => {
            const variantType = i === 0 ? "variant" : "size",
              variant = attributes[variantType];

            try {
              return variant.data.attributes.Title;
            } catch (error) {
              const { Title, locale } = attributes;

              throw new Error(
                `\x1b[31m${Title} (${locale}) is missing '${variantType}'\x1b[0m`,
              );
            }
          });

          if (
            i === 0 &&
            rawAvailableCombinations.some((variant) =>
              teaBagVariants.includes(variant),
            )
          ) {
            rawAvailableCombinations.push(teaBag);
          }

          const availableCombinations = JSON.stringify(
            Array.from(new Set(rawAvailableCombinations)),
          );

          return {
            Title,
            localizedTitle,
            availableCombinations,
          };
        }
      })
      .filter(Boolean)
      .sort((a, b) =>
        a.localizedTitle.localeCompare(b.localizedTitle, locale, {
          numeric: true,
        }),
      )
      .map((data) => {
        data.localizedTitle = data.localizedTitle.replace(
          teaBagVariantLocalizedTitle + "-",
          "-",
        );

        return data;
      }),
  }),
);
---

<ProductFiltersForm
  client:load
  productSizes={productSizes}
  productVariants={productVariants}
  recurData={recurData}
  type={type}
/>
