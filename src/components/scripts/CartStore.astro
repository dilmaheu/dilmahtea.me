<script is:inline>
  window.replacePlaceholders = (content, data) => {
    const placeholderRegex =
      /<placeholder\s+name=(?:"|&#34;)(\w+)(?:"|&#34;)[^>]*><\/placeholder>/g;

    return content.replace(
      placeholderRegex,
      (match, placeholderName) => data[placeholderName]
    );
  };

  window.checkoutInfo = JSON.parse(
    localStorage.getItem("checkout-info") || "{}"
  );

  const queryParams = new URLSearchParams(location.search);

  if (queryParams.get("clear") === "cart") {
    localStorage.removeItem("cart");
  }

  const storedCart = JSON.parse(localStorage.getItem("cart") || "{}");

  let subTotal, tax, shippingCost, total;

  const updateAmounts = (cart) => {
    [subTotal = 0, tax = 0] = Object.values(cart).reduce(
      ([priceSum, taxSum], { price, tax }) => [
        priceSum + Number(price),
        taxSum + Number(tax),
      ],
      [0, 0]
    );

    shippingCost = Number(window.checkoutInfo?.shipping_cost) || 0;

    total = subTotal + shippingCost;

    subTotal = subTotal.toFixed(2).replace(".", ",");
    tax = tax.toFixed(2).replace(".", ",");
    shippingCost = shippingCost?.toFixed(2)?.replace(".", ",");
    total = total?.toFixed(2)?.replace(".", ",");
  };

  updateAmounts(storedCart);

  const id = document.getElementById.bind(document),
    queryAll = document.querySelectorAll.bind(document);

  let cartSize, cartSubTotal, orderTotal, orderShippingCost;

  const updateUI = (cart) => {
    cartSize ??= id("cart-size");
    cartSubTotal ??= id("cart-subtotal");

    orderTotal ??= queryAll(".order-total");
    orderShippingCost ??= queryAll(".order-shipping-cost");

    updateAmounts(cart);

    cartSubTotal && (cartSubTotal.textContent = "€" + subTotal);
    cartSize && (cartSize.textContent = Object.values(cart).length);

    orderTotal.forEach((span) => (span.textContent = "€" + total));
    orderShippingCost.forEach(
      (span) => (span.textContent = "€" + shippingCost)
    );
  };

  window.cart = new Proxy(storedCart, {
    get(cart, property) {
      switch (property) {
        case "subTotal":
          return subTotal;

        case "tax":
          return tax;

        case "shippingCost":
          return shippingCost;

        case "total":
          return total;

        case "updateUI":
          return updateUI;

        default:
          return cart[property];
      }
    },

    set(cart, productId, productData) {
      const productExistsInCart = !!cart[productId];

      cart[productId] = productData;

      localStorage.setItem("cart", JSON.stringify(cart));

      updateUI(cart);

      if (productExistsInCart) {
        const cartProductElement = id(productId),
          cartProductAmountInputs = cartProductElement.querySelectorAll(
            ".cart-product-amount-input, .cart-overlay-product-amount-input"
          ),
          cartProductPriceElements = cartProductElement.querySelectorAll(
            ".cart-product-price, .cart-overlay-product-price"
          );

        cartProductAmountInputs.forEach((element) => {
          element.value = productData.quantity;
        });

        cartProductPriceElements.forEach((element) => {
          element.textContent =
            "€" + productData.price.toFixed(2).replace(".", ",");
        });
      } else {
        window.addProductToCart(productId);

        const newCartProductElement = id(productId),
          newProductAmountInput = newCartProductElement.querySelectorAll(
            ".cart-overlay-product-amount-input"
          ),
          newProductAmountTweakBtns = newCartProductElement.querySelectorAll(
            ".cart-overlay-product-amount-tweak-btn"
          );

        window.listenToInputEvents(
          newProductAmountTweakBtns,
          newProductAmountInput
        );

        if (Object.keys(cart).length === 1) {
          const cartOverlayContent = id("cart-overlay-content"),
            emptyCartNotification = id("empty-cart-notification");

          cartOverlayContent.classList.remove("hidden");
          emptyCartNotification.classList.add("hidden");
        }
      }

      return true;
    },

    deleteProperty(cart, property) {
      delete cart[property];

      localStorage.setItem("cart", JSON.stringify(cart));

      updateUI(cart);

      return true;
    },
  });
</script>

<script>
  const SKUs = Object.keys(window.cart);

  const productsData = await fetch("/db/products.json").then((response) =>
    response.json()
  );

  SKUs.forEach((SKU) => {
    const existingProductData = window.cart[SKU],
      productData = productsData[SKU];

    const removeProductButton = document
      .getElementById(SKU)
      .querySelector(".remove-item-btn") as HTMLButtonElement;

    if (!productData) {
      removeProductButton.click();
    } else if (
      existingProductData.tax !== productData.tax ||
      existingProductData.price !== productData.price ||
      existingProductData.size !== productData.size ||
      existingProductData.image !== productData.image ||
      existingProductData.names !== productData.names
    ) {
      removeProductButton.click();

      window.cart[SKU] = {
        ...existingProductData,
        ...productData,
      };
    }
  });
</script>
