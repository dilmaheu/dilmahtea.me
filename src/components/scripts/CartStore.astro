<script is:inline>
  {
    window.replacePlaceholders = (content, data) => {
      const placeholderRegex =
        /<placeholder\s+name=(?:"|&#34;)(\w+)(?:"|&#34;)[^>]*><\/placeholder>/g;

      return content.replace(
        placeholderRegex,
        (match, placeholderName) => data[placeholderName]
      );
    };

    const storedCart = JSON.parse(localStorage.getItem("cart") || "{}");

    let subTotal, tax, shippingCost, total;

    const updateAmounts = (cart) => {
      ({ subTotal = 0, tax = 0 } = Object.values(cart).reduce(
        ([priceSum, taxSum], { price, tax }) => ({
          subTotal: priceSum + Number(price),
          tax: taxSum + Number(tax),
        }),
        [0, 0]
      ));

      shippingCost = window.checkoutContactInfo?.shipping_cost || 0;

      total = subTotal + shippingCost;

      subTotal = subTotal.toFixed(2).replace(".", ",");
      tax = tax.toFixed(2).replace(".", ",");
      shippingCost = shippingCost?.toFixed(2)?.replace(".", ",");
      total = total?.toFixed(2)?.replace(".", ",");
    };

    updateAmounts(storedCart);

    const id = document.getElementById.bind(document),
      queryAll = document.querySelectorAll.bind(document);

    let cartSize,
      orderTax,
      orderTotal,
      cartSubTotal,
      orderSubTotal,
      orderShippingCost;

    const updateUI = (cart) => {
      cartSize ??= id("cart-size");
      cartSubTotal ??= id("cart-subtotal");

      orderTax ??= queryAll(".order-tax");
      orderTotal ??= queryAll(".order-total");
      orderSubTotal ??= queryAll(".order-subtotal");
      orderShippingCost ??= queryAll(".order-shipping-cost");

      updateAmounts(cart);

      cartSubTotal.textContent = "€" + subTotal;
      cartSize && (cartSize.textContent = Object.values(cart).length);

      orderTax.forEach((span) => (span.textContent = "€" + tax));
      orderTotal.forEach((span) => (span.textContent = "€" + total));
      orderSubTotal.forEach((span) => (span.textContent = "€" + subTotal));
      orderShippingCost.forEach(
        (span) => (span.textContent = "€" + shippingCost)
      );
    };

    window.cart = new Proxy(storedCart, {
      get(cart, property) {
        switch (property) {
          case "subTotal":
            return subTotal;

          case "tax":
            return tax;

          case "shippingCost":
            return shippingCost;

          case "total":
            return total;

          case "updateUI":
            return updateUI;

          default:
            return cart[property];
        }
      },

      set(cart, id, productData) {
        const existingProduct = cart[id];

        if (existingProduct) {
          const productElement = document.getElementById(id),
            productPriceElement = productElement.querySelector(
              ".cart-product-price"
            ),
            productQuantityElement = productElement.querySelector(
              ".cart-product-quantity"
            );

          productQuantityElement.value = productData.quantity;
          productPriceElement.textContent =
            "€" + Number(productData.price).toFixed(2).replace(".", ",");
        }

        cart[id] = productData;

        localStorage.setItem("cart", JSON.stringify(cart));

        existingProduct ?? window.addProductToCart(id);

        updateUI(cart);

        return true;
      },

      deleteProperty(cart, property) {
        delete cart[property];

        localStorage.setItem("cart", JSON.stringify(cart));

        updateUI(cart);

        return true;
      },
    });
  }
</script>
