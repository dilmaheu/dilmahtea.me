---
import productsStore from "@store/Products";
import getPriceIncludingTax from "@utils/shared/getPriceIncludingTax";
import shouldDisplayExperimentals from "@utils/shouldDisplayExperimentals";

const isProduction = !shouldDisplayExperimentals;

const products = Object.fromEntries(
  await Promise.all(
    productsStore.get("all").data.map(async ({ attributes }) => {
      const {
        SKU: sku,
        Price,
        VatPercentage,
        productVariant,
        productSize,
      } = attributes;

      const image = await importImage(
        import.meta.env.STRAPI_URL +
          attributes.Intro_blob.data.attributes.formats.thumbnail.url,
      );

      const names = JSON.stringify(
        Object.fromEntries(
          [{ attributes }, ...attributes.localizations.data].map(
            ({
              attributes: { locale, Title, category, category_tea_range, size },
            }) => [
              locale.substring(0, 2),
              [
                Title,
                category_tea_range?.data?.attributes?.Title,
                category?.data?.attributes?.Title,
                size?.data?.attributes?.Title,
              ]
                .filter(Boolean)
                .join(" &#x025CF "),
            ],
          ),
        ),
      );

      return [
        sku,
        {
          sku,
          Price,
          VatPercentage,
          image,
          names,
          tea_variant: productVariant,
          tea_size: productSize,
        },
      ];
    }),
  ),
);
---

<script
  is:inline
  define:vars={{
    products,
    isProduction,
    stringifiedGetPriceIncludingTax: getPriceIncludingTax.toString(),
  }}
>
  window.getPriceIncludingTax = new Function(
    "return " + stringifiedGetPriceIncludingTax,
  )();

  window.replacePlaceholders = (content, data) => {
    const placeholderRegex =
      /<placeholder\s+name=(?:"|&#34;)(\w+)(?:"|&#34;)[^>]*><\/placeholder>/g;

    return content.replace(
      placeholderRegex,
      (_, placeholderName) => data[placeholderName],
    );
  };

  window.checkoutInfo = JSON.parse(
    localStorage.getItem("checkout-info") || "{}",
  );

  const queryParams = new URLSearchParams(location.search);

  if (queryParams.get("clear") === "cart") {
    localStorage.removeItem("cart");
  }

  const storedCart = JSON.parse(localStorage.getItem("cart") || "{}");

  Object.entries(storedCart).forEach(([SKU, inCartProductData]) => {
    const productData = products[SKU];

    if (!productData) {
      delete storedCart[SKU];
    } else {
      const { Price, VatPercentage } = productData,
        { quantity } = inCartProductData;

      const [tax, priceIncludingTax] = window.getPriceIncludingTax({
        Price,
        VatPercentage,
        quantity,
        fix: true,
      });

      storedCart[SKU] = {
        quantity: inCartProductData.quantity,
        tax,
        price: priceIncludingTax,
        ...productData,
      };

      // remove Price from in-cart product data
      delete storedCart[SKU].Price;
    }
  });

  let subTotal, tax, shippingCost, total;

  const updateAmounts = (cart) => {
    [subTotal = 0, tax = 0] = Object.keys(cart).reduce(
      ([subTotal, taxSum], SKU) => {
        const { Price, VatPercentage } = products[SKU],
          { quantity } = cart[SKU];

        const [tax, priceIncludingTax] = window.getPriceIncludingTax({
          Price,
          VatPercentage,
          quantity,
        });

        return [subTotal + priceIncludingTax, taxSum + tax];
      },
      [0, 0],
    );

    shippingCost = Number(window.checkoutInfo?.shipping_cost) || 0;

    total = subTotal + shippingCost;

    subTotal = subTotal.toFixed(2).replace(".", ",");
    tax = tax.toFixed(2).replace(".", ",");
    shippingCost = shippingCost?.toFixed(2)?.replace(".", ",");
    total = total?.toFixed(2)?.replace(".", ",");
  };

  updateAmounts(storedCart);

  const id = document.getElementById.bind(document),
    queryAll = document.querySelectorAll.bind(document);

  let cartSize, cartSubTotal, orderTotal, orderShippingCost;

  const updateUI = (cart) => {
    cartSize ??= id("cart-size");
    cartSubTotal ??= id("cart-subtotal");

    orderTotal ??= queryAll(".order-total");
    orderShippingCost ??= queryAll(".order-shipping-cost");

    updateAmounts(cart);

    cartSubTotal && (cartSubTotal.textContent = "€" + subTotal);
    cartSize && (cartSize.textContent = Object.values(cart).length);

    orderTotal.forEach((span) => (span.textContent = "€" + total));
    orderShippingCost.forEach(
      (span) => (span.textContent = "€" + shippingCost),
    );
  };

  window.cart = new Proxy(storedCart, {
    get(cart, property) {
      switch (property) {
        case "subTotal":
          return subTotal;

        case "tax":
          return tax;

        case "shippingCost":
          return shippingCost;

        case "total":
          return total;

        case "updateUI":
          return updateUI;

        default:
          return cart[property];
      }
    },

    set(cart, productId, productData) {
      const productExistsInCart = !!cart[productId];

      const { quantity } = productData,
        { Price, VatPercentage, image, names, tea_variant, tea_size } =
          products[productId];

      const [tax, price] = window.getPriceIncludingTax({
        Price,
        VatPercentage,
        quantity,
      });

      productData = {
        sku: productId,
        quantity,
        tax,
        price,
        image,
        names,
        tea_variant,
        tea_size,
      };

      cart[productId] = productData;

      localStorage.setItem("cart", JSON.stringify(cart));

      updateUI(cart);

      if (productExistsInCart) {
        const cartProductElement = id(productId),
          cartProductAmountInputs = cartProductElement.querySelectorAll(
            ".cart-product-amount-input, .cart-overlay-product-amount-input",
          ),
          cartProductPriceElements = cartProductElement.querySelectorAll(
            ".cart-product-price, .cart-overlay-product-price",
          );

        cartProductAmountInputs.forEach((element) => {
          element.value = productData.quantity;
        });

        cartProductPriceElements.forEach((element) => {
          element.textContent =
            "€" + productData.price.toFixed(2).replace(".", ",");
        });
      } else {
        window.addProductToCart(productId);

        const newCartProductElement = id(productId),
          newProductAmountInput = newCartProductElement.querySelectorAll(
            ".cart-overlay-product-amount-input",
          ),
          newProductAmountTweakBtns = newCartProductElement.querySelectorAll(
            ".cart-overlay-product-amount-tweak-btn",
          );

        window.listenToInputEvents(
          newProductAmountTweakBtns,
          newProductAmountInput,
        );

        if (Object.keys(cart).length === 1) {
          const cartOverlayContent = id("cart-overlay-content"),
            emptyCartNotification = id("empty-cart-notification");

          cartOverlayContent.classList.remove("hidden");
          emptyCartNotification.classList.add("hidden");
        }
      }

      if (isProduction && !productExistsInCart) {
        fetch("https://analytics.scripts.dilmahtea.me", {
          method: "POST",
          priority: "low",
          body: JSON.stringify({
            event: "add_to_cart",
            originURL: location.origin + location.pathname,
            props: {
              SKU: productData.sku,
              Quantity: productData.quantity,
            },
          }),
        });
      }

      return true;
    },

    deleteProperty(cart, property) {
      delete cart[property];

      localStorage.setItem("cart", JSON.stringify(cart));

      updateUI(cart);

      return true;
    },
  });
</script>
