<script defer>
  {
    const query = document.querySelector.bind(document),
      queryAll = document.querySelectorAll.bind(document);

    const header = query("#navigation"),
      headings = query("#headings"),
      postDetails = query("#post-details"),
      chapters = [...queryAll("#post-details .chapter")],
      [firstChapter] = chapters,
      stickyChapters = query("#sticky-chapters"),
      stickyChaptersHeading = query("#sticky-chapters-heading"),
      stickyDropdownToggle = query("#sticky-dropdown-toggle"),
      chapterLinks = [...queryAll(".chapter-link:not(.chapter-link-sm)")],
      stickyChapterLinks = [...queryAll(".chapter-link-sm")],
      chapterLinksContainer = query("#chapter-links"),
      stickyChapterLinksContainer = query("#sticky-chapter-links"),
      headingIDs = chapterLinks.map((link) => link.hash.slice(1)),
      [firstHeadingID] = headingIDs,
      readingProgressBar = query("#reading-progress-bar");

    const isChapterOnScreen = (chapterElement) => {
      const { top, bottom } = chapterElement.getBoundingClientRect(),
        topSafeAreaHeight =
          window.innerWidth < 768
            ? readingProgressBar.getBoundingClientRect().bottom
            : 0,
        // consider a chapter element on screen only if it's at least 50px on screen
        bottomSafeAreaHeight = 50;

      if (
        top < window.innerHeight - bottomSafeAreaHeight &&
        bottom > topSafeAreaHeight
      )
        return true;

      return false;
    };

    const getActiveChapter = (visibleChapters) => {
      const activeChapter =
        visibleChapters.find((chapterElement) =>
          isChapterOnScreen(chapterElement.firstElementChild),
        ) ||
        visibleChapters[0] ||
        chapters[0];

      return activeChapter;
    };

    const styleActiveChapter = () => {
      const visibleChapters = chapters.filter(isChapterOnScreen),
        // mark first chapter on screen as active and fallback to the first chapter
        activeChapter = getActiveChapter(visibleChapters),
        activeChapterIndex = chapters.indexOf(activeChapter),
        activeChapterHeading = activeChapter.querySelector("h2");

      [...chapterLinks, ...stickyChapterLinks].forEach((link) =>
        link.classList.remove("active"),
      );

      // highlight active chapter link
      chapterLinks[activeChapterIndex].classList.add("active");
      stickyChapterLinks[activeChapterIndex].classList.add("active");

      const containerRect = postDetails.getBoundingClientRect(),
        { bottom: headerBottom } = header.getBoundingClientRect();

      const displayStickyChapters =
        window.innerWidth < 768 &&
        firstChapter.getBoundingClientRect().y - headerBottom < 0 &&
        visibleChapters.length > 0;

      if (displayStickyChapters) {
        stickyChapters.style.top =
          headerBottom - (window.innerWidth >= 640 ? 10 : 0) + "px";

        stickyChaptersHeading.textContent = activeChapterHeading.textContent;

        const readPixels = Math.abs(containerRect.y - window.innerHeight),
          detailedBlogHeight = containerRect.height,
          minProgress =
            ((window.innerHeight - headerBottom) / detailedBlogHeight) * 100,
          progress = (readPixels / detailedBlogHeight) * 100,
          correctedProgress =
            ((progress - minProgress) / (100 - minProgress)) * 100;

        // update progress meter
        readingProgressBar.style.width = `${correctedProgress}%`;
      } else if (window.innerWidth >= 768) {
        headings.style.top = headerBottom + 25 + "px";
      }

      // display sticky chapters
      stickyChapters.classList[displayStickyChapters ? "remove" : "add"](
        "invisible",
      );

      const [visibleChapterLinks, visibleLinksContainer] =
        window.innerWidth >= 768 && isChapterOnScreen(chapterLinksContainer)
          ? [chapterLinks, chapterLinksContainer]
          : !stickyChapterLinksContainer.parentElement.classList.contains(
              "hidden",
            )
          ? [stickyChapterLinks, stickyChapterLinksContainer]
          : [];

      if (visibleLinksContainer) {
        const activeHeadingLink = visibleChapterLinks[activeChapterIndex];

        const containerHeight =
          window.innerHeight -
          (visibleLinksContainer.getBoundingClientRect().top + 15);

        visibleLinksContainer.style.maxHeight = containerHeight + "px";

        visibleLinksContainer.scrollTop =
          activeHeadingLink.offsetTop - containerHeight;
      }
    };

    styleActiveChapter();

    window.addEventListener("scroll", styleActiveChapter);
    window.addEventListener("resize", styleActiveChapter);

    stickyDropdownToggle.addEventListener("click", () => {
      stickyChapterLinksContainer.parentElement.classList.toggle("hidden");
    });

    // collapse dropdown when an item is clicked
    [...document.links].forEach((link) => {
      if (link.hash && headingIDs.includes(link.hash.slice(1))) {
        link.addEventListener("click", (event) => {
          event.preventDefault();

          const headingID = link.hash.slice(1),
            heading = document.getElementById(headingID),
            headerHeight = header.getBoundingClientRect().height;

          const isFirstHeadingLink = firstHeadingID === headingID;

          let blockedAreaBottom = headerHeight;

          if (window.innerWidth < 768) {
            stickyChapterLinksContainer.parentElement.classList.add("hidden");

            const stickyChaptersHeight =
              stickyChapters.getBoundingClientRect().height;

            blockedAreaBottom += isFirstHeadingLink
              ? 10
              : stickyChaptersHeight - 10;
          }

          const { offsetTop: headingOffsetTop } = heading;

          window.scrollTo({
            top: headingOffsetTop - (blockedAreaBottom + 20),
          });
        });
      }
    });
  }
</script>
