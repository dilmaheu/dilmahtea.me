---
import Brand from "@images/logo.svg";
import LangSelectorsDropdown from "./LangSelectorsDropdown.astro";
import shouldDisplayExperimentals from "src/utils/shouldDisplayExperimentals";

interface Props {
  docLocale: string;
  footerText: string;
  availableLocales: string[];
}

const { docLocale, footerText, availableLocales } = Astro.props as Props;
---

<div id="navigation">
  <nav class="wrapper mx-auto z-50 relative top-0">
    <div class="flex justify-between items-center paddingTop navbar">
      <div class="my-auto">
        <a href="/">
          <div class="brandLogo">
            <img src={Brand} class="w-full h-full" alt="brand-logo" />
          </div>
        </a>
      </div>

      <div class="hidden sm:block mr-auto my-auto navMenu">
        <div class="flex mr-auto my-auto navMenuItem">
          <a class="navItem" href="/crowdfunding">Crowdfunding</a>
          <a class="navItem" href="/blog">Blog</a>
          {
            shouldDisplayExperimentals() && (
              <a class="navItem" href="/howto">
                How-to
              </a>
            )
          }
        </div>
      </div>

      <div class="flex items-center">
        <div class="flex items-center">
          {
            /* <div class="relative search">
              <div class="flex absolute right-0 items-center justify-center pointer-events-none searchIcnContainer">
                <svg
                  class="searchIcn"
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 25.8 25.8"
                >
                  <path
                    d="m24.8 24.8-5.7-5.7m3.2-7.5a10.7 10.7 0 0 1-3.2 7.5 10.7 10.7 0 0 1-7.5 3.2 10.7 10.7 0 0 1-7.5-3.2 10.6 10.6 0 0 1 15-15 10.7 10.7 0 0 1 3.2 7.5Z"
                    fill="none"
                    stroke="#d0d2d0"
                    stroke-linecap="round"
                    stroke-width="2"
                  />
                </svg>
              </div>

              <input
                type="text"
                id="search-navbar"
                class="block w-full bg-gray-5 focus:outline-none searchInput"
                placeholder="Search tea stories"
              />
            </div> */
          }

          <LangSelectorsDropdown
            docLocale={docLocale}
            availableLocales={availableLocales}
          />
        </div>

        <div class="block sm:hidden sidebarMenuBtn">
          <div id="sidebarOpen" class="block sm:hidden cursor-pointer">
            <svg
              class="w-full h-full"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 22.4 19.2"
              ><path
                d="M0 17.6a1.6 1.6 0 0 0 .5 1.1 1.6 1.6 0 0 0 1.1.5h19.2a1.6 1.6 0 0 0 0-3.2H1.6a1.6 1.6 0 0 0-1.1.5 1.6 1.6 0 0 0-.5 1.1Zm0-8a1.6 1.6 0 0 0 .5 1.1 1.6 1.6 0 0 0 1.1.5h9.6a1.6 1.6 0 0 0 0-3.2H1.6a1.6 1.6 0 0 0-1.1.5A1.6 1.6 0 0 0 0 9.6Zm0-8a1.6 1.6 0 0 0 .5 1.1 1.6 1.6 0 0 0 1.1.5h19.2a1.6 1.6 0 0 0 1.1-.5 1.6 1.6 0 0 0 .5-1.1 1.6 1.6 0 0 0-.5-1.1 1.6 1.6 0 0 0-1.1-.5H1.6A1.6 1.6 0 0 0 .5.5 1.6 1.6 0 0 0 0 1.6Z"
                fill="#e3dfde"
                fill-rule="evenodd"></path>
            </svg>
          </div>
          <div id="sidebarClose" class="cursor-pointer">
            <svg
              class="w-full h-full"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 19.2 19.2"
            >
              <path
                d="M.5.5A1.6,1.6,0,0,1,1.6,0,1.6,1.6,0,0,1,2.7.5L9.6,7.4,16.5.5A1,1,0,0,1,17,.1h1.2l.6.4.3.5a1.3,1.3,0,0,1,.1.6,1.3,1.3,0,0,1-.1.6l-.4.6L11.9,9.6l6.8,6.9a1.6,1.6,0,0,1-1.1,2.7,2.1,2.1,0,0,1-1.1-.4L9.6,11.9,2.7,18.8a2.1,2.1,0,0,1-1.1.4,1.6,1.6,0,0,1-1.1-.5,1.5,1.5,0,0,1,0-2.2L7.3,9.6.5,2.8A1.8,1.8,0,0,1,0,1.6,1.6,1.6,0,0,1,.5.5Z"
                style="fill:#e3dfde;fill-rule:evenodd"></path>
            </svg>
          </div>
        </div>
      </div>
    </div>
  </nav>

  <div id="sidebar">
    <div class="grid content-between h-full sidebarContainer">
      {
        /* <div class="relative search">
          <div class="flex absolute right-0 items-center justify-center pointer-events-none searchIcnContainer">
            <svg
              class="searchIcn"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 25.8 25.8"
            >
              <path
                d="m24.8 24.8-5.7-5.7m3.2-7.5a10.7 10.7 0 0 1-3.2 7.5 10.7 10.7 0 0 1-7.5 3.2 10.7 10.7 0 0 1-7.5-3.2 10.6 10.6 0 0 1 15-15 10.7 10.7 0 0 1 3.2 7.5Z"
                fill="none"
                stroke="#d0d2d0"
                stroke-linecap="round"
                stroke-width="2"
              />
            </svg>
          </div>

          <input
            type="text"
            id="search-navbar"
            class="block w-full bg-gray-5 focus:outline-none searchInput"
            placeholder="Search tea stories"
          />
        </div> */
      }

      <div class="flex navMenuItem">
        <ul>
          <li><a class="navItem" href="/crowdfunding">Crowdfunding</a></li>
          <li><a class="navItem" href="/blog">Blog</a></li>
          {
            shouldDisplayExperimentals() && (
              <li>
                <a class="navItem" href="/howto">
                  How-to
                </a>
              </li>
            )
          }
        </ul>
      </div>

      <div class="sidebarfooter" set:html={footerText}></div>
    </div>
  </div>
</div>
<div class="block sm:hidden py-11"></div>

<script is:inline>
  {
    const navigation = document.getElementById("navigation"),
      translationNotFoundNotification = document.querySelector(
        ".translation-not-found-notification"
      );

    window.addEventListener("scroll", () => {
      const translationNotFoundNotificationHeight =
        translationNotFoundNotification.getBoundingClientRect().height;

      // fix sticky navbar position if top notification is shown
      navigation.style.top = `${translationNotFoundNotificationHeight}px`;

      navigation.style.backgroundImage =
        scrollY > 0 || document.body.style.position === "fixed"
          ? "url(/bg-images/navBg.webp)"
          : "unset";
    });
  }
</script>

<script>
  const query = document.querySelector.bind(document),
    rootElement = query(":root"),
    sidebar = query("#sidebar"),
    navigation = query("#navigation"),
    sidebarOpen = query("#sidebarOpen"),
    sidebarClose = query("#sidebarClose");

  function disableScrolling() {
    Object.assign(document.body.style, {
      width: "100%",
      top: `-${window.scrollY}px`,
      position: "fixed",
      overflowY: "scroll",
    });
  }

  function enableScrolling() {
    const scrollYPosition = parseInt(document.body.style.top.slice(1, -2));

    Object.assign(document.body.style, {
      width: "auto",
      position: "static",
      overflowY: "auto",
    });

    try {
      window.scrollTo({
        top: scrollYPosition,
        // @ts-ignore
        behavior: "instant",
      });
    } catch (error) {
      const currentRootScrollBehavior = rootElement.style.scrollBehavior;

      rootElement.style.scrollBehavior = "auto";

      window.scrollTo({
        top: scrollYPosition,
        behavior: "auto",
      });

      rootElement.style.scrollBehavior = currentRootScrollBehavior;
    }
  }

  const updateSidebarTopPosition = () => {
    sidebar.style.top = `${navigation.getBoundingClientRect().bottom}px`;
  };

  window.addEventListener("resize", updateSidebarTopPosition);

  sidebarOpen.addEventListener("click", () => {
    window.removeEventListener("resize", updateSidebarTopPosition);

    updateSidebarTopPosition();

    sidebar.style.display = "block";
    sidebarOpen.style.display = "none";
    sidebarClose.style.display = "block";
    navigation.style.backgroundImage = "url(/bg-images/navBg.webp)";

    disableScrolling();

    window.addEventListener("resize", updateSidebarTopPosition);
  });

  sidebarClose.addEventListener("click", () => {
    sidebar.style.display = "none";
    sidebarOpen.style.display = "block";
    sidebarClose.style.display = "none";
    navigation.style.backgroundImage = "unset";

    enableScrolling();
  });

  window.addEventListener("resize", () => {
    if (window.innerWidth > 639) {
      enableScrolling();

      window.removeEventListener("resize", updateSidebarTopPosition);
    } else if (sidebarClose.style.display === "block") {
      disableScrolling();

      window.addEventListener("resize", updateSidebarTopPosition);
    }
  });
</script>
