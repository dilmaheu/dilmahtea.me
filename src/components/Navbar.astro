---
import { Icon } from "astro-icon/components";
import { Picture } from "astro-imagetools/components";

import CMS from "@store/CMS";
import RecurringImages from "@store/RecurringImages";
import localizeCMSImage from "@utils/localizeCMSImage";
import getUserAccountPagesLink from "@utils/getUserAccountPagesLink";

import ProfileMenu from "@solid/ProfileMenu.astro";

import ClipPathSVG from "@components/ClipPathSVG.astro";
import DynamicHTML from "@components/DynamicHTML.astro";
import LangSelectorsDropdown from "@components/LangSelectorsDropdown.astro";
import RegionSelectorsDropdown from "@components/RegionSelectorsDropdown.astro";

const {
  logo,
  nav_background,
  nav_background_sm,
  sidebar_background,
  user_account_nav_background,
  user_account_nav_background_sm,
} = RecurringImages;

interface Props {
  page?: Record<string, any>;
  docLocale: string;
  footerText: string;
  isCartNavbar?: boolean;
  availableLocales: string[];
  isUserAccountNavbar?: boolean;
}

const {
  page,
  docLocale,
  footerText,
  isCartNavbar,
  availableLocales,
  isUserAccountNavbar,
} = Astro.props as Props;

const recurData = CMS.get("recurringElement", docLocale),
  ariaLabelRecurData = CMS.get("ariaLabelRecurringElement", docLocale);

const {
  text_region,
  text_language,
  Button_save_text,
  search_text_no_result_found,
  Nav_menu: menu,
  Nav_menu_cart_icon: cartIcon,
  Nav_menu_profile_icon: profileIcon,
  Nav_menu_localization_icon: localizationIcon,
  Nav_menu_cart_visibility: cartVisibility,
  Nav_menu_search_visibility: searchVisibility,
  Nav_menu_profile_visibility: profileVisibility,
  Nav_menu_profile_menu: profile_menu,
  Nav_menu_localization_visibility: localizationVisibility,
  Nav_menu_region_selector_visibility: regionSelectorVisibility,
  Nav_menu_language_selector_visibility: languageSelectorVisibility,
} = recurData;

function trimLink(link) {
  return link?.replace(/^\/|\/$/g, "");
}

const visibleMenuItems = menu.filter((item) => item.Visibility === true),
  loginLink = getUserAccountPagesLink("login", docLocale);
---

<style lang="scss">
  @use "src/styles/poly-fluid" as *;

  .navbar {
    $navbar-pad: poly-fluid-clamp-md(20px, 35px);

    padding-top: $navbar-pad;
    padding-bottom: $navbar-pad;
  }

  #nav-top-content-container {
    @media (max-width: 639.98px) {
      clip-path: url(#nav-curve);
    }
  }

  .profile-dropdown-notch {
    padding-right: poly-fluid-clamp(
      (
        1024px: 20px,
        768px: 28px,
      )
    );
  }

  .fullscreen-menu-sm-block {
    @media (max-width: 639.98px) {
      display: block !important;
    }
  }

  .nav-icon {
    $nav-icon-size: poly-fluid-clamp-md(35px, 50px);

    width: $nav-icon-size;
    height: $nav-icon-size;
    padding: poly-fluid-clamp-md(10px, 12px);
  }

  .nav-cart-num {
    $nav-cart-num-size: poly-fluid-clamp-md(15px, 20px);

    width: $nav-cart-num-size;
    height: $nav-cart-num-size;
  }

  .nav-menu-title {
    @apply leading-[150%] py-[15px];

    font-size: poly-fluid-clamp-md(12px, 18px);
  }

  .nav-menu-flex {
    @apply flex items-center;

    gap: poly-fluid-clamp-md(20px, 80px);
  }

  .nav-menu-padding-right {
    @include poly-fluid-sizing(
      "padding-right",
      (
        639px: 0px,
        640px: 260px,
        768px: 300px,
        1024px: 380px,
        1440px: 460px,
        1536px: 550px,
      )
    );
  }

  .nav-menu-flex {
    @apply flex items-center;

    gap: poly-fluid-clamp-md(20px, 80px);
  }

  .nav-sub-menu-title {
    @apply font-normal leading-[150%] text-white py-3;

    font-size: poly-fluid-clamp-md(12px, 16px);
  }

  .open-sub-menu-checkbox {
    & + div {
      .open-sub-menu-icon {
        display: block;
      }

      .close-sub-menu-icon {
        display: none;
      }
    }

    & ~ .sub-menu {
      display: none;
    }

    &:checked {
      & + div {
        .open-sub-menu-icon {
          display: none;
        }

        .close-sub-menu-icon {
          display: block;
        }
      }

      & ~ .sub-menu {
        display: grid;
      }
    }
  }

  #sidebar nav {
    .menu-title {
      @apply text-b1 font-semibold;
    }

    .sub-menu-title {
      @apply text-b2 font-medium;
    }
  }

  .search-input {
    @apply w-full text-b5 text-black rounded-full 
      focus:ring focus:ring-warning/50 focus:outline-none;

    padding: poly-fluid-clamp-primary(8px, 10px)
      poly-fluid-clamp-primary(15px, 20px);
    padding-right: poly-fluid-clamp-primary(45px, 50px);

    @media (min-width: 640px) {
      width: poly-fluid-clamp-primary(285px, 800px);
    }
  }

  .search-icon {
    $search-icon-size: poly-fluid-clamp-md(30px, 37px);

    @apply absolute inset-y-0 right-[5px] flex my-auto;

    width: $search-icon-size;
    height: $search-icon-size;
  }

  input[type="search"] {
    &::-webkit-search-decoration:hover,
    &::-webkit-search-cancel-button {
      @apply text-b3 text-error-dark cursor-pointer;
    }
  }

  #search-results-container {
    @apply w-[90vw] mx-[min(100px,5vw)] p-[15px] sm:p-6 sm:m-1
      top-[90%] sm:top-[75%] md:top-[70%];

    @media (min-width: 640px) {
      width: poly-fluid-clamp(
        (
          1065px: 575px,
          1440px: 800px,
        )
      );

      @include poly-fluid-sizing(
        "margin-left",
        (
          640px: 35px,
          1065px: 210px,
          1440px: 225px,
          1730px: 235px,
          2050px: 415px,
        )
      );
    }
  }
</style>

<header
  id="navigation"
  class="shadow-md sm:shadow-none sticky top-0 z-[99] grid w-full bg-primary sm:bg-transparent md:bg-primary"
>
  <div class="navbar-container relative w-full sm:flex items-center z-20">
    <ClipPathSVG
      id="nav-curve"
      path="M0,0 L0,0.936 C0,0.936,0.009,1,0.107,1 C0.152,1,0.198,0.992,0.247,0.983 C0.305,0.973,0.368,0.961,0.441,0.961 C0.511,0.961,0.573,0.971,0.634,0.981 C0.692,0.991,0.749,1,0.81,1 C0.934,1,1,0.878,1,0.878 V0 H0"
    />

    <div
      class="absolute top-0 left-0 w-full h-full sm:bg-primary-lighter"
      style="clip-path: url(#nav-curve);"
    >
      {
        (nav_background ||
          (isUserAccountNavbar && user_account_nav_background)) && (
          <Picture
            alt=""
            layout="fill"
            preload="avif"
            breakpoints={{ maxWidth: 640 }}
            src={
              isUserAccountNavbar
                ? user_account_nav_background_sm?.src ||
                  user_account_nav_background.src
                : nav_background_sm?.src || nav_background.src
            }
            artDirectives={[
              {
                media: "(min-width: 640px)",
                breakpoints: { minWidth: 640 },
                src: isUserAccountNavbar
                  ? user_account_nav_background.src
                  : nav_background.src,
              },
            ]}
          />
        )
      }
    </div>

    {
      !isCartNavbar && (
        <ClipPathSVG
          id="cart-btn-curve"
          path="M0.5,0 A0.5,0.5,0,0,0,0,0.5 a0.5,0.5,0,0,0,0.5,0.5 a0.5,0.5,0,0,0,0.5,-0.5 a0.5,0.5,0,0,0,-0.021,-0.146 a0.25,0.25,0,0,1,-0.104,0.021 A0.25,0.25,0,0,1,0.625,0.125 a0.25,0.25,0,0,1,0.021,-0.104 a0.5,0.5,0,0,0,-0.146,-0.021"
        />
      )
    }

    <div
      id="nav-top-content-container"
      class="relative top-0 z-50 w-full bg-primary-lighter sm:bg-transparent"
    >
      <div
        class="navbar wrapper grid-gap flex mx-auto justify-between items-center"
      >
        <div class="grid-gap flex">
          <a href="/" class="brand-logo my-auto">
            <img class="h-full" {...logo} />
          </a>

          {
            searchVisibility && (
              <div class="hidden sm:block relative h-fit">
                <input
                  type="search"
                  placeholder="Search"
                  class="search-input"
                />

                <span class="search-icon">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 37 37">
                    <path
                      d="M0,18.5C0,8.28,8.28,0,18.5,0h0c10.22,0,18.5,8.28,18.5,18.5h0c0,10.22-8.28,18.5-18.5,18.5h0C8.28,37,0,28.72,0,18.5h0Z"
                      fill="#1e4848"
                    />
                    <path
                      d="M22.54,23.88c-1.37,1.08-3.1,1.73-4.99,1.73-4.45,0-8.05-3.61-8.05-8.05s3.61-8.05,8.05-8.05,8.05,3.61,8.05,8.05c0,1.88-.65,3.61-1.73,4.99l3.34,3.34c.37.37.37.97,0,1.34-.37.37-.97.37-1.34,0l-3.34-3.34ZM23.71,17.55c0,3.4-2.76,6.16-6.16,6.16s-6.16-2.76-6.16-6.16,2.76-6.16,6.16-6.16,6.16,2.76,6.16,6.16Z"
                      fill="#fff"
                      fill-rule="evenodd"
                    />
                  </svg>
                </span>
              </div>
            )
          }
        </div>

        <div class="division-in-gap flex justify-end items-center">
          {
            localizationVisibility && (
              <div class="relative group hover:z-10">
                <button
                  id="localization-menu-open-btn"
                  aria-label={
                    ariaLabelRecurData.Navbar_open_localization_menu_text
                  }
                  class="peer w-fit flex justify-center items-center bg-white rounded-full cursor-pointer"
                >
                  <img
                    class="nav-icon w-full h-full"
                    src={await localizeCMSImage(
                      localizationIcon?.data?.attributes.url,
                    )}
                    alt={localizationIcon?.data?.attributes.alternativeText}
                  />
                </button>

                <div
                  id="localization-menu"
                  class:list={[
                    "hidden fixed sm:absolute z-[99] top-0 sm:top-auto",
                    "left-0 sm:left-1/2 sm:-translate-x-1/2 px-[min(100px,5vw)] py-[25px] sm:p-0",
                    "w-screen sm:w-[280px] h-screen sm:h-full bg-secondary sm:bg-transparent drop-shadow-lg",
                  ]}
                >
                  <div class="relative hidden sm:flex justify-center pt-1">
                    <div class="w-5 h-5 bg-white rotate-45 rounded" />
                  </div>

                  <div
                    class:list={[
                      "grid gap-[25px] sm:gap-[15px] sm:p-[25px]",
                      "sm:bg-white sm:rounded-[10px] sm:-translate-y-3",
                    ]}
                  >
                    <div class="flex sm:hidden justify-end">
                      <button
                        type="button"
                        id="localization-menu-close-btn"
                        class="select-none cursor-pointer"
                      >
                        <svg
                          viewBox="0 0 19.2 19.2"
                          xmlns="http://www.w3.org/2000/svg"
                          class="w-[35px] h-[35px] p-[5px]"
                        >
                          <path
                            d="M.5.5A1.6,1.6,0,0,1,1.6,0,1.6,1.6,0,0,1,2.7.5L9.6,7.4,16.5.5A1,1,0,0,1,17,.1h1.2l.6.4.3.5a1.3,1.3,0,0,1,.1.6,1.3,1.3,0,0,1-.1.6l-.4.6L11.9,9.6l6.8,6.9a1.6,1.6,0,0,1-1.1,2.7,2.1,2.1,0,0,1-1.1-.4L9.6,11.9,2.7,18.8a2.1,2.1,0,0,1-1.1.4,1.6,1.6,0,0,1-1.1-.5,1.5,1.5,0,0,1,0-2.2L7.3,9.6.5,2.8A1.8,1.8,0,0,1,0,1.6,1.6,1.6,0,0,1,.5.5Z"
                            style="fill: #474747; fill-rule: evenodd"
                          />
                        </svg>
                      </button>
                    </div>

                    <div class="grid gap-1.5 text-black-light">
                      <div class="text-[15px] font-medium text-black">
                        {text_language}
                      </div>

                      {languageSelectorVisibility &&
                        (availableLocales?.length > 1 ? (
                          <LangSelectorsDropdown
                            docLocale={docLocale}
                            availableLocales={availableLocales}
                          />
                        ) : (
                          <p>
                            <i>{recurData.text_lang_selector_unavailable}</i>
                          </p>
                        ))}
                    </div>

                    <div class="grid gap-1.5 text-black-light">
                      <div class="text-[15px] font-medium text-black">
                        {text_region}
                      </div>

                      {regionSelectorVisibility && (
                        <RegionSelectorsDropdown docLocale={docLocale} />
                      )}
                    </div>

                    {/* <button
                      type="submit"
                      class="py-2.5 px-4 bg-primary text-white leading-[120%] rounded-full"
                    >
                      {Button_save_text}
                    </button> */}
                  </div>
                </div>
              </div>
            )
          }

          {
            cartVisibility && !isCartNavbar && (
              <button
                aria-label={ariaLabelRecurData.Navbar_open_cart_text}
                id="open-cart-btn"
                class="inline-block relative"
              >
                <span
                  style="clip-path: url(#cart-btn-curve);"
                  class="nav-icon block bg-white rounded-full"
                >
                  <img
                    class="w-full h-full"
                    src={await localizeCMSImage(cartIcon?.data?.attributes.url)}
                    alt={cartIcon?.data?.attributes.alternativeText}
                  />
                </span>

                <span
                  class:list={[
                    "absolute -top-[3px] -right-[3px]",
                    "flex justify-center items-center rounded-full",
                  ]}
                >
                  <span
                    class:list={[
                      "nav-cart-num flex justify-center items-center",
                      "text-[10px] lg:text-xs text-white rounded-full bg-error",
                    ]}
                  >
                    <span id="cart-size">
                      <DynamicHTML
                        htmlFn={() => Object.keys(window.cart).length}
                      />
                    </span>
                  </span>
                </span>
              </button>
            )
          }

          {
            profileVisibility && (
              <ProfileMenu
                profileIcon={profileIcon}
                profileMenu={profile_menu}
                loginLink={loginLink}
              />
            )
          }

          <div class="block md:hidden w-[35px] h-[35px]">
            <button
              id="sidebar-open-btn"
              aria-label={ariaLabelRecurData.Navbar_open_sidebar_menu_text}
              class="block w-full h-full select-none cursor-pointer"
            >
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 34 31">
                <path
                  transform="translate(0)"
                  style="fill: #fff; fill-rule: evenodd"
                  d="M0,28.4a2.7,2.7,0,0,0,.7,1.8,2.5,2.5,0,0,0,1.7.8H31.2a2.5,2.5,0,0,0,1.7-.8,2.7,2.7,0,0,0,.7-1.8,2.9,2.9,0,0,0-.7-1.8,2.5,2.5,0,0,0-1.7-.8H2.4a2.5,2.5,0,0,0-1.7.8A2.9,2.9,0,0,0,0,28.4ZM9.9,15.5a2.9,2.9,0,0,0,.7,1.8,2.5,2.5,0,0,0,1.7.8H31.6a2.1,2.1,0,0,0,1.7-.8,2.4,2.4,0,0,0,.7-1.8,2.4,2.4,0,0,0-.7-1.8,2.1,2.1,0,0,0-1.7-.8H12.3a2.5,2.5,0,0,0-1.7.8A2.9,2.9,0,0,0,9.9,15.5ZM0,2.6A2.9,2.9,0,0,0,.7,4.4a2.5,2.5,0,0,0,1.7.8H31.2a2.5,2.5,0,0,0,1.7-.8,2.9,2.9,0,0,0,.7-1.8A2.7,2.7,0,0,0,32.9.8,2.5,2.5,0,0,0,31.2,0H2.4A2.5,2.5,0,0,0,.7.8,2.7,2.7,0,0,0,0,2.6Z"
                ></path>
              </svg>
            </button>

            <button
              id="sidebar-close-btn"
              aria-label={ariaLabelRecurData.Navbar_close_sidebar_menu_text}
              class="hidden w-full h-full select-none cursor-pointer"
            >
              <svg viewBox="0 0 19.2 19.2" xmlns="http://www.w3.org/2000/svg">
                <path
                  d="M.5.5A1.6,1.6,0,0,1,1.6,0,1.6,1.6,0,0,1,2.7.5L9.6,7.4,16.5.5A1,1,0,0,1,17,.1h1.2l.6.4.3.5a1.3,1.3,0,0,1,.1.6,1.3,1.3,0,0,1-.1.6l-.4.6L11.9,9.6l6.8,6.9a1.6,1.6,0,0,1-1.1,2.7,2.1,2.1,0,0,1-1.1-.4L9.6,11.9,2.7,18.8a2.1,2.1,0,0,1-1.1.4,1.6,1.6,0,0,1-1.1-.5,1.5,1.5,0,0,1,0-2.2L7.3,9.6.5,2.8A1.8,1.8,0,0,1,0,1.6,1.6,1.6,0,0,1,.5.5Z"
                  style="fill: #fff; fill-rule: evenodd"></path>
              </svg>
            </button>
          </div>
        </div>
      </div>
    </div>

    <div
      id="sidebar"
      class:list={[
        "hidden md:!hidden drop-shadow-[-280px_0_200px_rgba(0,0,0,0.5)]",
        "fixed right-0 w-[300px] max-w-full h-full bg-primary-lighter z-[48]",
      ]}
    >
      {
        sidebar_background && (
          <Picture
            alt=""
            sizes="300px"
            layout="fill"
            preload="avif"
            loading="lazy"
            src={sidebar_background.src}
            objectPosition="right bottom"
            breakpoints={{ minWidth: 300 }}
            attributes={{
              container: { style: "height: 100%;" },
              link: { media: "(max-width: 767.98px)" },
              picture: {
                style: "position: absolute; bottom: 0; right: 0;",
              },
            }}
          />
        )
      }

      <div
        class="wrapper section-in-v-pad-sm division-gap grid content-between h-full z-10"
      >
        <nav class="division-gap flex flex-col text-white overflow-y-auto">
          {
            menu.map(({ Visibility, Title, Link, Sub_menu }, index) => {
              const currentPageUrl = trimLink(page?.Meta?.URL_slug),
                isActive =
                  currentPageUrl === trimLink(Link) ||
                  Sub_menu.map(({ Link }) => trimLink(Link)).includes(
                    currentPageUrl,
                  );

              const hasSubMenu = Sub_menu.length > 0;

              return (
                Visibility && (
                  <div class="division-gap flex flex-col">
                    {hasSubMenu && (
                      <input
                        type="checkbox"
                        id={"open-sub-menu-" + index}
                        class="open-sub-menu-checkbox hidden"
                        checked={isActive}
                      />
                    )}

                    <div class="relative text-white flex items-center justify-between gap-2.5">
                      <a
                        href={Link}
                        class:list={[
                          "menu-title",
                          isActive ? "font-bold" : "font-semibold",
                        ]}
                      >
                        {Title}
                      </a>

                      {hasSubMenu && (
                        <label
                          for={"open-sub-menu-" + index}
                          aria-label={
                            ariaLabelRecurData.Navbar_open_sidebar_sub_menu_text
                          }
                          class="block md:hidden w-[29px] h-[29px] p-1 my-auto select-none cursor-pointer"
                        >
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="open-sub-menu-icon pointer-events-none w-full h-full"
                            viewBox="0 0 19.9 20"
                          >
                            <path
                              d="m1.5,10h16.9m-8.5,8.5V1.5"
                              style="fill: none; stroke: #fff; stroke-linecap: round; stroke-linejoin: round; stroke-width: 3px;"
                            />
                          </svg>

                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="close-sub-menu-icon pointer-events-none w-full h-full"
                            viewBox="0 0 19.9 3"
                          >
                            <line
                              x1="1.5"
                              y1="1.5"
                              x2="18.4"
                              y2="1.5"
                              style="fill: none; stroke: #fff; stroke-linecap: round; stroke-linejoin: round; stroke-width: 3px;"
                            />
                          </svg>
                        </label>
                      )}
                    </div>

                    {hasSubMenu && (
                      <div class="sub-menu gap-[5px]">
                        {Sub_menu.map(
                          ({ Visibility, Title, Link }) =>
                            Visibility && (
                              <a href={Link} class="sub-menu-title">
                                {Title}
                              </a>
                            ),
                        )}
                      </div>
                    )}

                    {index < visibleMenuItems.length && (
                      <div class="w-full h-px bg-white" />
                    )}
                  </div>
                )
              );
            })
          }
        </nav>

        <div class="text-b7 z-10" set:html={footerText} />
      </div>
    </div>

    {
      searchVisibility && (
        <div class="block sm:hidden wrapper relative z-[49] py-[15px] bg-primary">
          <div class="relative">
            <input type="search" placeholder="Search" class="search-input" />

            <span class="search-icon">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 37 37">
                <path
                  d="M0,18.5C0,8.28,8.28,0,18.5,0h0c10.22,0,18.5,8.28,18.5,18.5h0c0,10.22-8.28,18.5-18.5,18.5h0C8.28,37,0,28.72,0,18.5h0Z"
                  fill="#1e4848"
                />
                <path
                  d="M22.54,23.88c-1.37,1.08-3.1,1.73-4.99,1.73-4.45,0-8.05-3.61-8.05-8.05s3.61-8.05,8.05-8.05,8.05,3.61,8.05,8.05c0,1.88-.65,3.61-1.73,4.99l3.34,3.34c.37.37.37.97,0,1.34-.37.37-.97.37-1.34,0l-3.34-3.34ZM23.71,17.55c0,3.4-2.76,6.16-6.16,6.16s-6.16-2.76-6.16-6.16,2.76-6.16,6.16-6.16,6.16,2.76,6.16,6.16Z"
                  fill="#fff"
                  fill-rule="evenodd"
                />
              </svg>
            </span>
          </div>
        </div>
      )
    }

    <div
      id="search-results-container"
      class="hidden absolute rounded-xl bg-white overflow-hidden"
    >
      <div id="search-results" class="grid sm:grid-cols-2 gap-x-2.5 gap-y-5">
      </div>

      <div
        id="no-search-results"
        class="hidden text-lg font-semibold text-error"
      >
        {search_text_no_result_found}
      </div>
    </div>
  </div>

  <div class="hidden md:block w-full relative z-10">
    <div class="nav-menu-flex nav-menu-padding-right wrapper">
      {
        menu.map(({ Visibility, Title, Link, Sub_menu }) => {
          const currentPageUrl = trimLink(page?.Meta?.URL_slug),
            isActive =
              currentPageUrl === trimLink(Link) ||
              Sub_menu.map(({ Link }) => trimLink(Link)).includes(
                currentPageUrl,
              );

          const hasSubMenu = Sub_menu?.length > 0;

          return (
            Visibility && (
              <div class="nav-menu-container group">
                <div class="relative text-white flex items-center gap-[5px] z-40">
                  <a
                    href={Link}
                    class:list={[
                      "nav-menu-title",
                      isActive ? "font-bold" : "font-semibold",
                    ]}
                  >
                    {Title}
                  </a>

                  {hasSubMenu && <Icon name="ep:arrow-down-bold" class="w-3" />}

                  {isActive && (
                    <div class="absolute bottom-3.5 w-full h-0.5 bg-white rounded" />
                  )}
                </div>

                {hasSubMenu && (
                  <div
                    class:list={[
                      "nav-sub-menu absolute left-0 w-full",
                      isActive ? "block" : "hidden group-hover:block",
                    ]}
                  >
                    <div class="nav-sub-menu-content absolute top-0 left-0 w-full">
                      <div class="nav-menu-flex nav-menu-padding-right wrapper">
                        {Sub_menu.map(
                          ({ Visibility, Title, Link }) =>
                            Visibility && (
                              <div
                                class:list={[
                                  "nav-sub-menu-title",
                                  currentPageUrl === trimLink(Link) &&
                                    "underline decoration-2 underline-offset-4",
                                ]}
                              >
                                <a href={Link}>{Title}</a>
                              </div>
                            ),
                        )}
                      </div>
                    </div>
                  </div>
                )}
              </div>
            )
          );
        })
      }
    </div>
  </div>

  <script is:inline>
    {
      const id = document.getElementById.bind(document);

      const navigation = id("navigation"),
        topNotifications = document.querySelector(".top-notifications");

      const updateNavbarStyles = () => {
        // fix sticky navbar position on mobile if top notification is shown
        navigation.style.top = `${
          window.innerWidth >= 768
            ? 0
            : topNotifications.getBoundingClientRect().height
        }px`;
      };

      window.addEventListener("scroll", updateNavbarStyles);
      window.addEventListener("resize", updateNavbarStyles);
    }
  </script>
</header>

<script>
  const queryAll = document.querySelectorAll.bind(document);

  const navSubMenuBlocks = queryAll(".nav-sub-menu.block"),
    navSubMenuContents = queryAll(".nav-sub-menu-content"),
    navMenuContainers = queryAll(".nav-menu-container"),
    headerNavShadow = document.querySelector<HTMLDivElement>(
      ".hero-sub-menu-shadow",
    );

  const updateNavSubMenuClasses = () => {
    const shouldHide = window.scrollY > 0;

    navSubMenuBlocks?.forEach((navSubMenu) => {
      navSubMenu.classList.toggle("hidden", shouldHide);
      navSubMenu.classList.toggle("group-hover:block", shouldHide);
    });

    navSubMenuContents?.forEach((navSubMenu) => {
      navSubMenu.classList.toggle("nav-bg", shouldHide);
    });
  };

  const handleNavMenuEvents = (container) => {
    container.addEventListener("mouseenter", () => {
      headerNavShadow.style.display = container.querySelector(".nav-sub-menu")
        ? "block"
        : "none";
    });

    container.addEventListener("mouseleave", () => {
      headerNavShadow.style.display = "none";
    });
  };

  navMenuContainers?.forEach(handleNavMenuEvents);

  updateNavSubMenuClasses();

  window.addEventListener("scroll", () => {
    document.body.style.position !== "fixed" && updateNavSubMenuClasses();
  });
</script>

<script>
  const id = document.getElementById.bind(document);

  const cart = id("cart"),
    sidebar = id("sidebar"),
    navigation = id("navigation"),
    stickyChapters = id("sticky-chapters"),
    openCartBtn = id("open-cart-btn"),
    sidebarOpenButton = id("sidebar-open-btn"),
    sidebarCloseButton = id("sidebar-close-btn"),
    localizationMenu = id("localization-menu"),
    navTopContentContainer = id("nav-top-content-container"),
    localizationMenuContainer = localizationMenu?.parentElement,
    localizationMenuOpenButton = id("localization-menu-open-btn"),
    localizationMenuCloseButton = id("localization-menu-close-btn");

  const SelectorsDropdownItems = document.querySelectorAll<HTMLUListElement>(
    ".selectors-dropdown > div > .selectors-dropdown-item",
  );

  let scrollYPosition = 0,
    scrollingDisabled = false;

  window.disableScrolling = () => {
    if (scrollingDisabled) return;

    scrollYPosition = window.scrollY;

    const overflowY =
      window.innerHeight < document.body.scrollHeight ? "scroll" : "auto";

    Object.assign(document.body.style, {
      overflowY,
      width: "100%",
      position: "fixed",
      top: `-${scrollYPosition}px`,
    });

    scrollingDisabled = true;
  };

  window.enableScrolling = () => {
    if (!scrollingDisabled) return;

    Object.assign(document.body.style, {
      width: "auto",
      overflowY: "auto",
      position: "static",
      top: "0",
    });

    window.scrollTo({ top: scrollYPosition });

    scrollingDisabled = false;
  };

  const updateSidebarTopPosition = () => {
    const isStickyChaptersVisible =
      stickyChapters && !stickyChapters.classList.contains("invisible");

    const sidebarTop =
      (isStickyChaptersVisible
        ? stickyChapters
        : navigation
      ).getBoundingClientRect().bottom -
      // reduce top by 10px to hide the transparent gap caused by the curve
      (!isStickyChaptersVisible && window.innerWidth >= 640 ? 10 : 0);

    sidebar.style.top = `${sidebarTop}px`;
    sidebar.style.paddingBottom = `${sidebarTop}px`;
  };

  window.sidebarOpened = false;
  window.localizationMenuOpened = false;

  window.addEventListener("resize", () => {
    if (window.innerWidth > 768) {
      // enable scrolling if cart is not open
      if (cart?.classList.contains("hidden")) window.enableScrolling();

      // remove event listener to prevent memory leaks
      window.removeEventListener("resize", updateSidebarTopPosition);
    } else if (window.sidebarOpened) {
      window.disableScrolling();

      // re-add event listener in case it was removed
      window.addEventListener("resize", updateSidebarTopPosition);
    } else if (window.profileMenuOpened || window.localizationMenuOpened) {
      if (window.innerWidth < 640) {
        window.disableScrolling();
      } else {
        window.enableScrolling();
      }
    }
  });

  window.toggleSidebar = () => {
    window.sidebarOpened = !window.sidebarOpened;

    sidebar.style.display = window.sidebarOpened ? "block" : "none";
    sidebarOpenButton.style.display = window.sidebarOpened ? "none" : "block";
    sidebarCloseButton.style.display = window.sidebarOpened ? "block" : "none";

    if (window.sidebarOpened) {
      window.disableScrolling();

      updateSidebarTopPosition();

      window.addEventListener("resize", updateSidebarTopPosition);
    } else {
      window.enableScrolling();

      window.removeEventListener("resize", updateSidebarTopPosition);
    }
  };

  openCartBtn?.addEventListener("click", () => {
    window.openCart();
  });

  sidebarOpenButton?.addEventListener("click", window.toggleSidebar);

  sidebarCloseButton?.addEventListener("click", window.toggleSidebar);

  localizationMenuContainer?.addEventListener("mouseenter", () => {
    if (!window.profileMenuOpened && window.innerWidth >= 640) {
      localizationMenu.classList.remove("hidden");
    }
  });

  localizationMenuCloseButton?.addEventListener("click", () => {
    localizationMenu.classList.add("hidden");

    window.localizationMenuOpened = false;

    window.enableScrolling();

    navTopContentContainer.style.clipPath = "url(#nav-curve)";
  });

  const hideLocalizationMenu = () => {
    if (!window.localizationMenuOpened && window.innerWidth >= 640) {
      localizationMenu.classList.add("hidden");
    }
  };

  localizationMenuContainer?.addEventListener(
    "mouseleave",
    hideLocalizationMenu,
  );

  document.addEventListener("click", (event) => {
    const target = event.target as HTMLElement;

    if (localizationMenuOpenButton?.contains(target)) {
      window.localizationMenuOpened = !window.localizationMenuOpened;

      localizationMenu.classList[
        window.localizationMenuOpened ? "remove" : "add"
      ]("hidden");

      if (window.innerWidth < 640) {
        window.sidebarOpened && window.toggleSidebar();

        window.disableScrolling();
      }

      navTopContentContainer.style.clipPath =
        window.localizationMenuOpened && "none";
    } else if (localizationMenu && !localizationMenu.contains(target)) {
      window.localizationMenuOpened && window.enableScrolling();

      window.localizationMenuOpened = false;

      hideLocalizationMenu();
    }
  });

  SelectorsDropdownItems.forEach((li) => {
    li.addEventListener("click", () => {
      const selector = li.parentElement.parentElement;

      const { value } = li.dataset,
        { selectorType } = selector.dataset;

      switch (selectorType) {
        case "lang":
          location.pathname = window.alternateURLs[value];
          break;

        case "region":
          localStorage.setItem("region", value);

          window.cookies.country = value;

          location.reload();
          break;
      }
    });
  });
</script>

<script>
  window.addEventListener("load", async () => {
    const searchIndex = await fetch(
      `/search-index/${window.preferredLocale}.json`,
    ).then((response) => response.json());

    const id = document.getElementById.bind(document),
      searchResults = id("search-results"),
      noSearchResult = id("no-search-results"),
      searchResultsContainer = id("search-results-container"),
      searchInputs =
        document.querySelectorAll<HTMLInputElement>(".search-input");

    searchInputs.forEach((input) => {
      input.addEventListener("input", () => {
        const searchTerm = input.value.toLowerCase().trim(),
          matches = searchIndex.filter((item) =>
            item.Title.toLowerCase().includes(searchTerm),
          );

        searchResults.innerHTML = "";

        if (searchTerm === "") {
          noSearchResult.style.display = "none";
          searchResultsContainer.style.display = "none";

          return;
        }

        const maxItems = window.innerWidth < 640 ? 4 : 10,
          resultsCount = Math.min(maxItems, matches?.length);

        for (let i = 0; i < resultsCount; i++) {
          const match = matches[i],
            resultLinkBlock = document.createElement("a");

          resultLinkBlock.setAttribute(
            "href",
            `/${window.preferredLocale}/${match.URL_slug}/`,
          );

          resultLinkBlock.innerHTML = `<div
            class="flex w-auto gap-2.5 h-auto"
          >
            <div class="flex-none h-full">
              <div class="w-[50px] h-[50px] rounded overflow-hidden">
                <img
                  class="w-full h-full object-cover"
                  src=${match.Intro_blob.url}
                  alt=${match.Intro_blob.alt}
                />
              </div>
            </div>

            <div class="grow text-black overflow-hidden">
              <h3 class="sm:text-lg font-medium text-primary line-clamp-2">
                ${match.Title}
              </h3>

              <div class="text-sm line-clamp-1 w-auto">${match.Intro_text}</div>
            </div>
          </div>`;

          searchResults.appendChild(resultLinkBlock);
        }

        noSearchResult.style.display = matches?.length === 0 ? "block" : "none";

        searchResultsContainer.style.display =
          searchTerm?.length > 0 ? "grid" : "none";
      });
    });
  });
</script>
