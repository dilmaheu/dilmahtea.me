---
import Brand from "@images/logo.svg";
import LangButton from "./LangButton.astro";
import getLocalesData from "../utils/getLocalesData";
import shouldDisplayExperimentals from "src/utils/shouldDisplayExperimentals";

interface Props {
  docLocale: string;
  footerText: string;
  availableLocales: string[];
}

const { docLocale, footerText, availableLocales } = Astro.props as Props;

const { locales, languages, localeNamesData } = getLocalesData();

const availableLanguages = [];

locales.forEach((locale, index) => {
  if (locale !== docLocale && [...availableLocales].includes(locale)) {
    availableLanguages.push(languages[index]);
  }
});

const docLang = languages[locales.indexOf(docLocale)],
  localDocLang = localeNamesData[docLang][docLang];
---

<div id="navigation">
  <nav class="wrapper mx-auto z-50 relative top-0">
    <div class="flex justify-between items-center paddingTop navbar">
      <div class="my-auto">
        <a href="/">
          <div class="brandLogo">
            <img src={Brand} class="w-full h-full" alt="brand-logo" />
          </div>
        </a>
      </div>

      <div class="hidden sm:block mr-auto my-auto navMenu">
        <div class="flex mr-auto my-auto navMenuItem">
          <a class="navItem" href="/crowdfunding">Crowdfunding</a>
          <a class="navItem" href="/blog">Blog</a>
          {
            shouldDisplayExperimentals() && (
              <a class="navItem" href="/howto">
                How-to
              </a>
            )
          }
        </div>
      </div>

      <div class="flex items-center">
        <div class="flex items-center">
          {
            /* <div class="relative search">
              <div class="flex absolute right-0 items-center justify-center pointer-events-none searchIcnContainer">
                <svg
                  class="searchIcn"
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 25.8 25.8"
                >
                  <path
                    d="m24.8 24.8-5.7-5.7m3.2-7.5a10.7 10.7 0 0 1-3.2 7.5 10.7 10.7 0 0 1-7.5 3.2 10.7 10.7 0 0 1-7.5-3.2 10.6 10.6 0 0 1 15-15 10.7 10.7 0 0 1 3.2 7.5Z"
                    fill="none"
                    stroke="#d0d2d0"
                    stroke-linecap="round"
                    stroke-width="2"
                  />
                </svg>
              </div>

              <input
                type="text"
                id="search-navbar"
                class="block w-full bg-gray-5 focus:outline-none searchInput"
                placeholder="Search tea stories"
              />
            </div> */
          }

          <div
            id="dropdown"
            class="dropdown text-sm lg:text-base font-bold relative noselect"
          >
            <div
              id="langBtn"
              class="flex items-center justify-between gap-x-1.5 md:gap-x-3 font-bold focus:outline-none langBtn"
            >
              <div class="preferred-locale font-bold">{localDocLang}</div>

              <div class="w-3">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 11.6 6.7">
                  <path
                    class="cls-1"
                    d="M.3.3A.6.6,0,0,1,.9,0a.9.9,0,0,1,.6.3L5.8,4.6,10.2.3a.6.6,0,0,1,.6-.3l.6.3a.8.8,0,0,1,.2.6.7.7,0,0,1-.2.6l-5,4.9a.6.6,0,0,1-.6.3.9.9,0,0,1-.6-.3L.3,1.5A.9.9,0,0,1,0,.9.6.6,0,0,1,.3.3Z"
                    fill="#2B4B50"></path>
                </svg>
              </div>
            </div>
            <ul
              id="dropdownMenu"
              class="absolute rounded hidden overflow-hidden dropdown-menu"
            >
              {
                availableLanguages.map((language) => (
                  <LangButton
                    locales={locales}
                    docLang={docLang}
                    language={language}
                    languages={languages}
                    localeNamesData={localeNamesData}
                  />
                ))
              }
            </ul>
          </div>
        </div>

        <div class="block sm:hidden sidebarMenuBtn">
          <div id="sidebarOpen" class="block sm:hidden cursor-pointer">
            <svg
              class="w-full h-full"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 22.4 19.2"
              ><path
                d="M0 17.6a1.6 1.6 0 0 0 .5 1.1 1.6 1.6 0 0 0 1.1.5h19.2a1.6 1.6 0 0 0 0-3.2H1.6a1.6 1.6 0 0 0-1.1.5 1.6 1.6 0 0 0-.5 1.1Zm0-8a1.6 1.6 0 0 0 .5 1.1 1.6 1.6 0 0 0 1.1.5h9.6a1.6 1.6 0 0 0 0-3.2H1.6a1.6 1.6 0 0 0-1.1.5A1.6 1.6 0 0 0 0 9.6Zm0-8a1.6 1.6 0 0 0 .5 1.1 1.6 1.6 0 0 0 1.1.5h19.2a1.6 1.6 0 0 0 1.1-.5 1.6 1.6 0 0 0 .5-1.1 1.6 1.6 0 0 0-.5-1.1 1.6 1.6 0 0 0-1.1-.5H1.6A1.6 1.6 0 0 0 .5.5 1.6 1.6 0 0 0 0 1.6Z"
                fill="#e3dfde"
                fill-rule="evenodd"></path>
            </svg>
          </div>
          <div id="sidebarClose" class="cursor-pointer">
            <svg
              class="w-full h-full"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 19.2 19.2"
            >
              <path
                d="M.5.5A1.6,1.6,0,0,1,1.6,0,1.6,1.6,0,0,1,2.7.5L9.6,7.4,16.5.5A1,1,0,0,1,17,.1h1.2l.6.4.3.5a1.3,1.3,0,0,1,.1.6,1.3,1.3,0,0,1-.1.6l-.4.6L11.9,9.6l6.8,6.9a1.6,1.6,0,0,1-1.1,2.7,2.1,2.1,0,0,1-1.1-.4L9.6,11.9,2.7,18.8a2.1,2.1,0,0,1-1.1.4,1.6,1.6,0,0,1-1.1-.5,1.5,1.5,0,0,1,0-2.2L7.3,9.6.5,2.8A1.8,1.8,0,0,1,0,1.6,1.6,1.6,0,0,1,.5.5Z"
                style="fill:#e3dfde;fill-rule:evenodd"></path>
            </svg>
          </div>
        </div>
      </div>
    </div>
  </nav>

  <div id="sidebar">
    <div class="grid content-between h-full sidebarContainer">
      {
        /* <div class="relative search">
          <div class="flex absolute right-0 items-center justify-center pointer-events-none searchIcnContainer">
            <svg
              class="searchIcn"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 25.8 25.8"
            >
              <path
                d="m24.8 24.8-5.7-5.7m3.2-7.5a10.7 10.7 0 0 1-3.2 7.5 10.7 10.7 0 0 1-7.5 3.2 10.7 10.7 0 0 1-7.5-3.2 10.6 10.6 0 0 1 15-15 10.7 10.7 0 0 1 3.2 7.5Z"
                fill="none"
                stroke="#d0d2d0"
                stroke-linecap="round"
                stroke-width="2"
              />
            </svg>
          </div>

          <input
            type="text"
            id="search-navbar"
            class="block w-full bg-gray-5 focus:outline-none searchInput"
            placeholder="Search tea stories"
          />
        </div> */
      }

      <div class="flex navMenuItem">
        <ul>
          <li><a class="navItem" href="/crowdfunding">Crowdfunding</a></li>
          <li><a class="navItem" href="/blog">Blog</a></li>
          {
            shouldDisplayExperimentals() && (
              <li>
                <a class="navItem" href="/howto">
                  How-to
                </a>
              </li>
            )
          }
        </ul>
      </div>

      <div class="sidebarfooter" set:html={footerText}></div>
    </div>
  </div>
</div>
<div class="block sm:hidden py-11"></div>

<script
  is:inline
  define:vars={{
    locales,
    languages,
  }}
>
  const navigation = document.getElementById("navigation"),
    translationNotFoundNotification = document.querySelector(
      ".translation-not-found-notification"
    );

  window.onscroll = function () {
    const top = window.pageYOffset || document.documentElement.scrollTop,
      translationNotFoundNotificationHeight =
        translationNotFoundNotification.getBoundingClientRect().height;

    navigation.style.top = `${translationNotFoundNotificationHeight}px`;

    if (top > 0) {
      navigation.style.backgroundImage = "url(/bg-images/navBg.webp)";
    } else if (document.body.style.position !== "fixed") {
      navigation.style.background = "transparent";
    }
  };

  document.querySelectorAll(".preferred-locale").forEach((dropdown) => {
    const preferredLanguage =
      languages[
        locales.indexOf(
          preferredLocale /* preferredLocale is declared in the Redirect.astro component */
        )
      ];

    dropdown.textContent = preferredLanguage;
  });

  // document
  //   .querySelectorAll(
  //     `.lang-selector.${preferredLocale}, .lang-selector .${preferredLocale}`
  //   )
  //   .forEach((selector) => {
  //     selector.classList.toggle("hidden");
  //   });

  const activeLangSelectors = document.querySelectorAll(
      ".lang-selector:not(.hidden)"
    ),
    sortedLangSelectors = [...activeLangSelectors].sort(
      (nextSelector, currentSelector) =>
        nextSelector.innerText.localeCompare(currentSelector.innerText, "en")
    );

  sortedLangSelectors.forEach((langSelector, i) => {
    i !== sortedLangSelectors.length - 1 &&
      langSelector.after(sortedLangSelectors[i + 1]);
  });

  document.addEventListener("click", ({ target }) => {
    const dropdown = document.querySelector("#dropdown");
    (langButton = document.querySelector("#langBtn")),
      (dropdownMenu = document.querySelector("#dropdownMenu"));

    if (!dropdown.contains(target)) {
      if (dropdownMenu.style.display === "block") {
        langButton.click();
      }
    }
  });
</script>
