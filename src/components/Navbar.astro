---
import Icon from "astro-icon";
import { Picture, BackgroundPicture } from "astro-imagetools/components";

import RecurringImages from "@store/RecurringImages";
import ClipPathSVG from "@components/ClipPathSVG.astro";
import DynamicHTML from "@components/DynamicHTML.astro";
import LangSelectorsDropdown from "@components/LangSelectorsDropdown.astro";
import shouldDisplayExperimentals from "@utils/shouldDisplayExperimentals";

const {
  logo,
  nav_background,
  sidebar_background,
  checkout_header_background,
  checkout_header_background_sm,
} = RecurringImages;

interface Props {
  docLocale: string;
  footerText: string;
  isCartNavbar?: boolean;
  availableLocales: string[];
}

const { docLocale, footerText, isCartNavbar, availableLocales } =
  Astro.props as Props;
---

<style lang="scss">
  .brand-logo {
    height: clamp(38px, 5vw, 50px);
  }

  nav {
    gap: clamp(10px, 1.5vw, 20px);

    a {
      @apply text-[32px] md:text-[clamp(0.875rem,1.5vw+0.1rem,1.125rem)] font-semibold md:font-bold leading-[150%];
    }
  }
</style>

<header
  id="navigation"
  class:list={[
    isCartNavbar && "cart-navbar",
    "md:!relative sticky !top-0 z-[999] w-full bg-cover bg-right-bottom",
  ]}
>
  {
    !isCartNavbar ? (
      <Fragment>
        <Picture
          alt=""
          layout="fill"
          src={nav_background.src}
          attributes={{
            picture: {
              id: "navbar-bg",
              style: "display: none; position: absolute;",
            },
          }}
        />
      </Fragment>
    ) : (
      <Fragment>
        <ClipPathSVG
          id="cart-navbar-curve"
          path="M0,0 L0,0.936 C0,0.936,0.009,1,0.107,1 C0.152,1,0.198,0.992,0.247,0.983 C0.305,0.973,0.368,0.961,0.441,0.961 C0.511,0.961,0.573,0.971,0.634,0.981 C0.692,0.991,0.749,1,0.81,1 C0.934,1,1,0.878,1,0.878 V0 H0"
        />

        <Picture
          alt=""
          layout="fill"
          breakpoints={{ maxWidth: 640 }}
          src={checkout_header_background_sm.src}
          artDirectives={[
            {
              media: "(min-width: 640px)",
              breakpoints: { minWidth: 640 },
              src: checkout_header_background.src,
            },
          ]}
          attributes={{
            picture: {
              id: "cart-navbar-bg",
              style: "position: absolute; clip-path: url(#cart-navbar-curve);",
            },
          }}
        />
      </Fragment>
    )
  }

  <div
    class:list={[
      "flex justify-between items-center",
      "navbar wrapper relative top-0 z-50 mx-auto py-[clamp(20px,3vw,56px)]",
    ]}
  >
    <a href="/" class="brand-logo my-auto">
      <img class="w-full h-full" {...logo} />
    </a>

    <nav class="hidden md:flex m-auto ml-14 text-white">
      <a href="/blog">Blog</a>
      <a href="/tea-estates">Tea Estates</a>
      <a href="/howto">How-to</a>
      <a href="/recipes">Recipe</a>

      {shouldDisplayExperimentals() && <a href="/tea">Tea</a>}
    </nav>

    <div class="flex gap-4 items-center">
      <div class="flex items-center">
        <LangSelectorsDropdown
          docLocale={docLocale}
          availableLocales={availableLocales}
        />
      </div>

      {
        !isCartNavbar && (
          <button
            id="open-cart-btn"
            aria-label="Open Cart"
            class:list={[
              "relative scale-[0.775] sm:scale-[0.85] md:scale-[0.925] lg:scale-[1]",
              "mx-[calc(-24px*0.225)] sm:mx-[calc(-24px*0.15)] md:mx-[calc(-24px*0.075)] lg:mx-0",
            ]}
          >
            <ClipPathSVG
              id="cart-btn-curve"
              path="M0.5,0 A0.5,0.5,0,0,0,0,0.5 a0.5,0.5,0,0,0,0.5,0.5 a0.5,0.5,0,0,0,0.5,-0.5 a0.5,0.5,0,0,0,-0.021,-0.146 a0.25,0.25,0,0,1,-0.104,0.021 A0.25,0.25,0,0,1,0.625,0.125 a0.25,0.25,0,0,1,0.021,-0.104 a0.5,0.5,0,0,0,-0.146,-0.021"
            />

            <span
              style="clip-path: url(#cart-btn-curve);"
              class="w-12 h-12 text-primary flex justify-center items-center bg-lightgray rounded-full"
            >
              <Icon name="mi:shopping-cart" class="w-[30px] h-[30px] mx-auto" />
            </span>

            <span
              class:list={[
                "w-6 h-6 absolute -top-1.5 -right-1.5",
                "flex justify-center items-center rounded-full",
              ]}
            >
              <span class="w-5 h-5 text-white flex justify-center items-center rounded-full bg-red-600">
                <span id="cart-size">
                  <DynamicHTML htmlFn={() => Object.keys(window.cart).length} />
                </span>
              </span>
            </span>
          </button>
        )
      }

      <div class="block md:hidden w-[38px] h-[38px]">
        <button
          id="sidebar-open-btn"
          aria-label="Open Sidebar Menu"
          class="block w-full h-full select-none cursor-pointer"
        >
          <svg viewBox="0 0 22.4 19.2" xmlns="http://www.w3.org/2000/svg">
            <path
              d="M0 17.6a1.6 1.6 0 0 0 .5 1.1 1.6 1.6 0 0 0 1.1.5h19.2a1.6 1.6 0 0 0 0-3.2H1.6a1.6 1.6 0 0 0-1.1.5 1.6 1.6 0 0 0-.5 1.1Zm0-8a1.6 1.6 0 0 0 .5 1.1 1.6 1.6 0 0 0 1.1.5h9.6a1.6 1.6 0 0 0 0-3.2H1.6a1.6 1.6 0 0 0-1.1.5A1.6 1.6 0 0 0 0 9.6Zm0-8a1.6 1.6 0 0 0 .5 1.1 1.6 1.6 0 0 0 1.1.5h19.2a1.6 1.6 0 0 0 1.1-.5 1.6 1.6 0 0 0 .5-1.1 1.6 1.6 0 0 0-.5-1.1 1.6 1.6 0 0 0-1.1-.5H1.6A1.6 1.6 0 0 0 .5.5 1.6 1.6 0 0 0 0 1.6Z"
              style="fill: #e3dfde; fill-rule: evenodd"></path>
          </svg>
        </button>

        <button
          id="sidebar-close-btn"
          aria-label="Close Sidebar Menu"
          class="hidden w-full h-full select-none cursor-pointer"
        >
          <svg viewBox="0 0 19.2 19.2" xmlns="http://www.w3.org/2000/svg">
            <path
              d="M.5.5A1.6,1.6,0,0,1,1.6,0,1.6,1.6,0,0,1,2.7.5L9.6,7.4,16.5.5A1,1,0,0,1,17,.1h1.2l.6.4.3.5a1.3,1.3,0,0,1,.1.6,1.3,1.3,0,0,1-.1.6l-.4.6L11.9,9.6l6.8,6.9a1.6,1.6,0,0,1-1.1,2.7,2.1,2.1,0,0,1-1.1-.4L9.6,11.9,2.7,18.8a2.1,2.1,0,0,1-1.1.4,1.6,1.6,0,0,1-1.1-.5,1.5,1.5,0,0,1,0-2.2L7.3,9.6.5,2.8A1.8,1.8,0,0,1,0,1.6,1.6,1.6,0,0,1,.5.5Z"
              style="fill: #e3dfde; fill-rule: evenodd"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>

  <div
    id="sidebar"
    class="hidden md:!hidden fixed right-0 z-[40] w-[300px] max-w-full h-full pb-20"
  >
    <BackgroundPicture
      layout="fill"
      src={sidebar_background.src}
      objectPosition="right bottom"
      attributes={{
        container: {
          style: "height: 100%;",
        },
      }}
    >
      <div class="grid content-between h-full px-[30px] pt-[26px] pb-9">
        <nav class="flex flex-col text-white z-10">
          <a href="/blog">Blog</a>
          <a href="/tea-estates">Tea Estates</a>
          <a href="/howto">How-to</a>
          <a href="/recipes">Recipe</a>

          {shouldDisplayExperimentals() && <a href="/tea">Tea</a>}
        </nav>

        <div
          class="text-xs font-normal leading-[150%] z-10"
          set:html={footerText}
        />
      </div>
    </BackgroundPicture>
  </div>
</header>

<script>
  declare global {
    interface Window {
      cart: Record<string, Record<string, string | number>>;
    }
  }
</script>

<script is:inline>
  {
    const navbarBg = document.getElementById("navbar-bg"),
      navigation = document.getElementById("navigation"),
      isCartNavbar = navigation.classList.contains("cart-navbar"),
      translationNotFoundNotification = document.querySelector(
        ".translation-not-found-notification"
      );

    const updateNavbarStyles = () => {
      const translationNotFoundNotificationHeight =
        translationNotFoundNotification.getBoundingClientRect().height;

      // fix sticky navbar position if top notification is shown
      navigation.style.top = `${translationNotFoundNotificationHeight}px`;

      if (!isCartNavbar) {
        navbarBg.style.display =
          window.innerWidth < 768 &&
          (scrollY > 0 || document.body.style.position === "fixed")
            ? "inline-block"
            : "none";
      }
    };

    window.addEventListener("scroll", updateNavbarStyles);
    window.addEventListener("resize", updateNavbarStyles);
  }
</script>

<script>
  declare global {
    interface Window {
      openCart: () => void;
      // disableScrolling & enableScrolling are declared globally to use in cart toggling logic
      enableScrolling: () => void;
      disableScrolling: () => void;
    }
  }

  const query = document.querySelector.bind(document),
    rootElement = query(":root"),
    cart = query("#cart"),
    sidebar = query("#sidebar"),
    navbarBg = query("#navbar-bg"),
    navigation = query("#navigation"),
    openCartBtn = query("#open-cart-btn"),
    cartNavbarBg = query("#cart-navbar-bg"),
    sidebarOpenButton = query("#sidebar-open-btn"),
    sidebarCloseButton = query("#sidebar-close-btn"),
    isCartNavbar = !!navigation?.classList.contains("cart-navbar");

  window.disableScrolling = () => {
    const overflowY =
      visualViewport.height < document.body.offsetHeight ? "scroll" : "auto";

    Object.assign(document.body.style, {
      overflowY,
      width: "100%",
      position: "fixed",
      top: `-${window.scrollY}px`,
    });
  };

  window.enableScrolling = () => {
    const scrollYPosition =
      parseInt(document.body.style.top.slice(1, -2)) || window.scrollY;

    Object.assign(document.body.style, {
      width: "auto",
      overflowY: "auto",
      position: "static",
    });

    try {
      window.scrollTo({
        top: scrollYPosition,
        // @ts-ignore
        behavior: "instant",
      });
    } catch (error) {
      const currentRootScrollBehavior = rootElement.style.scrollBehavior;

      rootElement.style.scrollBehavior = "auto";

      window.scrollTo({
        top: scrollYPosition,
        behavior: "auto",
      });

      rootElement.style.scrollBehavior = currentRootScrollBehavior;
    }
  };

  const updateSidebarTopPosition = () => {
    if (navigation) {
      sidebar.style.top = `${navigation.getBoundingClientRect().bottom}px`;
    }
  };

  window.addEventListener("resize", updateSidebarTopPosition);

  window.addEventListener("resize", () => {
    if (window.innerWidth > 767) {
      // enable scrolling only if cart and checkout is not open
      if (cart?.classList.contains("hidden")) window.enableScrolling();

      window.removeEventListener("resize", updateSidebarTopPosition);

      navbarBg && (navbarBg.style.display = "none");
      cartNavbarBg && (cartNavbarBg.style.clipPath = "url(#cart-navbar-curve)");
    } else if (sidebar.style.display === "block") {
      // @ts-ignore
      window.disableScrolling();

      window.addEventListener("resize", updateSidebarTopPosition);

      navbarBg && (navbarBg.style.display = "inline-block");
      cartNavbarBg && (cartNavbarBg.style.clipPath = "none");
    }
  });

  openCartBtn?.addEventListener("click", () => {
    window.openCart();
  });

  sidebarOpenButton?.addEventListener("click", () => {
    window.removeEventListener("resize", updateSidebarTopPosition);

    updateSidebarTopPosition();

    sidebar.style.display = "block";
    sidebarOpenButton.style.display = "none";
    sidebarCloseButton.style.display = "block";

    if (isCartNavbar) {
      cartNavbarBg.style.clipPath = "none";
    } else {
      navbarBg.style.display = "inline-block";
    }

    window.disableScrolling();

    window.addEventListener("resize", updateSidebarTopPosition);
  });

  sidebarCloseButton?.addEventListener("click", () => {
    sidebar.style.display = "none";
    sidebarOpenButton.style.display = "block";
    sidebarCloseButton.style.display = "none";

    if (isCartNavbar) {
      cartNavbarBg.style.clipPath = "url(#cart-navbar-curve)";
    } else {
      navbarBg.style.display = "none";
    }

    window.enableScrolling();
  });
</script>
