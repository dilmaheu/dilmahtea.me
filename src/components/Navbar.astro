---
import Icon from "astro-icon";
import RecurringImages from "@store/RecurringImages";
import ClipPathSVG from "@components/ClipPathSVG.astro";
import LangSelectorsDropdown from "@components/LangSelectorsDropdown.astro";
import shouldDisplayExperimentals from "@utils/shouldDisplayExperimentals";

const { logo } = RecurringImages;

interface Props {
  docLocale: string;
  footerText: string;
  availableLocales: string[];
}

const { docLocale, footerText, availableLocales } = Astro.props as Props;
---

<style lang="scss">
  .brand-logo {
    height: clamp(38px, 5vw, 50px);
  }

  nav {
    gap: clamp(10px, 1.5vw, 20px);

    a {
      @apply text-[32px] md:text-[clamp(0.875rem,1.5vw+0.1rem,1.125rem)] font-semibold md:font-bold leading-[150%];
    }
  }

  #sidebar {
    background-image: url(/bg-images/sidebar.webp);
  }
</style>

<section
  id="navigation"
  class="md:!static sticky !top-0 z-[999] w-full bg-cover bg-right-bottom"
>
  <div
    class:list={[
      "flex justify-between items-center",
      "navbar wrapper relative top-0 z-50 mx-auto py-[clamp(20px,3vw,56px)]",
    ]}
  >
    <a href="/" class="brand-logo my-auto">
      <img class="w-full h-full" {...logo} />
    </a>

    <nav class="hidden md:flex m-auto ml-14">
      <a class="navItem" href="/crowdfunding">Crowdfunding</a>
      <a class="navItem" href="/blog">Blog</a>

      {
        shouldDisplayExperimentals() && (
          <Fragment>
            <a class="navItem" href="/howto">
              How-to
            </a>

            <a class="navItem" href="/recipes">
              Recipe
            </a>

            <a class="navItem" href="/tea-estates">
              Tea Estates
            </a>
          </Fragment>
        )
      }
    </nav>

    <div class="flex gap-4 items-center">
      <div class="flex items-center">
        <LangSelectorsDropdown
          docLocale={docLocale}
          availableLocales={availableLocales}
        />
      </div>

      <button
        onclick="openCart()"
        class="relative scale-[0.775] sm:scale-[0.85] md:scale-[0.925] lg:scale-[1]"
      >
        <ClipPathSVG
          id="cart-btn-curve"
          path="M0.5,0 A0.5,0.5,0,0,0,0,0.5 a0.5,0.5,0,0,0,0.5,0.5 a0.5,0.5,0,0,0,0.5,-0.5 a0.5,0.5,0,0,0,-0.021,-0.146 a0.25,0.25,0,0,1,-0.104,0.021 A0.25,0.25,0,0,1,0.625,0.125 a0.25,0.25,0,0,1,0.021,-0.104 a0.5,0.5,0,0,0,-0.146,-0.021"
        />

        <div
          style="clip-path: url(#cart-btn-curve);"
          class="w-12 h-12 text-primary flex justify-center items-center bg-lightgray rounded-full"
        >
          <Icon name="mi:shopping-cart" class="w-[30px] h-[30px] mx-auto" />
        </div>

        <div
          class:list={[
            "w-6 h-6 absolute -top-1.5 -right-1.5",
            "flex justify-center items-center rounded-full",
          ]}
        >
          <div
            class="w-5 h-5 text-white flex justify-center items-center rounded-full bg-red-600"
          >
            <span>2</span>
          </div>
        </div>
      </button>

      <div class="block md:hidden w-[38px] h-[38px] ml-[18px]">
        <button
          id="sidebar-open-btn"
          class="block w-full h-full select-none cursor-pointer"
        >
          <svg viewBox="0 0 22.4 19.2" xmlns="http://www.w3.org/2000/svg">
            <path
              d="M0 17.6a1.6 1.6 0 0 0 .5 1.1 1.6 1.6 0 0 0 1.1.5h19.2a1.6 1.6 0 0 0 0-3.2H1.6a1.6 1.6 0 0 0-1.1.5 1.6 1.6 0 0 0-.5 1.1Zm0-8a1.6 1.6 0 0 0 .5 1.1 1.6 1.6 0 0 0 1.1.5h9.6a1.6 1.6 0 0 0 0-3.2H1.6a1.6 1.6 0 0 0-1.1.5A1.6 1.6 0 0 0 0 9.6Zm0-8a1.6 1.6 0 0 0 .5 1.1 1.6 1.6 0 0 0 1.1.5h19.2a1.6 1.6 0 0 0 1.1-.5 1.6 1.6 0 0 0 .5-1.1 1.6 1.6 0 0 0-.5-1.1 1.6 1.6 0 0 0-1.1-.5H1.6A1.6 1.6 0 0 0 .5.5 1.6 1.6 0 0 0 0 1.6Z"
              style="fill: #e3dfde; fill-rule: evenodd"></path>
          </svg>
        </button>

        <button
          id="sidebar-close-btn"
          class="hidden w-full h-full select-none cursor-pointer"
        >
          <svg viewBox="0 0 19.2 19.2" xmlns="http://www.w3.org/2000/svg">
            <path
              d="M.5.5A1.6,1.6,0,0,1,1.6,0,1.6,1.6,0,0,1,2.7.5L9.6,7.4,16.5.5A1,1,0,0,1,17,.1h1.2l.6.4.3.5a1.3,1.3,0,0,1,.1.6,1.3,1.3,0,0,1-.1.6l-.4.6L11.9,9.6l6.8,6.9a1.6,1.6,0,0,1-1.1,2.7,2.1,2.1,0,0,1-1.1-.4L9.6,11.9,2.7,18.8a2.1,2.1,0,0,1-1.1.4,1.6,1.6,0,0,1-1.1-.5,1.5,1.5,0,0,1,0-2.2L7.3,9.6.5,2.8A1.8,1.8,0,0,1,0,1.6,1.6,1.6,0,0,1,.5.5Z"
              style="fill: #e3dfde; fill-rule: evenodd"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>

  <div
    id="sidebar"
    class:list={[
      "bg-cover bg-right-bottom bg-no-repeat",
      "hidden md:!hidden fixed right-0 z-[40] w-[300px] max-w-full h-full pb-20",
    ]}
  >
    <div class="grid content-between h-full px-[30px] pt-[26px] pb-9">
      <nav class="flex flex-col">
        <a class="navItem" href="/crowdfunding">Crowdfunding</a>
        <a class="navItem" href="/blog">Blog</a>

        {
          shouldDisplayExperimentals() && (
            <Fragment>
              <a class="navItem" href="/howto">
                How-to
              </a>

              <a class="navItem" href="/recipes">
                Recipe
              </a>

              <a class="navItem" href="/tea-estates">
                Tea Estates
              </a>
            </Fragment>
          )
        }
      </nav>

      <div class="text-xs font-normal leading-[150%]" set:html={footerText}>
      </div>
    </div>
  </div>
</section>

<div class="block md:hidden py-11"></div>

<script is:inline>
  {
    const navigation = document.getElementById("navigation"),
      translationNotFoundNotification = document.querySelector(
        ".translation-not-found-notification"
      );

    window.addEventListener("scroll", () => {
      const translationNotFoundNotificationHeight =
        translationNotFoundNotification.getBoundingClientRect().height;

      // fix sticky navbar position if top notification is shown
      navigation.style.top = `${translationNotFoundNotificationHeight}px`;

      navigation.style.backgroundImage =
        scrollY > 0 || document.body.style.position === "fixed"
          ? "url(/bg-images/nav-background.webp)"
          : "unset";
    });
  }
</script>

<script>
  const query = document.querySelector.bind(document),
    rootElement = query(":root"),
    sidebar = query("#sidebar"),
    navigation = query("#navigation"),
    sidebarOpenButton = query("#sidebar-open-btn"),
    sidebarCloseButton = query("#sidebar-close-btn");

  function disableScrolling() {
    const overflowY =
      visualViewport.height < document.body.offsetHeight ? "scroll" : "auto";

    Object.assign(document.body.style, {
      overflowY,
      width: "100%",
      position: "fixed",
      top: `-${window.scrollY}px`,
    });
  }

  function enableScrolling() {
    const scrollYPosition = parseInt(document.body.style.top.slice(1, -2));

    Object.assign(document.body.style, {
      width: "auto",
      overflowY: "auto",
      position: "static",
    });

    try {
      window.scrollTo({
        top: scrollYPosition,
        // @ts-ignore
        behavior: "instant",
      });
    } catch (error) {
      const currentRootScrollBehavior = rootElement.style.scrollBehavior;

      rootElement.style.scrollBehavior = "auto";

      window.scrollTo({
        top: scrollYPosition,
        behavior: "auto",
      });

      rootElement.style.scrollBehavior = currentRootScrollBehavior;
    }
  }

  const updateSidebarTopPosition = () => {
    sidebar.style.top = `${navigation.getBoundingClientRect().bottom}px`;
  };

  window.addEventListener("resize", updateSidebarTopPosition);

  sidebarOpenButton.addEventListener("click", () => {
    window.removeEventListener("resize", updateSidebarTopPosition);

    updateSidebarTopPosition();

    sidebar.style.display = "block";
    sidebarOpenButton.style.display = "none";
    sidebarCloseButton.style.display = "block";
    navigation.style.backgroundImage = "url(/bg-images/nav-background.webp)";

    disableScrolling();

    window.addEventListener("resize", updateSidebarTopPosition);
  });

  sidebarCloseButton.addEventListener("click", () => {
    sidebar.style.display = "none";
    sidebarOpenButton.style.display = "block";
    sidebarCloseButton.style.display = "none";
    navigation.style.backgroundImage = "unset";

    enableScrolling();
  });

  window.addEventListener("resize", () => {
    if (window.innerWidth > 639) {
      enableScrolling();

      window.removeEventListener("resize", updateSidebarTopPosition);
    } else if (sidebarCloseButton.style.display === "block") {
      disableScrolling();

      window.addEventListener("resize", updateSidebarTopPosition);
    }
  });
</script>
