---
import { Picture, BackgroundPicture } from "astro-imagetools/components";

import CMS from "@store/CMS";
import RecurringImages from "@store/RecurringImages";
import localizeCMSImage from "@utils/localizeCMSImage";

import SearchBar from "@components/SearchBar.astro";
import ClipPathSVG from "@components/ClipPathSVG.astro";
import DynamicHTML from "@components/DynamicHTML.astro";
import LangSelectorsDropdown from "@components/LangSelectorsDropdown.astro";

const { logo, nav_background, nav_background_sm, sidebar_background } =
  RecurringImages;

interface Props {
  docLocale: string;
  footerText: string;
  isCartNavbar?: boolean;
  availableLocales: string[];
}

const { docLocale, footerText, isCartNavbar, availableLocales } =
  Astro.props as Props;

const recurData = CMS.get("recurringElement", docLocale),
  ariaLabelRecurData = CMS.get("ariaLabelRecurringElement", docLocale);

const {
  text_language,
  Button_save_text,
  Nav_menu: menu,
  Nav_menu_cart_icon: cartIcon,
  Nav_menu_profile_icon: profileIcon,
  Nav_menu_localization_icon: localizationIcon,
  Nav_menu_cart_visibility: cartVisibility,
  Nav_menu_search_visibility: searchVisibility,
  Nav_menu_profile_visibility: profileVisibility,
  Nav_menu_localization_visibility: localizationVisibility,
  Nav_menu_language_selector_visibility: languageSelectorVisibility,
} = recurData;
---

<style lang="scss">
  @use "src/styles/poly-fluid" as *;

  .brand-logo {
    height: clamp(35px, 5vw, 50px);
  }

  .nav-icon {
    width: poly-fluid-clamp(
      (
        768px: 35px,
        1024px: 50px,
      )
    );
    height: poly-fluid-clamp(
      (
        768px: 35px,
        1024px: 50px,
      )
    );
    padding: poly-fluid-clamp(
      (
        768px: 10px,
        1024px: 12px,
      )
    );
  }

  .nav-cart-num {
    width: poly-fluid-clamp(
      (
        768px: 15px,
        1024px: 20px,
      )
    );
    height: poly-fluid-clamp(
      (
        768px: 15px,
        1024px: 20px,
      )
    );
  }

  #sidebar nav a {
    @apply text-[32px] font-bold leading-[150%];
  }
</style>

<header
  id="navigation"
  class:list={[
    isCartNavbar && "cart-navbar",
    "md:!relative sticky top-0 z-[999] w-full bg-cover bg-right-bottom",
  ]}
>
  <div class="navbar-container relative w-full sm:flex items-center z-10">
    <ClipPathSVG
      id="nav-curve"
      path="M0,0 L0,0.936 C0,0.936,0.009,1,0.107,1 C0.152,1,0.198,0.992,0.247,0.983 C0.305,0.973,0.368,0.961,0.441,0.961 C0.511,0.961,0.573,0.971,0.634,0.981 C0.692,0.991,0.749,1,0.81,1 C0.934,1,1,0.878,1,0.878 V0 H0"
    />

    <div
      class="absolute top-0 left-0 w-full h-full bg-primary"
      style="clip-path: url(#nav-curve);"
    >
      {
        nav_background && (
          <Picture
            alt=""
            layout="fill"
            preload="avif"
            breakpoints={{ maxWidth: 640 }}
            src={nav_background_sm?.src || nav_background.src}
            artDirectives={[
              {
                media: "(min-width: 640px)",
                breakpoints: { minWidth: 640 },
                src: nav_background.src,
              },
            ]}
          />
        )
      }
    </div>

    {
      !isCartNavbar && (
        <ClipPathSVG
          id="cart-btn-curve"
          path="M0.5,0 A0.5,0.5,0,0,0,0,0.5 a0.5,0.5,0,0,0,0.5,0.5 a0.5,0.5,0,0,0,0.5,-0.5 a0.5,0.5,0,0,0,-0.021,-0.146 a0.25,0.25,0,0,1,-0.104,0.021 A0.25,0.25,0,0,1,0.625,0.125 a0.25,0.25,0,0,1,0.021,-0.104 a0.5,0.5,0,0,0,-0.146,-0.021"
        />
      )
    }

    <div
      class:list={[
        "flex justify-between items-center",
        "navbar wrapper relative top-0 z-50 mx-auto py-[clamp(20px,3vw,36px)]",
      ]}
    >
      <div class="flex gap-[35px] md:gap-[50px]">
        <a href="/" class="brand-logo my-auto">
          <img class="h-full" {...logo} />
        </a>

        {
          searchVisibility && (
            <div class="hidden sm:block w-full my-auto items-center overflow-hidden">
              <div class="flex">
                <ci-search />
              </div>
            </div>
          )
        }
      </div>

      <div class="flex justify-end items-center gap-2.5 md:gap-[15px]">
        {
          localizationVisibility && (
            <div class="hidden sm:block relative">
              <button
                id="localization-menu-open-btn"
                aria-label={
                  ariaLabelRecurData.Navbar_open_localization_menu_text
                }
                class="nav-icon peer w-fit flex justify-center items-center bg-white rounded-full cursor-pointer"
              >
                <img
                  src={await localizeCMSImage(
                    localizationIcon?.data?.attributes.url
                  )}
                  alt={localizationIcon?.data?.attributes.alternativeText}
                />
              </button>

              <form class="localization-form hidden absolute w-[280px] -translate-x-1/2 left-1/2 drop-shadow-lg">
                <div class="relative flex justify-center pt-1">
                  <div class="w-5 h-5 bg-white rotate-45 rounded" />
                </div>

                <div class="grid gap-[15px] content-between bg-white rounded-[12px] p-[25px] -translate-y-3">
                  <div class="grid gap-[6px] text-black-light">
                    <div class="text-[15px] font-medium text-black">
                      {text_language}
                    </div>

                    {languageSelectorVisibility && (
                      <LangSelectorsDropdown
                        docLocale={docLocale}
                        availableLocales={availableLocales}
                      />
                    )}
                  </div>

                  <button
                    type="submit"
                    class="py-2.5 px-4 bg-primary text-white leading-[120%] rounded-full"
                  >
                    {Button_save_text}
                  </button>
                </div>
              </form>
            </div>
          )
        }

        {
          localizationVisibility && (
            <div class="block sm:hidden relative">
              <button
                id="localization-menu-sm-open-btn"
                class:list={[
                  "nav-icon flex justify-center items-center",
                  "peer bg-white rounded-full cursor-pointer",
                ]}
              >
                <img
                  src={await localizeCMSImage(
                    localizationIcon?.data?.attributes.url
                  )}
                  alt={localizationIcon?.data?.attributes.alternativeText}
                />
              </button>
            </div>
          )
        }

        {
          cartVisibility && !isCartNavbar && (
            <button
              aria-label={ariaLabelRecurData.Navbar_open_cart_text}
              id="open-cart-btn"
              class="inline-block relative"
            >
              <span
                style="clip-path: url(#cart-btn-curve);"
                class="nav-icon block bg-white rounded-full"
              >
                <img
                  src={await localizeCMSImage(cartIcon?.data?.attributes.url)}
                  alt={cartIcon?.data?.attributes.alternativeText}
                />
              </span>

              <span
                class:list={[
                  "absolute -top-[3px] -right-[3px]",
                  "flex justify-center items-center rounded-full",
                ]}
              >
                <span
                  class:list={[
                    "nav-cart-num flex justify-center items-center",
                    "text-[10px] lg:text-xs text-white rounded-full bg-error",
                  ]}
                >
                  <span id="cart-size">
                    <DynamicHTML
                      htmlFn={() => Object.keys(window.cart).length}
                    />
                  </span>
                </span>
              </span>
            </button>
          )
        }

        {
          profileVisibility && (
            <div
              class:list={[
                "nav-icon flex justify-center items-center",
                "bg-secondary rounded-full cursor-pointer",
              ]}
            >
              <img
                src={await localizeCMSImage(profileIcon?.data?.attributes.url)}
                alt={profileIcon?.data?.attributes.alternativeText}
              />
            </div>
          )
        }

        <div class="block md:hidden w-[35px] h-[35px]">
          <button
            id="sidebar-open-btn"
            aria-label={ariaLabelRecurData.Navbar_open_sidebar_menu_text}
            class="block w-full h-full select-none cursor-pointer"
          >
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 34 31">
              <path
                transform="translate(0)"
                style="fill: #fff; fill-rule: evenodd"
                d="M0,28.4a2.7,2.7,0,0,0,.7,1.8,2.5,2.5,0,0,0,1.7.8H31.2a2.5,2.5,0,0,0,1.7-.8,2.7,2.7,0,0,0,.7-1.8,2.9,2.9,0,0,0-.7-1.8,2.5,2.5,0,0,0-1.7-.8H2.4a2.5,2.5,0,0,0-1.7.8A2.9,2.9,0,0,0,0,28.4ZM9.9,15.5a2.9,2.9,0,0,0,.7,1.8,2.5,2.5,0,0,0,1.7.8H31.6a2.1,2.1,0,0,0,1.7-.8,2.4,2.4,0,0,0,.7-1.8,2.4,2.4,0,0,0-.7-1.8,2.1,2.1,0,0,0-1.7-.8H12.3a2.5,2.5,0,0,0-1.7.8A2.9,2.9,0,0,0,9.9,15.5ZM0,2.6A2.9,2.9,0,0,0,.7,4.4a2.5,2.5,0,0,0,1.7.8H31.2a2.5,2.5,0,0,0,1.7-.8,2.9,2.9,0,0,0,.7-1.8A2.7,2.7,0,0,0,32.9.8,2.5,2.5,0,0,0,31.2,0H2.4A2.5,2.5,0,0,0,.7.8,2.7,2.7,0,0,0,0,2.6Z"
              ></path>
            </svg>
          </button>

          <button
            id="sidebar-close-btn"
            aria-label={ariaLabelRecurData.Navbar_close_sidebar_menu_text}
            class="hidden w-full h-full select-none cursor-pointer"
          >
            <svg viewBox="0 0 19.2 19.2" xmlns="http://www.w3.org/2000/svg">
              <path
                d="M.5.5A1.6,1.6,0,0,1,1.6,0,1.6,1.6,0,0,1,2.7.5L9.6,7.4,16.5.5A1,1,0,0,1,17,.1h1.2l.6.4.3.5a1.3,1.3,0,0,1,.1.6,1.3,1.3,0,0,1-.1.6l-.4.6L11.9,9.6l6.8,6.9a1.6,1.6,0,0,1-1.1,2.7,2.1,2.1,0,0,1-1.1-.4L9.6,11.9,2.7,18.8a2.1,2.1,0,0,1-1.1.4,1.6,1.6,0,0,1-1.1-.5,1.5,1.5,0,0,1,0-2.2L7.3,9.6.5,2.8A1.8,1.8,0,0,1,0,1.6,1.6,1.6,0,0,1,.5.5Z"
                style="fill: #fff; fill-rule: evenodd"></path>
            </svg>
          </button>
        </div>
      </div>
    </div>

    <div
      id="sidebar"
      class="hidden md:!hidden fixed right-0 z-[40] w-[300px] max-w-full h-full bg-primary z-[99]"
    >
      {
        sidebar_background && (
          <Picture
            alt=""
            sizes="300px"
            layout="fill"
            preload="avif"
            loading="lazy"
            src={sidebar_background.src}
            objectPosition="right bottom"
            breakpoints={{ minWidth: 300 }}
            attributes={{
              container: { style: "height: 100%;" },
              link: { media: "(max-width: 767.98px)" },
              picture: {
                style: "position: absolute; bottom: 0; right: 0;",
              },
            }}
          />
        )
      }

      <div class="grid content-between h-full px-[30px] pt-[26px] pb-9 z-10">
        <div class="z-10 grid gap-9">
          <nav class="flex flex-col gap-[35px] text-white">
            {
              menu.map(
                ({ Visibility, Title, Link }) =>
                  Visibility && <a href={Link}>{Title}</a>
              )
            }
          </nav>
        </div>

        <div
          class="text-xs font-normal leading-[150%] z-10"
          set:html={footerText}
        />
      </div>
    </div>

    <div class="block sm:hidden bg-primary h-14 flex items-end drop-shadow-lg">
      <div class="wrapper pb-[15px]">
        {
          searchVisibility && (
            <div class="my-auto block md:hidden items-center overflow-hidden w-full">
              <ci-search />
            </div>
          )
        }
      </div>
    </div>

    <form
      id="localization-menu-sm"
      class:list={[
        "localization-form fixed hidden sm:!hidden right-0 top-0",
        "w-full h-screen p-[25px] bg-secondary text-black-light z-[9999]",
      ]}
    >
      <div class="grid gap-[25px]">
        <div class="flex justify-end">
          <button
            type="button"
            aria-label={ariaLabelRecurData.Navbar_close_localization_menu_text}
            id="localization-menu-sm-close-btn"
            class="select-none cursor-pointer"
          >
            <svg
              viewBox="0 0 19.2 19.2"
              xmlns="http://www.w3.org/2000/svg"
              class="w-[35px] h-[35px]"
            >
              <path
                d="M.5.5A1.6,1.6,0,0,1,1.6,0,1.6,1.6,0,0,1,2.7.5L9.6,7.4,16.5.5A1,1,0,0,1,17,.1h1.2l.6.4.3.5a1.3,1.3,0,0,1,.1.6,1.3,1.3,0,0,1-.1.6l-.4.6L11.9,9.6l6.8,6.9a1.6,1.6,0,0,1-1.1,2.7,2.1,2.1,0,0,1-1.1-.4L9.6,11.9,2.7,18.8a2.1,2.1,0,0,1-1.1.4,1.6,1.6,0,0,1-1.1-.5,1.5,1.5,0,0,1,0-2.2L7.3,9.6.5,2.8A1.8,1.8,0,0,1,0,1.6,1.6,1.6,0,0,1,.5.5Z"
                style="fill: #474747; fill-rule: evenodd"></path>
            </svg>
          </button>
        </div>

        <div class="grid gap-[25px] content-between h-full">
          <div class="grid gap-2.5">
            <div class="text-[15px] font-medium">
              {text_language}
            </div>

            {
              languageSelectorVisibility && (
                <LangSelectorsDropdown
                  docLocale={docLocale}
                  availableLocales={availableLocales}
                />
              )
            }
          </div>
        </div>

        <button
          type="submit"
          class="py-2.5 px-4 bg-primary text-secondary-light leading-[120%] rounded-full"
        >
          {Button_save_text}
        </button>
      </div>
    </form>
  </div>

  <script is:inline>
    {
      const navigation = document.getElementById("navigation"),
        translationNotFoundNotification = document.querySelector(
          ".translation-not-found-notification"
        );

      const updateNavbarStyles = () => {
        // fix sticky navbar position on mobile if top notification is shown
        navigation.style.top = `${
          window.innerWidth >= 768
            ? 0
            : translationNotFoundNotification.getBoundingClientRect().height
        }px`;
      };

      window.addEventListener("scroll", updateNavbarStyles);
      window.addEventListener("resize", updateNavbarStyles);
    }
  </script>

  <script>
    const id = document.getElementById.bind(document);

    const rootElement = document.querySelector(":root") as HTMLElement,
      cart = id("cart"),
      sidebar = id("sidebar"),
      navigation = id("navigation"),
      openCartBtn = id("open-cart-btn"),
      cartNavbarBg = id("cart-navbar-bg"),
      sidebarOpenButton = id("sidebar-open-btn"),
      sidebarCloseButton = id("sidebar-close-btn"),
      localizationMenuSm = id("localization-menu-sm"),
      localizationMenuOpenButton = id("localization-menu-open-btn"),
      localizationMenuSmOpenButton = id("localization-menu-sm-open-btn"),
      localizationMenuSmCloseButton = id("localization-menu-sm-close-btn");

    const localization = localizationMenuOpenButton?.parentElement,
      localizationMenu = localizationMenuOpenButton?.nextElementSibling,
      localizationForms =
        document.querySelectorAll<HTMLFormElement>(".localization-form");

    window.disableScrolling = () => {
      const overflowY =
        window.innerHeight < document.body.scrollHeight ? "scroll" : "auto";

      Object.assign(document.body.style, {
        overflowY,
        width: "100%",
        position: "fixed",
        top: `-${scrollY}px`,
      });
    };

    window.enableScrolling = () => {
      const scrollYPosition =
        parseInt(document.body.style.top.slice(1, -2)) || window.scrollY;

      Object.assign(document.body.style, {
        width: "auto",
        overflowY: "auto",
        position: "static",
      });

      window.scrollTo({ top: scrollYPosition });
    };

    const updateSidebarTopPosition = () => {
      // reduce top by 10px to hide the transparent gap caused by the curve
      const sidebarTop = navigation.getBoundingClientRect().bottom - 10;

      sidebar.style.top = `${sidebarTop}px`;
      sidebar.style.paddingBottom = `${sidebarTop}px`;
    };

    window.addEventListener("resize", updateSidebarTopPosition);

    window.addEventListener("resize", () => {
      if (window.innerWidth > 768) {
        // enable scrolling only if cart and checkout is not open
        if (cart?.classList.contains("hidden")) window.enableScrolling();

        // remove event listener to prevent memory leaks
        window.removeEventListener("resize", updateSidebarTopPosition);

        cartNavbarBg &&
          (cartNavbarBg.style.clipPath = "url(#cart-navbar-curve)");
      } else if (sidebar.style.display === "block") {
        // readd event listener in case it was removed
        window.addEventListener("resize", updateSidebarTopPosition);

        if (localizationMenuSm.style.display === "block") {
          window.disableScrolling();
        }
      }
    });

    openCartBtn?.addEventListener("click", () => {
      window.openCart();
    });

    sidebarOpenButton?.addEventListener("click", () => {
      window.removeEventListener("resize", updateSidebarTopPosition);

      updateSidebarTopPosition();

      sidebar.style.display = "block";
      sidebarOpenButton.style.display = "none";
      sidebarCloseButton.style.display = "block";

      window.disableScrolling();

      window.addEventListener("resize", updateSidebarTopPosition);
    });

    sidebarCloseButton?.addEventListener("click", () => {
      sidebar.style.display = "none";
      sidebarOpenButton.style.display = "block";
      sidebarCloseButton.style.display = "none";

      window.enableScrolling();
    });

    localization?.addEventListener("mouseenter", () => {
      localizationMenu.classList.remove("hidden");
    });

    const hideLocalizationMenu = () => {
      localizationMenu.classList.add("hidden");
    };

    localization?.addEventListener("mouseleave", hideLocalizationMenu);

    document.addEventListener("click", (event) => {
      const target = event.target as HTMLElement;

      if (localizationMenuOpenButton?.contains(target)) {
        const { classList: localizationMenuClassList } = localizationMenu;

        localizationMenuClassList.toggle("hidden");

        localization[
          !localizationMenuClassList.contains("hidden")
            ? "removeEventListener"
            : "addEventListener"
        ]("mouseleave", hideLocalizationMenu);
      }

      if (!localization?.contains(target)) {
        hideLocalizationMenu();

        localization.addEventListener("mouseleave", hideLocalizationMenu);
      }
    });

    localizationMenuSmOpenButton?.addEventListener("click", () => {
      localizationMenuSm.style.display = "block";

      window.disableScrolling();
    });

    localizationMenuSmCloseButton?.addEventListener("click", () => {
      localizationMenuSm.style.display = "none";

      window.enableScrolling();
    });

    localizationForms.forEach((localizationForm) => {
      localizationForm.addEventListener("submit", (event) => {
        event.preventDefault();

        const { lang: newLocale } = Object.fromEntries(
          [...localizationForm.querySelectorAll("ul")].map((list) => [
            list.dataset.name,
            list.querySelector<HTMLElement>("li[aria-selected=true]").dataset
              .value,
          ])
        );

        // change & redirect to preferred locale
        localStorage.setItem(`locale`, newLocale);

        const localeRegex = new RegExp(
          // @ts-ignore
          `^/(${availableLocales.map((locale) => locale).join("|")})/`
          /* availableLocales is defined in SetPreferredLocale.astro (Layout.astro for 404) */
        );

        let [, locale] = location.pathname.match(localeRegex) ?? [];

        location.href =
          `/${newLocale}/` + location.pathname.slice(locale ? 4 : 0);
      });
    });
  </script>

  <SearchBar />
</header>
