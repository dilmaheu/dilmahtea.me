---
import CMS from "@store/CMS";
import Icon from "astro-icon";
import localizeCMSImage from "@utils/localizeCMSImage";
import { Picture, BackgroundPicture } from "astro-imagetools/components";

import Hero from "@components/Hero.astro";
import RecurringImages from "@store/RecurringImages";
import ClipPathSVG from "@components/ClipPathSVG.astro";
import DynamicHTML from "@components/DynamicHTML.astro";
import LangSelectorsDropdown from "@components/LangSelectorsDropdown.astro";

const {
  logo,
  nav_background,
  sidebar_background,
  checkout_header_background,
  checkout_header_background_sm,
} = RecurringImages;

interface Props {
  docLocale: string;
  footerText: string;
  isCartNavbar?: boolean;
  availableLocales: string[];
}

const { docLocale, footerText, isCartNavbar, availableLocales } =
    Astro.props as Props,
  { ASSETS_URL } = import.meta.env;

const recurData = CMS.get("recurringElement", docLocale),
  ariaLabelRecurData = CMS.get("ariaLabelRecurringElement", docLocale);

const {
  Nav_menu: menu,
  Nav_menu_search_visibility: search,
  Nav_menu_language_selector_visibility: language,
  Nav_menu_localization_visibility: localization,
  Nav_menu_localization_icon: localization_icon,
  Nav_menu_cart_visibility: cart,
  Nav_menu_cart_icon: cart_icon,
  Nav_menu_profile_visibility: profile,
  Nav_menu_profile_icon: profile_icon,
  text_language,
  Button_save_text,
} = recurData;
---

<style lang="scss">
  @use "src/styles/poly-fluid" as *;

  .navbar-container {
    @include poly-fluid-sizing(
      "height",
      (
        640px: 80px,
        768px: 94px,
        1024px: 124px,
      )
    );
  }

  .brand-logo {
    height: clamp(35px, 5vw, 50px);
  }

  .nav-icons {
    width: poly-fluid-clamp(
      (
        768px: 35px,
        1024px: 50px,
      )
    );
    height: poly-fluid-clamp(
      (
        768px: 35px,
        1024px: 50px,
      )
    );
  }

  .nav-icons {
    padding: poly-fluid-clamp(
      (
        768px: 10px,
        1024px: 12px,
      )
    );
  }

  .nav-cart-num {
    width: poly-fluid-clamp(
      (
        768px: 15px,
        1024px: 20px,
      )
    );
    height: poly-fluid-clamp(
      (
        768px: 15px,
        1024px: 20px,
      )
    );
  }

  #sidebar {
    nav {
      a {
        @apply text-[32px] font-bold leading-[150%];
      }
    }
  }
</style>

<header
  id="navigation"
  class:list={[
    isCartNavbar && "cart-navbar",
    "md:!relative sticky !top-0 z-[999] w-full bg-cover bg-right-bottom",
  ]}
>
  <div class="relative w-full flex items-center navbar-container z-10">
    <ClipPathSVG
      id="nav-curve"
      path="M0,0 L0,0.936 C0,0.936,0.009,1,0.107,1 C0.152,1,0.198,0.992,0.247,0.983 C0.305,0.973,0.368,0.961,0.441,0.961 C0.511,0.961,0.573,0.971,0.634,0.981 C0.692,0.991,0.749,1,0.81,1 C0.934,1,1,0.878,1,0.878 V0 H0"
    />

    <Picture
      alt=""
      layout="fill"
      preload="avif"
      breakpoints={{ maxWidth: 640 }}
      src={checkout_header_background_sm.src}
      artDirectives={[
        {
          media: "(min-width: 640px)",
          breakpoints: { minWidth: 640 },
          src: checkout_header_background.src,
        },
      ]}
      attributes={{
        picture: {
          style:
            "position: absolute; top: 0; left: 0; clip-path: url(#nav-curve);",
        },
      }}
    />

    {
      !isCartNavbar && (
        <ClipPathSVG
          id="cart-btn-curve"
          path="M0.5,0 A0.5,0.5,0,0,0,0,0.5 a0.5,0.5,0,0,0,0.5,0.5 a0.5,0.5,0,0,0,0.5,-0.5 a0.5,0.5,0,0,0,-0.021,-0.146 a0.25,0.25,0,0,1,-0.104,0.021 A0.25,0.25,0,0,1,0.625,0.125 a0.25,0.25,0,0,1,0.021,-0.104 a0.5,0.5,0,0,0,-0.146,-0.021"
        />
      )
    }

    <div
      class:list={[
        "flex justify-between items-center",
        "navbar wrapper relative top-0 z-50 mx-auto py-[clamp(20px,3vw,36px)]",
      ]}
    >
      <div class="flex gap-[35px] md:gap-[50px]">
        <a href="/" class="brand-logo my-auto">
          <img class="h-full" {...logo} />
        </a>

        {
          search && (
            <div class="my-auto hidden sm:block items-center overflow-hidden w-full">
              <div class="flex">
                <ci-search />
              </div>
            </div>
          )
        }
      </div>

      <div class="flex justify-end items-center gap-2.5 md:gap-[15px]">
        {
          localization && (
            <div class="hidden sm:block relative">
              <div
                tabindex="0"
                aria-label={ariaLabelRecurData.Navbar_open_localization_menu_text}
                class:list={[
                  "nav-icons-container nav-icons flex justify-center items-center",
                  "bg-lightgray rounded-full cursor-pointer peer",
                ]}
              >
                <img
                  src={await localizeCMSImage(
                    localization_icon?.data?.attributes.url
                  )}
                  alt={localization_icon?.data?.attributes.alternativeText}
                />
              </div>

              <form
                class:list={[
                  "peer-hover-[:nth-of-type(1)&]:block hover:peer-[:nth-of-type(1)&]:block",
                  "localization-form hidden absolute w-[280px] -translate-x-1/2 left-1/2 pt-10 -mt-7 drop-shadow-lg",
                ]}
              >
                <div class="absolute -translate-x-1/2 left-1/2 -top-2">
                  <div class="pt-10">
                    <div class="w-5 h-5 bg-lightgray rotate-45 rounded" />
                  </div>
                </div>

                <div class="grid gap-[15px] content-between bg-lightgray rounded-[12px] p-[25px]">
                  <div class="grid gap-[6px] text-dark">
                    <div class="text-[15px] font-medium">{text_language}</div>

                    {language && (
                      <LangSelectorsDropdown
                        docLocale={docLocale}
                        availableLocales={availableLocales}
                      />
                    )}
                  </div>

                  <button
                    type="submit"
                    class="bg-primary leading-[120%] text-lightgray2 rounded-full py-2.5 px-4"
                  >
                    {Button_save_text}
                  </button>
                </div>
              </form>
            </div>
          )
        }

        {
          localization && (
            <div class="block sm:hidden relative">
              <div
                id="localization-menu-sm-open-btn"
                class:list={[
                  "nav-icons-container nav-icons flex justify-center items-center",
                  "bg-lightgray rounded-full cursor-pointer peer",
                ]}
              >
                <img
                  src={await localizeCMSImage(
                    localization_icon?.data?.attributes.url
                  )}
                  alt={localization_icon?.data?.attributes.alternativeText}
                />
              </div>
            </div>
          )
        }

        {
          cart && !isCartNavbar && (
            <button
              aria-label={ariaLabelRecurData.Navbar_open_cart_text}
              class:list={[
                "open-cart-btn inline-block relative",
                "nav-icons-container",
              ]}
            >
              <span
                style="clip-path: url(#cart-btn-curve);"
                class="nav-icons block bg-lightgray rounded-full"
              >
                <img
                  src={await localizeCMSImage(cart_icon?.data?.attributes.url)}
                  alt={cart_icon?.data?.attributes.alternativeText}
                />
              </span>

              <span
                class:list={[
                  "absolute -top-[3px] -right-[3px]",
                  "flex justify-center items-center rounded-full",
                ]}
              >
                <span
                  class:list={[
                    "nav-cart-num flex justify-center items-center",
                    "text-[10px] lg:text-xs text-white rounded-full bg-red-600",
                  ]}
                >
                  <span id="cart-size">
                    <DynamicHTML
                      htmlFn={() => Object.keys(window.cart).length}
                    />
                  </span>
                </span>
              </span>
            </button>
          )
        }

        {
          profile && (
            <div
              class:list={[
                "nav-icons-container nav-icons flex justify-center items-center",
                "bg-lightgray rounded-full cursor-pointer",
              ]}
            >
              <img
                src={await localizeCMSImage(profile_icon?.data?.attributes.url)}
                alt={profile_icon?.data?.attributes.alternativeText}
              />
            </div>
          )
        }

        <div class="block md:hidden w-[35px] h-[35px]">
          <button
            id="sidebar-open-btn"
            aria-label={ariaLabelRecurData.Navbar_open_sidebar_menu_text}
            class="block w-full h-full select-none cursor-pointer"
          >
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 34 31">
              <path
                d="M0,28.4a2.7,2.7,0,0,0,.7,1.8,2.5,2.5,0,0,0,1.7.8H31.2a2.5,2.5,0,0,0,1.7-.8,2.7,2.7,0,0,0,.7-1.8,2.9,2.9,0,0,0-.7-1.8,2.5,2.5,0,0,0-1.7-.8H2.4a2.5,2.5,0,0,0-1.7.8A2.9,2.9,0,0,0,0,28.4ZM9.9,15.5a2.9,2.9,0,0,0,.7,1.8,2.5,2.5,0,0,0,1.7.8H31.6a2.1,2.1,0,0,0,1.7-.8,2.4,2.4,0,0,0,.7-1.8,2.4,2.4,0,0,0-.7-1.8,2.1,2.1,0,0,0-1.7-.8H12.3a2.5,2.5,0,0,0-1.7.8A2.9,2.9,0,0,0,9.9,15.5ZM0,2.6A2.9,2.9,0,0,0,.7,4.4a2.5,2.5,0,0,0,1.7.8H31.2a2.5,2.5,0,0,0,1.7-.8,2.9,2.9,0,0,0,.7-1.8A2.7,2.7,0,0,0,32.9.8,2.5,2.5,0,0,0,31.2,0H2.4A2.5,2.5,0,0,0,.7.8,2.7,2.7,0,0,0,0,2.6Z"
                transform="translate(0)"
                style="fill:#e3dfde;fill-rule:evenodd"></path>
            </svg>
          </button>
        </div>
      </div>
    </div>

    <div
      id="sidebar"
      class="hidden md:!hidden fixed right-0 z-[40] w-[300px] max-w-full h-screen z-[99]"
    >
      <BackgroundPicture
        sizes="300px"
        layout="fill"
        preload="avif"
        loading="lazy"
        src={sidebar_background.src}
        objectPosition="right bottom"
        breakpoints={{ minWidth: 300 }}
        attributes={{
          container: { style: "height: 100%;" },
          link: { media: "(max-width: 767.98px)" },
        }}
      >
        <div class="grid content-between h-full px-[30px] pt-[26px] pb-9">
          <div class="z-10 grid gap-9">
            <div class="flex items-center gap-x-[15px] justify-end">
              <div class="w-[35px] h-[35px]">
                <button
                  id="sidebar-close-btn"
                  aria-label={ariaLabelRecurData.Navbar_close_sidebar_menu_text}
                  class="hidden w-full h-full select-none cursor-pointer"
                >
                  <svg
                    viewBox="0 0 19.2 19.2"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M.5.5A1.6,1.6,0,0,1,1.6,0,1.6,1.6,0,0,1,2.7.5L9.6,7.4,16.5.5A1,1,0,0,1,17,.1h1.2l.6.4.3.5a1.3,1.3,0,0,1,.1.6,1.3,1.3,0,0,1-.1.6l-.4.6L11.9,9.6l6.8,6.9a1.6,1.6,0,0,1-1.1,2.7,2.1,2.1,0,0,1-1.1-.4L9.6,11.9,2.7,18.8a2.1,2.1,0,0,1-1.1.4,1.6,1.6,0,0,1-1.1-.5,1.5,1.5,0,0,1,0-2.2L7.3,9.6.5,2.8A1.8,1.8,0,0,1,0,1.6,1.6,1.6,0,0,1,.5.5Z"
                      style="fill: #e3dfde; fill-rule: evenodd"></path>
                  </svg>
                </button>
              </div>
            </div>

            <nav class="flex flex-col gap-[35px] text-white">
              {
                menu.map(
                  ({ Visibility, Title, Link }) =>
                    Visibility && <a href={Link}>{Title}</a>
                )
              }
            </nav>
          </div>

          <div
            class="text-xs font-normal leading-[150%] z-10"
            set:html={footerText}
          />
        </div>
      </BackgroundPicture>
    </div>
  </div>

  <div
    class="block sm:hidden bg-primary h-[68px] flex items-end -mt-3 drop-shadow-lg"
  >
    <div class="wrapper pb-2.5 md:pb-[15px]">
      {
        search && (
          <div class="my-auto block md:hidden items-center overflow-hidden w-full">
            <ci-search />
          </div>
        )
      }
    </div>
  </div>

  <form
    id="localization-menu-sm"
    class:list={[
      "localization-form fixed hidden md:!hidden right-0 top-0",
      "w-screen h-screen p-[25px] bg-lightgray text-dark z-[9999]",
    ]}
  >
    <div class="grid gap-[25px]">
      <div class="flex justify-end">
        <button
          type="button"
          aria-label={ariaLabelRecurData.Navbar_close_localization_menu_text}
          id="localization-menu-sm-close-btn"
          class="select-none cursor-pointer"
        >
          <svg
            viewBox="0 0 19.2 19.2"
            xmlns="http://www.w3.org/2000/svg"
            class="w-[35px] h-[35px]"
          >
            <path
              d="M.5.5A1.6,1.6,0,0,1,1.6,0,1.6,1.6,0,0,1,2.7.5L9.6,7.4,16.5.5A1,1,0,0,1,17,.1h1.2l.6.4.3.5a1.3,1.3,0,0,1,.1.6,1.3,1.3,0,0,1-.1.6l-.4.6L11.9,9.6l6.8,6.9a1.6,1.6,0,0,1-1.1,2.7,2.1,2.1,0,0,1-1.1-.4L9.6,11.9,2.7,18.8a2.1,2.1,0,0,1-1.1.4,1.6,1.6,0,0,1-1.1-.5,1.5,1.5,0,0,1,0-2.2L7.3,9.6.5,2.8A1.8,1.8,0,0,1,0,1.6,1.6,1.6,0,0,1,.5.5Z"
              style="fill: #474747; fill-rule: evenodd"></path>
          </svg>
        </button>
      </div>

      <div class="grid gap-[25px] content-between h-full">
        <div class="grid gap-2.5">
          <div class="text-[15px] font-medium">
            {text_language}
          </div>

          {
            language && (
              <LangSelectorsDropdown
                docLocale={docLocale}
                availableLocales={availableLocales}
              />
            )
          }
        </div>
      </div>

      <button
        type="submit"
        class="bg-primary leading-[120%] text-lightgray2 rounded-full py-2.5 px-4"
      >
        {Button_save_text}
      </button>
    </div>
  </form>
</header>

<script>
  declare global {
    interface Window {
      cart: Record<string, Record<string, string | number>>;
    }
  }
</script>

<script is:inline>
  {
    const navbarBg = document.getElementById("navbar-bg"),
      navigation = document.getElementById("navigation"),
      isCartNavbar = navigation.classList.contains("cart-navbar"),
      translationNotFoundNotification = document.querySelector(
        ".translation-not-found-notification"
      );

    const updateNavbarStyles = () => {
      const translationNotFoundNotificationHeight =
        translationNotFoundNotification.getBoundingClientRect().height;

      // fix sticky navbar position if top notification is shown
      navigation.style.top = `${translationNotFoundNotificationHeight}px`;

      if (!isCartNavbar) {
        navbarBg.style.display =
          window.innerWidth < 1280 &&
          (scrollY > 0 || document.body.style.position === "fixed")
            ? "inline-block"
            : "none";
      }
    };

    window.addEventListener("scroll", updateNavbarStyles);
    window.addEventListener("resize", updateNavbarStyles);
  }
</script>

<script>
  declare global {
    interface Window {
      openCart: () => void;
      // disableScrolling & enableScrolling are declared globally to use in cart toggling logic
      enableScrolling: () => void;
      disableScrolling: () => void;
    }
  }

  const query = document.querySelector.bind(document),
    rootElement = query(":root"),
    cart = query("#cart"),
    sidebar = query("#sidebar"),
    navbarBg = query("#navbar-bg"),
    navigation = query("#navigation"),
    cartNavbarBg = query("#cart-navbar-bg"),
    sidebarOpenButton = query("#sidebar-open-btn"),
    sidebarCloseButton = query("#sidebar-close-btn"),
    localizationMenuSm = query("#localization-menu-sm"),
    localizationMenuSmOpenButton = query("#localization-menu-sm-open-btn"),
    localizationMenuSmCloseButton = query("#localization-menu-sm-close-btn"),
    isCartNavbar = !!navigation?.classList.contains("cart-navbar");

  const openCartBtns = document.querySelectorAll(".open-cart-btn"),
    localizationForms =
      document.querySelectorAll<HTMLFormElement>(".localization-form");

  window.disableScrolling = () => {
    const overflowY =
      visualViewport.height < document.body.offsetHeight ? "scroll" : "auto";

    Object.assign(document.body.style, {
      overflowY,
      width: "100%",
      position: "fixed",
      top: `-${window.scrollY}px`,
    });
  };

  window.enableScrolling = () => {
    const scrollYPosition =
      parseInt(document.body.style.top.slice(1, -2)) || window.scrollY;

    Object.assign(document.body.style, {
      width: "auto",
      overflowY: "auto",
      position: "static",
    });

    try {
      window.scrollTo({
        top: scrollYPosition,
        // @ts-ignore
        behavior: "instant",
      });
    } catch (error) {
      const currentRootScrollBehavior = rootElement.style.scrollBehavior;

      rootElement.style.scrollBehavior = "auto";

      window.scrollTo({
        top: scrollYPosition,
        behavior: "auto",
      });

      rootElement.style.scrollBehavior = currentRootScrollBehavior;
    }
  };

  const updateSidebarTopPosition = () => {
    if (navigation) {
      // sidebar.style.top = `${navigation.getBoundingClientRect().bottom}px`;
      sidebar.style.top = `0px`;
    }
  };

  window.addEventListener("resize", updateSidebarTopPosition);

  window.addEventListener("resize", () => {
    if (window.innerWidth > 1279) {
      // enable scrolling only if cart and checkout is not open
      if (cart?.classList.contains("hidden")) window.enableScrolling();

      window.removeEventListener("resize", updateSidebarTopPosition);

      navbarBg && (navbarBg.style.display = "none");
      cartNavbarBg && (cartNavbarBg.style.clipPath = "url(#cart-navbar-curve)");
    } else if (sidebar.style.display === "block") {
      // @ts-ignore
      window.disableScrolling();

      window.addEventListener("resize", updateSidebarTopPosition);

      // navbarBg && (navbarBg.style.display = "inline-block");
      // cartNavbarBg && (cartNavbarBg.style.clipPath = "none");
    }
  });

  openCartBtns.forEach((openCartBtn) => {
    openCartBtn.addEventListener("click", () => {
      window.openCart();
    });
  });

  sidebarOpenButton?.addEventListener("click", () => {
    window.removeEventListener("resize", updateSidebarTopPosition);

    updateSidebarTopPosition();

    sidebar.style.display = "block";
    sidebarOpenButton.style.display = "none";
    sidebarCloseButton.style.display = "block";

    if (isCartNavbar) {
      cartNavbarBg.style.clipPath = "none";
    } else {
      navbarBg.style.display = "inline-block";
    }

    window.disableScrolling();

    window.addEventListener("resize", updateSidebarTopPosition);
  });

  sidebarCloseButton?.addEventListener("click", () => {
    sidebar.style.display = "none";
    sidebarOpenButton.style.display = "block";
    sidebarCloseButton.style.display = "none";

    if (isCartNavbar) {
      cartNavbarBg.style.clipPath = "url(#cart-navbar-curve)";
    } else {
      navbarBg.style.display = "none";
    }

    window.enableScrolling();
  });

  localizationMenuSmOpenButton?.addEventListener("click", () => {
    localizationMenuSm.style.display = "block";

    window.disableScrolling();
  });

  localizationMenuSmCloseButton?.addEventListener("click", () => {
    localizationMenuSm.style.display = "none";

    window.enableScrolling();
  });

  localizationForms.forEach((localizationForm) => {
    localizationForm.addEventListener("submit", (event) => {
      event.preventDefault();

      const { lang: newLocale } = Object.fromEntries(
        [...localizationForm.querySelectorAll("ul")].map((list) => [
          list.dataset.name,
          list.querySelector<HTMLElement>("li[aria-selected=true]").dataset
            .value,
        ])
      );

      // change & redirect to preferred locale
      localStorage.setItem(`locale`, newLocale);

      const localeRegex = new RegExp(
        // @ts-ignore
        `^/(${availableLocales.map((locale) => locale).join("|")})/`
        /* availableLocales is defined in SetPreferredLocale.astro (Layout.astro for 404) */
      );

      let [, locale] = location.pathname.match(localeRegex) ?? [];

      location.href =
        `/${newLocale}/` + location.pathname.slice(locale ? 4 : 0);
    });
  });
</script>

<script is:inline>
  (function () {
    var id = "888e9a2bb7bb4df2ab6ac60cc9fb16cf";
    var ci_search = document.createElement("script");
    ci_search.type = "text/javascript";
    ci_search.async = true;
    ci_search.src = "https://cse.expertrec.com/api/js/ci_common.js?id=" + id;
    var s = document.getElementsByTagName("script")[0];
    s.parentNode.insertBefore(ci_search, s);
  })();
</script>
