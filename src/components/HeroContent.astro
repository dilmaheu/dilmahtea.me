---
import { Picture } from "astro-imagetools/components";

import Hero from "@components/Hero.astro";
import Markdown from "@components/Markdown.astro";
import ClipPathSVG from "@components/ClipPathSVG.astro";
import AuthorInfo from "@components/AuthorInfo.astro";

import CMS from "@store/CMS";
import RecurringImages from "@store/RecurringImages";

const { white_cup } = RecurringImages;

const {
    page,
    plainTitle,
    basicHeader,
    headerBackground,
    headerBackgroundSm,
    link,
    noAuthorImg,
    blobContent,
  } = Astro.props,
  { locale } = page,
  { STRAPI_URL } = import.meta.env;

const recurData = CMS.get("recurringElement", locale),
  ariaLabelRecurData = CMS.get("ariaLabelRecurringElement", locale);
---

{/* Hero Section */}
<Hero {locale} {page} {headerBackground} {headerBackgroundSm}>
  {/* Text Content */}
  <div
    role="banner"
    aria-label={ariaLabelRecurData.Post_intro_text}
    class:list={[
      "wrapper relative z-30 h-full section-in-v-pad-sm",
      !headerBackground &&
        (headerBackgroundSm ? "hero-text-container-sm" : "hero-text-container"),
    ]}
  >
    <div
      class:list={[
        "flex flex-wrap items-center h-full text-white mb-10 sm:mb-0",
        basicHeader
          ? "w-full md:w-2/3 mx-auto justify-center text-center"
          : headerBackground
            ? "md:w-10/12 lg:w-7/12"
            : "sm:w-7/12",
      ]}
    >
      <div class="flex flex-col division-gap">
        <div class="flex flex-col division-in-gap">
          {
            basicHeader && (
              <span class="basic-header-icon">
                <img class="w-full h-full" alt="" {...white_cup} />
              </span>
            )
          }

          <AuthorInfo
            locale={locale}
            authors={page.authors}
            authorImg={noAuthorImg ? false : true}
            createdAt={page.createdAt}
          />

          {
            page.estate_name?.data.length > 0 && (
              <div class="prose-text-sm-dark-link no-pad-mar-child">
                <p>
                  {recurData.product_made_love_from + `\xa0`}

                  {page.estate_name.data.map((estate, index) => (
                    <>
                      <a href={estate.attributes.Meta.URL_slug}>
                        {estate.attributes.Estate_name}
                      </a>

                      {index === page.estate_name.data.length - 1 ? "" : ", "}
                    </>
                  ))}
                </p>
              </div>
            )
          }

          {
            () => {
              const heroTitle = page.Title || page.Estate_name + " ";

              return (
                <div
                  class:list={[
                    "flex flex-col division-in-gap",
                    link && "link-section",
                  ]}
                >
                  <h1 class="text-h1">
                    {link ? (
                      <a class="main-link" href={link} set:text={heroTitle} />
                    ) : (
                      <>{heroTitle}</>
                    )}

                    {!plainTitle && (
                      <span class="icon heading-inline-icon">
                        <img class="w-full h-full" {...white_cup} />
                      </span>
                    )}
                  </h1>

                  {!page.estate_name && (
                    <div class="prose-hero-text">
                      <Markdown>{page.Intro_text}</Markdown>
                    </div>
                  )}
                </div>
              );
            }
          }

          {
            page.Weight_tea && (
              <div class="product-info-default">
                <span>{page.Weight_tea + page.Weight_tea_unit}</span>

                {page.category_tea_range?.data && (
                  <>
                    &#x2022;
                    <a
                      href={
                        page.category_tea_range.data?.attributes.Meta.URL_slug
                      }
                    >
                      {page.category_tea_range.data?.attributes.Title}
                    </a>
                  </>
                )}
              </div>
            )
          }
        </div>

        <div class="flex flex-col division-in-gap">
          {
            page?.Heading_button_text && (
              <a
                href={page.Heading_button_link ?? "#"}
                class:list={[
                  "button-default w-fit",
                  page.type === "productCategory" && "!hidden sm:!flex",
                ]}
              >
                {page.Heading_button_text}
              </a>
            )
          }

          {/* Recipe Header, tea variant & tea-details header section */}
          <slot />

          {
            page.Price_breakdown?.length > 0 && (
              <div class="prose-text-sm-dark-link no-pad-mar-child">
                <p>
                  {recurData.product_each_penny_you_spend + `\xa0`}

                  <a href="#price-breakdown">
                    {recurData.product_check_where_going}
                  </a>
                </p>
              </div>
            )
          }
        </div>
      </div>
    </div>
  </div>

  {/* Blob Image - Desktop View */}
  {
    !basicHeader && !headerBackground && (
      <div class="hero-img-curve-container h-full hidden sm:block absolute z-30">
        <ClipPathSVG
          id="hero-img-curve"
          path="M1,0 S0.345,0.001,0.098,0.001 C-0.013,0.158,-0.007,0.342,0.009,0.606 C0.025,0.888,0.144,1,0.536,1 c0.3,0,0.379,-0.095,0.464,-0.147"
        />

        <div
          class="relative w-full h-full"
          style="clip-path: url(#hero-img-curve);"
        >
          <Picture
            layout="fill"
            preload="avif"
            sizes="clamp(330px, 26.4vw + 150px, 560px)"
            alt={page.Intro_blob.data.attributes.alternativeText}
            src={STRAPI_URL + page.Intro_blob.data.attributes.url}
            attributes={{ link: { media: "(min-width: 640px)" } }}
          />

          {blobContent && (
            <div class="absolute bottom-0 z-10 w-full bg-black/75">
              <slot name="blob-content" />
            </div>
          )}
        </div>
      </div>
    )
  }
</Hero>

{/* Blob Image - Mobile View */}
{
  !basicHeader && !headerBackground && !headerBackgroundSm && (
    <div class="hero-img-sm-container block sm:hidden w-full relative z-20 -mt-20">
      <ClipPathSVG
        id="hero-img-curve-sm"
        path="M1 .074v.904S.906 1 .774 1C.706 1 .637.996.569.993.487.989.405.984.324.986a4.576 4.576 0 0 0-.117.005C.115.996.032 1.001 0 .986V.074C.062.024.147 0 .282 0c.075 0 .165.023.244.043.062.016.118.03.154.03.026 0 .06-.007.097-.014C.861.044.959.025 1 .074"
      />

      <div
        class="relative w-full h-full"
        style="clip-path: url(#hero-img-curve-sm);"
      >
        <Picture
          layout="fill"
          preload="avif"
          alt={page.Intro_blob.data.attributes.alternativeText}
          src={STRAPI_URL + page.Intro_blob.data.attributes.url}
          attributes={{ link: { media: "(max-width: 639.98px)" } }}
        />

        {blobContent && (
          <div class="absolute bottom-0 z-10 w-full bg-black/75">
            <slot name="blob-content-sm" />
          </div>
        )}
      </div>
    </div>
  )
}
