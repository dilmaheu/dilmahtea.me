---
import { Picture } from "astro-imagetools/components";

import Hero from "@components/Hero.astro";
import Markdown from "@components/Markdown.astro";
import ClippedPicture from "@components/ClippedPicture.astro";

import CMS from "@store/CMS";
import RecurringImages from "@store/RecurringImages";

const { white_cup } = RecurringImages;

const { page, plainTitle, headerBackground, headerBackgroundSm } = Astro.props,
  { locale } = page,
  { STRAPI_URL } = import.meta.env;

const recurData = CMS.get("recurringElement", locale),
  ariaLabelRecurData = CMS.get("ariaLabelRecurringElement", locale);
---

{/* Hero Section */}
<Hero {locale} {page} {headerBackground} {headerBackgroundSm}>
  {/* Text Content */}
  <div
    role="banner"
    aria-label={ariaLabelRecurData.Post_intro_text}
    class:list={[
      "wrapper relative z-30 h-full",
      !headerBackground &&
        (headerBackgroundSm ? "hero-text-container-sm" : "hero-text-container"),
    ]}
  >
    <div
      class:list={[
        "flex flex-wrap items-center h-full text-white",
        headerBackground ? "md:w-10/12 lg:w-7/12" : "sm:w-7/12",
      ]}
    >
      <div class="flex flex-col my-[30px] gap-[10px]">
        {
          page.authors && (
            <div class="flex flex-wrap gap-x-2.5 mb-2.5">
              {page.authors.data.map(
                (author, index) =>
                  author.attributes.Profile_picture.data && (
                    <div
                      class:list={[
                        index > 0 && "relative -ml-5",
                        "w-12 h-12 rounded-full overflow-hidden",
                      ]}
                    >
                      <Picture
                        width={48}
                        height={48}
                        loading="eager"
                        alt={
                          author.attributes.Profile_picture.data.attributes
                            .alternativeText
                        }
                        src={
                          STRAPI_URL +
                          author.attributes.Profile_picture.data.attributes.url
                        }
                      />
                    </div>
                  ),
              )}

              <div class="grid content-between">
                <div
                  role="presentation"
                  aria-label={page.authors.data.map(
                    ({ attributes }, i) =>
                      ariaLabelRecurData.Wrote_by_text +
                      (i > 0 ? ", " : " ") +
                      attributes.givenName,
                  )}
                  class="post-author flex flex-wrap font-bold"
                >
                  {page.authors.data.map((author, index) => (
                    <span>
                      {(index > 0 ? ", " : " ") + author.attributes.givenName}
                    </span>
                  ))}
                </div>

                <div class="post-publish-date font-medium">
                  {new Date(page.createdAt).toLocaleString("en-US", {
                    day: "numeric",
                    month: "long",
                  })}
                </div>
              </div>
            </div>
          )
        }

        {
          page.estate_name?.data.length > 0 && (
            <div class="flex flex-wrap items-center mb-[5px]">
              <div class="flex flex-wrap items-center text-lg lg:text-xl leading-[150%]">
                {recurData.product_made_love_from + `\xa0`}

                <div class="flex flex-wrap gap-x-1.5">
                  {page.estate_name.data.map((estate, index) => (
                    <a
                      href={estate.attributes.Meta.URL_slug}
                      class="flex flex-wrap font-bold underline decoration-1 underline-offset-[2px]"
                    >
                      {estate.attributes.Estate_name +
                        (index === page.estate_name.data.length - 1 ? "" : ",")}
                    </a>
                  ))}
                </div>
              </div>
            </div>
          )
        }

        <h1 class="hero-title recoleta font-bold">
          {page.Title || page.Estate_name}

          {" "}

          {
            !plainTitle && page.Title && (
              <span class="icon heading-inline-icon">
                <img class="w-full h-full" alt="" {...white_cup} />
              </span>
            )
          }
        </h1>

        {
          !page.estate_name && (
            <div class="hero-text font-normal">
              <Markdown>{page.Intro_text}</Markdown>
            </div>
          )
        }

        {
          page.Weight_tea && (
            <div class="flex flex-wrap items-center gap-[5px] md:gap-2">
              <div class="text-sm md:text-base font-medium">
                {page.Weight_tea + page.Weight_tea_unit}
              </div>

              {page.category_tea_range?.data && (
                <Fragment>
                  <div class="w-1.5 h-1.5 bg-secondary rounded-full" />

                  <a
                    href={
                      page.category_tea_range.data?.attributes.Meta.URL_slug
                    }
                    class="link-text text-sm md:text-base font-medium"
                  >
                    {page.category_tea_range.data?.attributes.Title}
                  </a>
                </Fragment>
              )}
            </div>
          )
        }

        {
          page?.Heading_button_text && (
            <a
              href={page.Heading_button_link ?? "#"}
              class:list={[
                "text-primary font-bold leading-[120%] bg-white rounded-full",
                "flex w-fit py-[13px] px-[23px] mt-[clamp(15px,1.45vw+4px,25px)]",
              ]}
            >
              {page.Heading_button_text}
            </a>
          )
        }

        {/* Recipe Header, tea variant & tea-details header section */}
        <slot />

        {
          page.Price_breakdown?.length > 0 && (
            <div class="flex items-center">
              <div class="text-base lg:text-lg leading-[150%]">
                {recurData.product_each_penny_you_spend + `\xa0`}

                <a
                  href="#price-breakdown"
                  class="underline decoration-1 underline-offset-[2px] font-semibold"
                >
                  {recurData.product_check_where_going}
                </a>
              </div>
            </div>
          )
        }
      </div>
    </div>
  </div>

  {/* Blob Image - Desktop View */}
  {
    !headerBackground && (
      <div class="hero-img-curve-container h-full hidden sm:block absolute z-30">
        <ClippedPicture
          preload="avif"
          id="hero-img-curve"
          sizes="clamp(330px, 26.4vw + 150px, 560px)"
          alt={page.Intro_blob.data.attributes.alternativeText}
          src={STRAPI_URL + page.Intro_blob.data.attributes.url}
          path="M1,0 S0.345,0.001,0.098,0.001 C-0.013,0.158,-0.007,0.342,0.009,0.606 C0.025,0.888,0.144,1,0.536,1 c0.3,0,0.379,-0.095,0.464,-0.147"
          attributes={{ link: { media: "(min-width: 640px)" } }}
        />
      </div>
    )
  }
</Hero>

{/* Blob Image - Mobile View */}
{
  !headerBackground && !headerBackgroundSm && (
    <div class="hero-img-sm-container block sm:hidden w-full relative z-20 -mt-20">
      <ClippedPicture
        preload="avif"
        id="hero-img-curve-sm"
        alt={page.Intro_blob.data.attributes.alternativeText}
        src={STRAPI_URL + page.Intro_blob.data.attributes.url}
        path="M1 .074v.904S.906 1 .774 1C.706 1 .637.996.569.993.487.989.405.984.324.986a4.576 4.576 0 0 0-.117.005C.115.996.032 1.001 0 .986V.074C.062.024.147 0 .282 0c.075 0 .165.023.244.043.062.016.118.03.154.03.026 0 .06-.007.097-.014C.861.044.959.025 1 .074"
        attributes={{ link: { media: "(max-width: 639.98px)" } }}
      />
    </div>
  )
}
