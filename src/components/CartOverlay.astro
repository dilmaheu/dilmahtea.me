---
import CMS from "@store/CMS";
import { Icon } from "astro-icon";
import ClipPathSVG from "@components/ClipPathSVG.astro";
import DynamicHTML from "@components/DynamicHTML.astro";
import EmptyCartNotification from "./EmptyCartNotification.astro";

declare interface Props {
  page: Record<string, any>;
}

const { page } = Astro.props as Props;

const { locale } = page,
  { data: checkoutInformationData } = CMS.get("checkoutInformation"),
  { URL_slug: checkoutInfoPageSlug } = checkoutInformationData.attributes.Meta,
  checkoutInfoPageLink = "/" + locale + "/" + checkoutInfoPageSlug;

const checkoutRecurData = CMS.get("checkoutRecurringElement", locale);
---

<style lang="scss">
  #cart-overlay-products-container {
    @apply max-w-full w-[375px] sm:w-[528.96px];
  }

  .cart-overlay-heading {
    @apply text-[clamp(2rem,3vw+0.55rem,2.625rem)] leading-[110%];
  }

  .cart-overlay-product-details {
    @apply max-w-full w-[272px];
  }

  .cart-overlay-product-name {
    @apply text-[1.125rem] sm:text-[1.5rem] md:font-bold leading-[120%];
  }

  .cart-overlay-product-amount-tweak-btn:disabled {
    opacity: 30%;
  }

  .cart-overlay-product-amount-input {
    -moz-appearance: textfield;

    &::-webkit-outer-spin-button,
    &::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }
  }

  .subtotal-text {
    @apply text-base sm:text-[1.125rem];
  }

  .cart-overlay-product-price {
    @apply text-[1.75rem] font-bold leading-[120%] sm:leading-[110%];
  }

  #cart-subtotal {
    @apply text-[1.75rem] sm:text-[2rem] font-bold leading-[120%] sm:leading-[110%];
  }

  .shipping-charge-info {
    @apply text-[0.875rem] sm:text-base;
  }
</style>

<div
  id="cart"
  class="hidden fixed z-[1000] flex justify-end w-full h-full top-0 left-0"
>
  <div class="w-full max-w-[2050px] h-full mx-auto bg-[rgba(0,0,0,0.5)]">
    <div
      role="alert"
      tabindex="0"
      aria-label={checkoutRecurData.Aria_label_cart_focus_text}
      id="cart-overlay-products-container"
      class:list={[
        "focus:outline-1 outline-black -outline-offset-1",
        "h-full ml-auto overflow-y-auto text-black bg-secondary",
      ]}
    >
      <ClipPathSVG
        id="cart-overlay-product-image"
        path="M0.516,0.008 C0.36,0.008,0.1,-0.008,0.04,0.082 C-0.021,0.172,0.002,0.495,0.017,0.736 C0.032,0.978,0.182,1,0.528,1 C0.813,1,0.902,0.936,0.974,0.717 C1,0.624,1,0.395,0.946,0.128 C0.897,-0.045,0.735,0.008,0.516,0.008"
      />

      <div id="cart-products" class="h-full p-6 sm:py-9 sm:px-14">
        <div class="flex flex-col gap-5 h-full">
          <div class="flex flex-col gap-5">
            <div class="flex justify-between items-center">
              <h2 class="cart-overlay-heading recoleta font-bold">
                {checkoutRecurData.text_cart}
              </h2>

              <button
                aria-label={checkoutRecurData.Aria_label_cart_close_button_text}
                class="close-cart-btn"
              >
                <Icon name="heroicons-solid:x" class="w-14" />
              </button>
            </div>

            <div class="border border-solid border-primary-light"></div>
          </div>

          <EmptyCartNotification locale={locale} />

          <div
            id="cart-overlay-content"
            class="grow flex flex-col justify-between gap-9"
          >
            <div class="relative grow w-full">
              <div
                role="list"
                aria-label={checkoutRecurData.Aria_label_cart_items_text}
                class="absolute w-full h-full flex flex-col gap-5 overflow-auto"
              >
                <DynamicHTML
                  voidFn={(content, currentScript) => {
                    const cartOverlayContent = document.getElementById(
                        "cart-overlay-content"
                      ),
                      emptyCartNotification = document.getElementById(
                        "empty-cart-notification"
                      );

                    window.addProductToCart = (id) => {
                      const productData = window.cart[id],
                        names = JSON.parse(productData.names),
                        name = names[window.preferredLocale] || names["en"],
                        price = Number(productData.price)
                          .toFixed(2)
                          .replace(".", ",");

                      currentScript.insertAdjacentHTML(
                        "beforebegin",
                        window.replacePlaceholders(content, {
                          ...productData,
                          id,
                          name,
                          price,
                        })
                      );

                      const { previousElementSibling: productElement } =
                          currentScript,
                        quantityDecrementBtn = productElement.querySelector(
                          'button[data-action="decrement"]'
                        ),
                        quantityInput = productElement.querySelector(
                          ".cart-overlay-product-amount-input"
                        );

                      quantityDecrementBtn.disabled =
                        quantityInput.value === "1" ? true : false;
                    };

                    if (Object.keys(window.cart).length === 0) {
                      cartOverlayContent.classList.add("hidden");
                    } else {
                      emptyCartNotification.classList.add("hidden");

                      Object.keys(window.cart).forEach(window.addProductToCart);
                    }
                  }}
                >
                  <div
                    role="listitem"
                    aria-label={`<placeholder name="name"></placeholder>`}
                    class="flex"
                  >
                    <div
                      id={`<placeholder name="id"></placeholder>`}
                      class:list={[
                        "cart-product bg-secondary-light p-4",
                        "flex justify-between items-center gap-3.5 w-full rounded-[10px]",
                      ]}
                    >
                      <img
                        alt=""
                        src={`<placeholder name="image"></placeholder>`}
                        style={[
                          "clip-path: url(#cart-overlay-product-image);",
                          "min-width: 100px; width: 100px; height: 100px;",
                        ].join(" ")}
                      />

                      <div
                        class="cart-overlay-product-details flex flex-col gap-1.5"
                      >
                        <div class="flex justify-between items-center gap-1.5">
                          <h3 class="recoleta cart-overlay-product-name">
                            <placeholder name="name"></placeholder>
                          </h3>

                          <button
                            class="remove-item-btn"
                            aria-label={checkoutRecurData.Aria_label_remove_cart_item_button_text +
                              ` <placeholder name="name"></placeholder>`}
                          >
                            <Icon name="akar-icons:trash-can" class="w-6 h-6" />
                          </button>
                        </div>

                        <div
                          class="flex flex-wrap justify-between items-center gap-1.5"
                        >
                          <div
                            class="flex items-center bg-primary text-secondary rounded-full"
                          >
                            <button
                              data-action="decrement"
                              aria-label={checkoutRecurData.Aria_label_cart_item_quantity_minus_button_text +
                                ` <placeholder name="name"></placeholder>`}
                              class="cart-overlay-product-amount-tweak-btn w-8 h-8 py-1.5 pl-2 pr-1"
                              disabled
                            >
                              <Icon
                                name="akar-icons:minus"
                                class="w-5 h-5 select-none"
                              />
                            </button>

                            <input
                              type="number"
                              aria-label={checkoutRecurData.Aria_label_cart_item_quantity_text +
                                ` <placeholder name="name"></placeholder>`}
                              min="1"
                              value={`<placeholder name="quantity"></placeholder>`}
                              class:list={[
                                "cart-overlay-product-amount-input",
                                "w-9 h-full text-center lg:text-lg bg-primary outline-none",
                              ]}
                              required
                            />

                            <button
                              data-action="increment"
                              aria-label={checkoutRecurData.Aria_label_cart_item_quantity_plus_button_text +
                                ` <placeholder name="name"></placeholder>`}
                              class="cart-overlay-product-amount-tweak-btn w-8 h-8 py-1.5 pl-1 pr-2"
                            >
                              <Icon
                                name="akar-icons:plus"
                                class="w-5 h-5 select-none"
                              />
                            </button>
                          </div>

                          <span
                            class="cart-overlay-product-price recoleta text-black"
                          >
                            â‚¬<placeholder name="price"></placeholder>
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                </DynamicHTML>
              </div>
            </div>

            <div class="flex flex-col gap-5">
              <div>
                <div class="flex justify-between items-center">
                  <span class="subtotal-text font-medium">
                    {checkoutRecurData.text_subtotal}
                  </span>

                  <span id="cart-subtotal" class="recoleta">
                    â‚¬<DynamicHTML htmlFn={() => window.cart.subTotal} />
                  </span>
                </div>

                <div class="shipping-charge-info">
                  {checkoutRecurData.text_shipping_calculated_at_checkout}
                </div>
              </div>

              <a
                id="checkout-info-link"
                href={checkoutInfoPageLink}
                class="capitalize py-4 bg-primary text-white font-bold text-center rounded-[9999px]"
              >
                {checkoutRecurData.text_proceed_to_checkout}
              </a>

              <div class="flex justify-center items-center">
                <button
                  aria-label={checkoutRecurData.Aria_label_cart_close_button_text}
                  class="close-cart-btn text-primary font-bold"
                >
                  {checkoutRecurData.text_continue_shopping}
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  const query: (selector: string) => HTMLElement =
      document.querySelector.bind(document),
    queryAll: (selector: string) => HTMLElement =
      document.querySelectorAll.bind(document),
    id: (id: string) => HTMLElement = document.getElementById.bind(document);

  const cart = id("cart"),
    sidebar = id("sidebar"),
    openCartBtn = id("open-cart-btn"),
    checkoutInfoLink = id("checkout-info-link"),
    cartOverlayContent = id("cart-overlay-content"),
    emptyCartNotification = id("empty-cart-notification"),
    cartOverlayProductsContainer = id("cart-overlay-products-container"),
    closeCartBtnElements = queryAll(".close-cart-btn"),
    { overflowY: prevBodyOverflowYValue } = document.body.style;

  window.openCart = () => {
    cart.classList.remove("hidden");
    cartOverlayProductsContainer.focus();

    window.disableScrolling();

    if (cart.scrollHeight > cart.offsetHeight) {
      document.body.style.overflowY = "hidden";
    }
  };

  const closeCart = () => {
    cart.classList.add("hidden");

    openCartBtn.focus(); // move focus back to cart button

    (!sidebar || sidebar.offsetWidth === 0) && window.enableScrolling();

    document.body.style.overflowY =
      sidebar?.offsetWidth > 0 ? "scroll" : prevBodyOverflowYValue;
  };

  cart?.addEventListener("click", (event) => {
    const target = event.target as HTMLElement;

    if (target === cart.firstElementChild) {
      // close cart if clicked outside of cart content
      closeCart();
    }

    const hasToRemoveItem = !!target.closest(".remove-item-btn");

    if (hasToRemoveItem) {
      const productToRemove = target.closest(".cart-product"),
        { id: productId } = productToRemove;

      delete window.cart[productId];

      if (Object.keys(window.cart).length === 0) {
        cartOverlayContent.classList.add("hidden");
        emptyCartNotification.classList.remove("hidden");
      }

      productToRemove.remove();
    }
  });

  closeCartBtnElements.forEach((closeCartBtnElement) => {
    closeCartBtnElement.addEventListener("click", closeCart);
  });

  checkoutInfoLink?.addEventListener("keydown", (event) => {
    if (event.key === "Tab" && !event.shiftKey) {
      event.preventDefault();

      closeCartBtn.focus();
    }
  });
</script>

<script>
  import tweakAmount from "@utils/client/tweakAmount";

  const cartOverlayProductAmountInputs = document.querySelectorAll(
      ".cart-overlay-product-amount-input"
    ),
    cartOverlayProductAmountTweakBtns = document.querySelectorAll(
      ".cart-overlay-product-amount-tweak-btn"
    );

  function tweakAmountCallback(input) {
    const parentCartProduct = input.closest(".cart-product"),
      productPriceElement = parentCartProduct.querySelector(
        ".cart-overlay-product-price"
      ),
      productId = parentCartProduct.id,
      productData = { ...window.cart[productId] },
      { price, tax, quantity } = productData,
      productPrice = Number(price) / Number(quantity),
      productTax = Number(tax) / Number(quantity),
      updatedQuantity = Number(input.value);

    productData.quantity = updatedQuantity;
    productData.tax = +(updatedQuantity * productTax).toFixed(2);
    productData.price = +(updatedQuantity * productPrice).toFixed(2);

    window.cart[productId] = productData;

    productPriceElement.textContent =
      "â‚¬" + Number(productData.price).toFixed(2).replace(".", ",");
  }

  tweakAmount(
    cartOverlayProductAmountTweakBtns,
    cartOverlayProductAmountInputs,
    tweakAmountCallback
  );

  window.listenToInputEvents = (tweakBtns, input) => {
    tweakAmount(tweakBtns, input, tweakAmountCallback);
  };
</script>
