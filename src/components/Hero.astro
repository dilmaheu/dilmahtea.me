---
import fs from "node:fs";
import path from "node:path";
import extractFrames from "ffmpeg-extract-frames";
import { Picture } from "astro-imagetools/components";
import { path as ffmpegPath } from "@ffmpeg-installer/ffmpeg";

import CMS from "@store/CMS";
import RecurringImages from "@store/RecurringImages";
import localizeCMSImage from "@utils/localizeCMSImage";

import ClipPathSVG from "@components/ClipPathSVG.astro";
import UpdateTopMargin from "@scripts/UpdateTopMargin.astro";

const { hero_background, hero_background_sm } = RecurringImages;

const { page, locale, headerBackground, headerBackgroundSm } = Astro.props,
  { STRAPI_URL } = import.meta.env,
  headerBackgrounds = headerBackground || headerBackgroundSm;

const recurData = CMS.get("recurringElement", locale),
  { Nav_menu: menu } = recurData;

const headerBackgroundImg = page?.Intro_blob?.data?.attributes.url,
  headerBackgroundImgSm = page?.Intro_blob_sm?.data?.attributes.url,
  headerBackgroundVideo = page?.Intro_video?.data?.attributes.url;

function trimLink(link) {
  return link?.replace(/^\/|\/$/g, "");
}

const shouldShowHeaderNavShadow = menu.some(
  ({ Visibility, Link, Sub_menu }) => {
    const currentPageUrl = trimLink(page?.Meta?.URL_slug),
      isActive =
        currentPageUrl === trimLink(Link) ||
        Sub_menu.map(({ Link }) => trimLink(Link)).includes(currentPageUrl);

    return Visibility && Sub_menu.length > 0 && isActive;
  },
);
---

<style lang="scss">
  @use "src/styles/poly-fluid" as *;

  .hero {
    @include poly-fluid-sizing(
      "padding-top",
      (
        639.98px: 131px,
        640px: 70px,
        767px: 77px,
        768px: 135px,
        1024px: 162px,
        1280px: 175px,
      )
    );
  }

  .hero-background {
    aspect-ratio: 16 / 9;

    @media (min-width: 768px) {
      aspect-ratio: 3 / 1;
    }
  }

  .hero-background-sm {
    @apply relative sm:hidden aspect-[6/5];
  }

  .hero-sub-menu-shadow {
    @media (min-width: 768px) {
      @apply absolute top-0 w-full z-30;

      height: poly-fluid-clamp(
        (
          768px: 42px,
          1440px: 51px,
        )
      );
    }
  }
</style>

<ClipPathSVG
  id="hero-background-curve"
  path="M1 0v.939A.27.27 0 0 1 .828 1H.81A1.462 1.462 0 0 1 .648.987C.586.981.522.974.451.974.376.974.312.981.252.988.202.994.156 1 .11 1H.097C.009.996 0 .956 0 .956V0"
/>

<section
  class:list={[
    "hero relative overflow-hidden h-full bg-primary",
    headerBackgrounds ? "pb-0" : "pb-9 sm:pb-0",
  ]}
  style="clip-path: url(#hero-background-curve);"
>
  <UpdateTopMargin />

  <div class="relative h-full">
    <div
      class:list={[
        "hero-sub-menu-shadow nav-bg",
        shouldShowHeaderNavShadow ? "md:!block" : "hidden",
      ]}
    >
    </div>

    {
      (headerBackgrounds || hero_background) && (
        <div
          class:list={[
            "w-full h-full relative z-20",
            headerBackgroundSm ? "hero-background-sm" : "hero-background",
          ]}
        >
          {headerBackgroundVideo ? (
            async () => {
              const localizedVideoURL = await localizeCMSImage(
                headerBackgroundVideo,
              );

              const firstFrameFilePath =
                "./public" +
                localizedVideoURL.replace(
                  path.extname(localizedVideoURL),
                  ".jpg",
                );

              if (!fs.existsSync(firstFrameFilePath)) {
                await extractFrames({
                  input: "./public" + localizedVideoURL,
                  output: firstFrameFilePath,
                  offsets: [0],
                  ffmpegPath,
                });
              }

              const poster = await importImage(
                firstFrameFilePath.slice(1) + "?format=webp&w=1920&quality=10",
              );

              return (
                <Fragment>
                  <link
                    as="image"
                    rel="preload"
                    href={poster}
                    fetchpriority="high"
                  />

                  {async () => (
                    <video
                      class="header-background-video object-cover h-full w-full absolute inset-0"
                      src={await localizeCMSImage(headerBackgroundVideo)}
                      poster={poster}
                      preload="none"
                      autoplay
                      muted
                      loop
                      playsinline
                    />
                  )}
                </Fragment>
              );
            }
          ) : (
            <Picture
              alt=""
              layout="fill"
              preload="avif"
              objectFit="cover"
              objectPosition="left top"
              src={
                STRAPI_URL +
                (headerBackgrounds
                  ? headerBackgroundImgSm || headerBackgroundImg
                  : hero_background_sm?.src || hero_background.src)
              }
              breakpoints={{ maxWidth: 768 }}
              {...(!headerBackgroundSm && {
                artDirectives: [
                  {
                    media: "(min-width: 768px)",
                    src: headerBackground
                      ? STRAPI_URL + headerBackgroundImg
                      : hero_background.src,
                    breakpoints: { minWidth: 768 },
                  },
                ],
              })}
            />
          )}

          <div
            class:list={[
              "absolute inset-0 w-full h-full",
              "bg-gradient-to-b sm:bg-gradient-to-r from-black/50",
              "via-black/40 md:via-black/20 to-black/50 sm:to-black/0",
            ]}
          />
        </div>
      )
    }

    <div
      class:list={[
        (headerBackground || hero_background) && "absolute inset-0",
        headerBackgroundSm && "absolute sm:static inset-0",
      ]}
    >
      <slot />
    </div>
  </div>
</section>
