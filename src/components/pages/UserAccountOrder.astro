---
import CMS from "@store/CMS";
import RecurringImages from "@store/RecurringImages";

import Orders from "@solid/Orders";
import OrdersTimeline from "@solid/OrdersTimeline";

import NoOrders from "@components/NoOrders.astro";
import ClipPathSVG from "@components/ClipPathSVG.astro";

import UserAccountLayout from "@layouts/UserAccountLayout.astro";

const { green_right_arrow } = RecurringImages;

const { page } = Astro.props,
  { Title, locale } = page;

const userAccountRecurData = CMS.get("userAccountRecurringElement", locale);
---

<ClipPathSVG
  id="orders-blob-curve"
  path="M0.517,0.008 C0.36,0.008,0.1,-0.008,0.04,0.082 S0.002,0.495,0.018,0.737 S0.182,1,0.528,1 c0.286,0,0.375,-0.063,0.447,-0.282 c0.031,-0.094,0.047,-0.323,-0.029,-0.591 C0.898,-0.045,0.734,0.008,0.517,0.008"
/>

<UserAccountLayout page={page}>
  <Fragment>
    <!-- <div class="md:hidden w-full">
      <div class="flex justify-end mb-[30px]">
        <button
          id="orders-timeline-sm-open-btn"
          class="font-bold text-primary select-none"
        >
          {userAccountRecurData.text_orders_timeline}
        </button>
      </div>

      <div
        id="orders-timeline-sm"
        class:list={[
          "wrapper flex flex-col gap-[50px] py-[25px]",
          "hidden fixed z-[9999] top-0 left-0 w-screen h-screen bg-secondary",
        ]}
      >
        <div class="flex justify-end">
          <button
            type="button"
            id="orders-timeline-sm-close-btn"
            class="select-none cursor-pointer"
          >
            <svg
              viewBox="0 0 19.2 19.2"
              xmlns="http://www.w3.org/2000/svg"
              class="w-[35px] h-[35px] p-[5px] fill-black"
            >
              <path
                d="M.5.5A1.6,1.6,0,0,1,1.6,0,1.6,1.6,0,0,1,2.7.5L9.6,7.4,16.5.5A1,1,0,0,1,17,.1h1.2l.6.4.3.5a1.3,1.3,0,0,1,.1.6,1.3,1.3,0,0,1-.1.6l-.4.6L11.9,9.6l6.8,6.9a1.6,1.6,0,0,1-1.1,2.7,2.1,2.1,0,0,1-1.1-.4L9.6,11.9,2.7,18.8a2.1,2.1,0,0,1-1.1.4,1.6,1.6,0,0,1-1.1-.5,1.5,1.5,0,0,1,0-2.2L7.3,9.6.5,2.8A1.8,1.8,0,0,1,0,1.6,1.6,1.6,0,0,1,.5.5Z"
              ></path>
            </svg>
          </button>
        </div>

        <div class="grid gap-[25px]">
          <div class="flex items-center justify-between gap-2.5">
            <svg
              id="year-selector-sm-arrow-left"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 8 14"
              class="w-4 h-4 fill-primary cursor-pointer"
            >
              <path
                d="M7.7,13.7a1.1,1.1,0,0,0,.3-.8,1.1,1.1,0,0,0-.3-.7L2.5,7,7.7,1.8A1.1,1.1,0,0,0,8,1,1.1,1.1,0,0,0,7.7.3,1.1,1.1,0,0,0,7,0a1.1,1.1,0,0,0-.8.3L.3,6.2A1.1,1.1,0,0,0,0,7a.9.9,0,0,0,.3.7l5.9,6A1.1,1.1,0,0,0,7,14a1.1,1.1,0,0,0,.7-.3Z"
              ></path>
            </svg>

            <select
              id="year-selector-sm"
              class:list={[
                "grow text-[20px] font-bold",
                "text-primary text-center bg-transparent appearance-none",
              ]}
            >
              <option class="select-none">2021</option>
              <option class="select-none" selected>2022</option>
              <option class="select-none">2023</option>
            </select>

            <svg
              id="year-selector-sm-arrow-right"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 8 14"
              class="w-4 h-4 fill-primary cursor-pointer"
            >
              <path
                d="M.3,13.7a1.1,1.1,0,0,1-.3-.8,1.1,1.1,0,0,1,.3-.7L5.5,7,.3,1.8A1.1,1.1,0,0,1,0,1,1.1,1.1,0,0,1,.3.3,1.1,1.1,0,0,1,1,0a1.1,1.1,0,0,1,.8.3L7.7,6.2A1.1,1.1,0,0,1,8,7a.9.9,0,0,1-.3.7l-5.9,6A1.1,1.1,0,0,1,1,14a1.1,1.1,0,0,1-.7-.3Z"
              ></path>
            </svg>
          </div>

          <div class="month-container">
            <a href="#january">Jan</a>
            <a href="#february">Feb</a>
            <a href="#march">Mar</a>
            <a href="#april">Apr</a>
            <a href="#may">May</a>
            <a href="#june">Jun</a>
            <a href="#july">Jul</a>
            <a href="#august">Aug</a>
            <a href="#september">Sep</a>
            <a href="#october">Oct</a>
            <a href="#november">Nov</a>
            <a href="#december">Dec</a>
          </div>
        </div>
      </div>
    </div> -->

    <div class="md:hidden w-full mb-[25px]">
      <div class="flex justify-end mb-[25px]">
        <button
          id="orders-timeline-sm-toggle-btn"
          class="font-bold text-primary select-none"
        >
          {userAccountRecurData.text_orders_timeline}
        </button>
      </div>

      <div
        id="orders-timeline-sm"
        class="hidden md:!hidden grid gap-[25px] lg:gap-[30px] p-[35px] bg-secondary-light rounded-[10px]"
      >
        <OrdersTimeline client:load />
      </div>
    </div>

    <h1 class="dashboard-sec-title recoleta">
      {Title}
    </h1>

    <section class="grid gap-[25px] sm:gap-[30px]">
      <Orders
        client:load
        recurringImages={RecurringImages}
        {userAccountRecurData}
        isOrdersPage={true}
      >
        <NoOrders slot="noOrdersHTML" {userAccountRecurData} />
      </Orders>
    </section>
  </Fragment>

  <div
    slot="sticky-top-timeline"
    id="orders-timeline-sm-ticky"
    class="grid gap-[25px] lg:gap-[30px]"
  >
    <OrdersTimeline client:load />
  </div>

  <div
    slot="timeline"
    id="orders-timeline"
    class="grid gap-[25px] lg:gap-[30px] p-[35px] bg-secondary-light rounded-[10px]"
  >
    <OrdersTimeline client:load />
  </div>
</UserAccountLayout>

<script is:inline>
  const id = document.getElementById.bind(document),
    ordersTimelineSm = id("orders-timeline-sm"),
    ordersTimelineSmToggleBtn = id("orders-timeline-sm-toggle-btn");

  ordersTimelineSmToggleBtn.addEventListener("click", () => {
    ordersTimelineSm.classList.toggle("hidden");
  });
</script>

<!-- <script is:inline>
  const id = document.getElementById.bind(document),
    dateRangeSm = id("orders-timeline-sm"),
    dateRangeSmOpenBtn = id("orders-timeline-sm-open-btn"),
    dateRangeSmCloseBtn = id("orders-timeline-sm-close-btn");

  let scrollYPosition = 0,
    scrollingDisabled = false;

  window.disableScrolling = () => {
    if (scrollingDisabled) return;

    scrollYPosition = window.scrollY;

    const overflowY =
      window.innerHeight < document.body.scrollHeight ? "scroll" : "auto";

    Object.assign(document.body.style, {
      overflowY,
      width: "100%",
      position: "fixed",
      top: `-${scrollYPosition}px`,
    });

    scrollingDisabled = true;
  };

  window.enableScrolling = () => {
    if (!scrollingDisabled) return;

    Object.assign(document.body.style, {
      width: "auto",
      overflowY: "auto",
      position: "static",
      top: "0",
    });

    window.scrollTo({ top: scrollYPosition });

    scrollingDisabled = false;
  };

  dateRangeSmOpenBtn?.addEventListener("click", () => {
    dateRangeSm.classList.remove("hidden");
    window.disableScrolling();
  });
  dateRangeSmCloseBtn?.addEventListener("click", () => {
    dateRangeSm.classList.add("hidden");
    window.enableScrolling();
  });

  function setupYearSelector(selectorId, leftBtnId, rightBtnId) {
    const yearSelector = id(selectorId);
    const yearSelectorOptions = Array.from(yearSelector?.options);
    const btnLeft = id(leftBtnId);
    const btnRight = id(rightBtnId);

    btnLeft?.addEventListener("click", () =>
      changeSelected(-1, yearSelector, yearSelectorOptions),
    );
    btnRight?.addEventListener("click", () =>
      changeSelected(1, yearSelector, yearSelectorOptions),
    );
  }

  setupYearSelector(
    "year-selector",
    "year-selector-arrow-left",
    "year-selector-arrow-right",
  );
  setupYearSelector(
    "year-selector-sm",
    "year-selector-sm-arrow-left",
    "year-selector-sm-arrow-right",
  );

  function changeSelected(step, selector, options) {
    const currentIndex = options.findIndex(
      (option) => option.value === selector.value,
    );
    const newIndex = Math.min(
      Math.max(0, currentIndex + step),
      options.length - 1,
    );
    selector.value = options[newIndex]?.value;
  }
</script> -->
