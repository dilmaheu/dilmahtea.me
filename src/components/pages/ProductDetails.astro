---
import { Icon } from "astro-icon";
import Markdown from "@astrojs/markdown-component";
import Chapterize from "@components/Chapterize.astro";
import ClipPathSVG from "@components/ClipPathSVG.astro";
import ClippedPicture from "@components/ClippedPicture.astro";
import PostDetailsLayout from "@layouts/PostDetailsLayout.astro";

import RecurringImages from "@store/RecurringImages";

const {
  green_right_arrow,
} = RecurringImages;

const { page, recurData } = Astro.props,
  headingName = recurData.text_content,
  { CF_IMAGE_DELIVERY_ENDPOINT: imgSrcPrefix } = import.meta.env;

const infos = page.product_infos.data.map(({ attributes }) => attributes),
  recipes = page.recipes.data.map(({ attributes }) => attributes),
  { Title: productTitle, Price: productPrice } = page,
  { url: productImgURL } = page.Intro_blob.data.attributes;

const Spent_amount = page.Price_breakdown.map(({ Spent_amount }) => Spent_amount);

let Total_spent_amount = 0;

for (const value of Spent_amount) {
  Total_spent_amount += value;
}
---

<style lang="scss">
  @use "src/styles/colors";

  .cart-adding-form {
    margin-top: clamp(0.625rem, 1vw + 0.35rem, 1.25em);
    row-gap: clamp(0.938rem, 3vw + 0.3rem, 3.125rem);
  }

  input[type="number"].product-amount-input {
    -moz-appearance: textfield;

    &::-webkit-outer-spin-button,
    &::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }
  }

  .product-details img {
    width: 100%;
    max-height: 530px;
    aspect-ratio: 3.26 / 1.77!important;

    @media (min-width: 640px) {
      aspect-ratio: 8 / 5.17!important;
    }
  }

  .product-kindness-impact-container {
    clip-path: url(#product-impact-bg-curve-sm);

    @media (min-width: 768px) {
      clip-path: url(#product-impact-bg-curve);
    }
  }

  .product-kindness-impact-text {
    font-size: clamp(2rem, 3vw + 0.4rem, 3rem);
  }

  .product-details {
    ul,
    ol {
      padding: 0;
    }

    ol {
      list-style: none;
      counter-reset: counter;
    }

    li {
      counter-increment: counter;
    }

    li::before {
      content: counter(counter);
      background: colors.$primary;
      width: 45px;
      height: 45px;
      border-radius: 100%;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      color: #fff;
      margin-right: 20px;
    }
  }
  
  .transparency-items-grid{
    grid-template-columns: clamp(2rem, 3vw + 0.3rem, 2.5rem) auto;
  }

  .transparency-item-icon{
    height: clamp(2rem, 3vw + 0.3rem, 2.5rem);
  }

  button.accordian {
    font-size: clamp(1.125rem, 1.5vw + 0.15rem, 1.5rem);
    transition: all 150ms ease-out 0ms;

    &.is-active {
      @apply font-semibold md:font-bold;
    }
  }

  .accordian-content {
    display: none;
    opacity: 0;
    max-height: 0;
    transition: all 400ms ease-out 0ms;

    &.is-open {
      display: block;
      max-height: 100%;
      opacity: 1;
    }
  }

  .product-info-container {
    border-color: colors.$sticky-dropdown-border-top;
    grid-template-columns: repeat(auto-fit,minmax(0, clamp(100px, 18vw + 20px, 280px)));
  }
</style>

<style lang="scss" is:global>
  #post-details .transparency-item-icon {
    img {
      @apply block mx-auto;

      width: 100%;
      object-fit: contain;
      aspect-ratio: 1 / 1;
      clip-path: none;
    }
  }
</style>

<PostDetailsLayout {page} {recurData} {headingName}>
  
  <form slot="tea-details-header"
    class="cart-adding-form flex flex-wrap justify-between items-center gap-x-[31px] w-full xl:w-2/3"
  >
    <input type="hidden" name="name" value={productTitle} />
    <input type="hidden" name="price" value={productPrice} />
    <input type="hidden" name="image" value={productImgURL} />

    <fieldset>
      <legend
        class="text-sm lg:text-base font-medium leading-[150%] mb-[3px] lg:mb-[5px]"
      >
        {recurData.product_size}
      </legend>

      <div class="flex flex-wrap items-center gap-[15px]">
        <label class="cursor-pointer">
          <input
            type="radio"
            name="size"
            value="100gm"
            class="peer sr-only"
            checked
          />

          <span
            class:list={[
              "inline-block py-[5px] px-5 lg:text-lg lg:font-normal border border-lightgray",
              "rounded-[22px] group peer-checked:bg-[#405658] peer-checked:border-2",
            ]}
          >
            100gm
          </span>
        </label>

        <label class="cursor-pointer">
          <input type="radio" name="size" value="20gm" class="peer sr-only" />

          <span
            class:list={[
              "inline-block py-[5px] px-5 lg:text-lg lg:font-normal border border-lightgray",
              "rounded-[22px] group peer-checked:bg-[#405658] peer-checked:border-2",
            ]}
          >
            20gm
          </span>
        </label>
      </div>
    </fieldset>

    <fieldset>
      <legend
        class="text-sm lg:text-base font-medium leading-[150%] mb-[3px] lg:mb-[5px]"
      >
        {recurData.product_quantity}
      </legend>

      <div
        class="py-[5px] px-[15px] flex items-center font-medium lg:font-normal text-lightgray bg-[#405658] border-2 border-lightgray rounded-full"
      >
        <Icon
          name="akar-icons:minus"
          data-action="decrement"
          class="w-6 h-6 select-none cursor-pointer"
        />

        <input
          type="number"
          name="count"
          value="1"
          min="1"
          max="999"
          class="product-amount-input w-12 h-full text-center lg:text-lg bg-[#405658] outline-none"
        />

        <Icon
          name="akar-icons:plus"
          data-action="increment"
          class="w-6 h-6 select-none cursor-pointer"
        />
      </div>
    </fieldset>

    <button
      class:list={[
        "w-full gap-4 flex justify-center items-center bg-lightgray",
        "py-2.5 px-[52px] mt-auto font-bold text-base text-primary rounded-[40px]",
      ]}
    >
      <Icon name="mi:shopping-cart" class="w-[26px] h-[26px]" />
      {recurData.product_add_cart_for} €{productPrice}
    </button>
  </form>
    
  <form
    slot="cart-adding-form-sm"
    class="cart-adding-form-sm flex justify-between flex-wrap gap-4 mt-8"
  >
    <input type="hidden" name="name" value={productTitle} />
    <input type="hidden" name="price" value={productPrice} />
    <input type="hidden" name="image" value={productImgURL} />

    <fieldset>
      <legend
        class="text-sm lg:text-base font-medium leading-[150%] text-primary mb-[3px] lg:mb-[5px]"
      >
        {recurData.product_size}
      </legend>

      <div class="flex flex-wrap items-center gap-[15px]">
        <label class="cursor-pointer">
          <input
            type="radio"
            name="size"
            value="100gm"
            class="peer sr-only"
            checked
          />

          <span
            class:list={[
              "inline-block py-1.5 lg:py-[7px] px-5 lg:text-lg lg:font-normal border border-primary",
              "rounded-[22px] group peer-checked:bg-lightgray2 peer-checked:border-2",
            ]}
          >
            100gm
          </span>
        </label>

        <label class="cursor-pointer">
          <input type="radio" name="size" value="20gm" class="peer sr-only" />

          <span
            class:list={[
              "inline-block py-1.5 lg:py-[7px] px-5 lg:text-lg lg:font-normal border border-primary",
              "rounded-[22px] group peer-checked:bg-lightgray2 peer-checked:border-2",
            ]}
          >
            20gm
          </span>
        </label>
      </div>
    </fieldset>

    <fieldset>
      <legend
        class="text-sm lg:text-base font-medium leading-[150%] text-primary mb-[3px] lg:mb-[5px]"
      >
        {recurData.product_quantity}
      </legend>

      <div
        class="w-fit py-2.5 px-4 flex items-center text-primary bg-lightgray2 border-2 border-primary rounded-full"
      >
        <Icon
          name="akar-icons:minus"
          data-action="decrement"
          class="w-6 h-6 select-none cursor-pointer"
        />

        <input
          type="number"
          name="count"
          value="1"
          min="1"
          max="999"
          class="product-amount-input w-12 h-full text-center lg:text-lg font-medium lg:font-normal bg-lightgray2 outline-none"
        />

        <Icon
          name="akar-icons:plus"
          data-action="increment"
          class="w-6 h-6 select-none cursor-pointer"
        />
      </div>
    </fieldset>

    <button
      class:list={[
        "w-full gap-4 flex justify-center items-center bg-primary",
        "p-[18px] mt-auto font-bold text-base text-lightgray leading-[19px] rounded-full",
      ]}
    >
      <Icon name="mi:shopping-cart" class="w-8 h-8" />
      {recurData.product_add_cart}
    </button>
  </form>

  

  <div slot="post-details" class="product-details prose content-text">

    <ClipPathSVG
      id="price-breakdown-curve"
      path="M0.526,0.003 C0.368,0.003,0.173,0.042,0.111,0.133 C0.05,0.224,-0.008,0.58,0.013,0.696 C0.034,0.812,0.187,1,0.538,1 C0.826,1,0.917,0.939,0.99,0.718 C1,0.624,1,0.516,0.941,0.247 C0.892,0.073,0.747,0.003,0.526,0.003"
    />

    <Chapterize slot="post-details">
      <Markdown>{page.Block_text}</Markdown>

      { 
        page.Price_breakdown.length > 0 && (
          <div class="chapter">
            <h2 id="price-breakdown">{recurData.product_price_breakdown_title}</h2>
            <p>You’re spending a total of 
              <span class="alice text-[clamp(2rem,3vw+0.55rem,2.625rem)] text-primary">$500</span> 
              in this tea
            </p>

            <div class="flex overflow-hidden w-full my-2.5 md:my-[15px] h-[80px] rounded-[25px]">
              {
                page.Price_breakdown.map((item) => (
                  <div 
                    style={
                      `background-color: ${item.Item_color_code};
                        width:${(item.Spent_amount * 100) / Total_spent_amount}%`
                    }
                    class="h-full""
                  >
                  </div>
                ))
              }
            </div>

            <div class="grid grid-cols-[repeat(auto-fit,minmax(0,250px))] gap-2.5 justify-between">

              {
                page.Price_breakdown.map((item) => (
                  <div class="flex items-center gap-x-2.5">
                    <div
                      style={
                        `background-color: ${item.Item_color_code};
                          clip-path: url(#price-breakdown-curve)`
                      } 
                      class="flex justify-center items-center w-[60px] h-[60px] text-sm lg:text-base font-medium lg:font-normal"
                    >
                      { (item.Spent_amount * 100) / Total_spent_amount }%
                    </div>

                    <div class="grid">
                      <div class="alice text-[clamp(1.75rem,2.2vw+0.15rem,2rem)] text-primary">
                        ${item.Spent_amount}
                      </div>
                      <div class="text-[clamp(0.875rem,1vw+0.25rem,1.125rem)]">{item.Item_name}</div>
                    </div>
                  </div>
                ))
              }
            </div>
          </div>
        )
      }

      { 
        page.Transparency.length > 0 && (
          <div class="chapter">
            <h2 id="price-breakdown">{recurData.product_transparency_title}</h2>
            <p>{page.Transparency_text}</p>

            <div class="grid gap-5">
              {
                page.Transparency.map((item) => (
                  <div class="w-full lg:w-10/12">
                    <div class="grid transparency-items-grid gap-x-2.5">
                      <div class="transparency-item-icon flex items-center">
                        <img
                          src={
                            imgSrcPrefix +
                            item.Transparency_item_icon.data.attributes.provider_metadata
                              .public_id +
                            `/small`
                          }
                          alt=""
                          class="w-full h-full object-contain p-1"
                        />
                      </div>

                      <div class="w-full">

                        <button 
                          class="accordian js-accordian-toggle w-full cursor-pointer text-left leading-[150%]" 
                          aria-expanded="false"
                        >
                          {item.Transparency_item_title}
                        </button>
                        <p class="accordian-content text-lg lg:text-xl italic leading-[150%] m-0" aria-hidden="true">
                          {item.Transparency_item_text}
                        </p>
                      </div>
                    </div>
                  </div>
                ))
              }
            </div>
          </div>
        )
      }

      { 
        page.Impact.length > 0 && (

          <div class="chapter">
            <h2 id="price-breakdown">{recurData.product_impact_title}</h2>
            <p>{page.Impact_text}</p>

            <div class="grid gap-5">
              {
                page.Impact.map((item) => (
                  <div class="w-full lg:w-10/12">
                    <div class="grid transparency-items-grid gap-x-2.5">
                      <div class="transparency-item-icon flex items-center">
                        <img
                          src={
                            imgSrcPrefix +
                            item.Impact_item_icon.data.attributes.provider_metadata
                              .public_id +
                            `/small`
                          }
                          alt=""
                          class="w-full h-full object-contain p-1"
                        />
                      </div>

                      <div class="w-full">

                        <button 
                          class="accordian js-accordian-toggle w-full cursor-pointer text-left leading-[150%]" 
                          aria-expanded="false"
                        >
                          {item.Impact_item_title}
                        </button>
                        <p class="accordian-content text-lg lg:text-xl italic leading-[150%] m-0" aria-hidden="true">
                          {item.Impact_item_text}
                        </p>
                      </div>
                    </div>
                  </div>
                ))
              }
            </div>
          </div>
        )
      }

    </Chapterize>

  </div>

  { 
    infos.length > 0 && (
      <section
        slot="product-info"
        class="wrapper"
      >
        <div
          class:list={[
            "grid gap-[14px] lg:gap-[21px] justify-between md:justify-center", 
            "py-[50px] my-[50px] border-y border-solid product-info-container"
          ]}
        >
          {
            infos.map((info) => (
              <div class="grid gap-[7px] md:gap-3.5 lg:gap-[20px]">
                <div class="h-[clamp(1.125rem,4vw+0.4rem,4rem)] mx-auto">
                  <img 
                    class="w-full h-full" 
                    src={
                      imgSrcPrefix +
                      info.Product_info_icon.data.attributes.provider_metadata
                        .public_id +
                      `/small`
                    }
                    alt=""
                  />
                </div>

                <div class="text-[clamp(0.625rem,2vw+0.1rem,1.5em)] font-medium leading-[150%] text-primary text-center">
                  {info.Product_info_title}
                </div>
              </div>
            ))
          }
            
        </div>
      </section>
    )
  }
    

  {
    recipes.length > 0 && (
      <section class="mb-[50px]" slot="product-kindness-impact">
        <ClipPathSVG
          id="product-impact-bg-curve"
          path="M1,0.055 S0.962,-0.005,0.847,0 C0.729,0.006,0.602,0.049,0.484,0.044 C0.381,0.04,0.239,0.018,0.136,0.028 C0.073,0.034,0,0.055,0,0.055 V0.965 s0.032,0.035,0.156,0.035 c0.061,0,0.136,-0.012,0.193,-0.027 c0.06,-0.016,0.161,-0.017,0.23,-0.017 c0.074,0,0.2,0.037,0.315,0.009 S1,0.894,1,0.894 V0.055"
        />

        <ClipPathSVG
          id="product-impact-bg-curve-sm"
          path="M0.718,0 C0.853,0,0.938,0.021,1,0.064 V0.97 c-0.045,0.046,-0.195,0.006,-0.324,0 c-0.149,-0.007,-0.301,0.03,-0.45,0.03 C0.094,1,0,0.954,0,0.954 V0.064 c0.059,-0.061,0.237,0,0.32,0 S0.583,0,0.718,0"
        />

        <ClipPathSVG
          id="card-curve"
          path="M0.99,0.554 V0.735 c0,0.331,-0.079,0.243,-0.519,0.258 S0.004,1,0.004,0.718 c0,-0.037,0.004,-0.093,0.001,-0.164 C-0.005,0.353,-0.003,0.148,0.042,0.078 C0.102,-0.013,0.358,0.003,0.513,0.003 c0.216,0,0.41,-0.034,0.459,0.141 C1,0.309,0.995,0.441,0.99,0.554"
        />

        <div class="bg-primary product-kindness-impact-container">
          <div class="wrapper py-[70px] md:py-[100px]">
            <div
              class="product-kindness-impact-text alice leading-[110%] md:leading-[115%] text-center"
            >
              <h2>{recurData.product_kindness_impact}</h2>
            </div>

            <div
              role="list"
              aria-label="Kindness Items"
              class:list={[
                "wrapper grid grid-cols-[repeat(1,minmax(0,420px))] md:grid-cols-[repeat(2,minmax(0,580px))]",
                "justify-center gap-[50px] mt-[25px] sm:mt-[27px] md:mt-[27px] lg:mt-[32px]",
              ]}
            >
              {
                recipes.map((post) => (
                  <div
                    role="listitem"
                    aria-label="Kindness Item"
                    class="flex flex-wrap bg-lightgray"
                    style="clip-path: url(#card-curve)"
                  >
                    <a class="block w-full" href={`/` + post.Meta.URL_slug}>
                      <img
                        src={
                          imgSrcPrefix +
                          post.Intro_blob.data.attributes.provider_metadata
                            .public_id +
                          `/small`
                        }
                        alt={post.Intro_blob.data.attributes.alternativeText}
                        class="w-full h-full object-cover"
                      />
                    </a>

                    <div class="recent-post-card-content-container text-primary">
                      {post.authors && (
                        <div>
                          <div class="recent-post-card-author flex flex-wrap font-bold">
                            {post.authors.data.map(({ attributes }, index) => (
                              <a href="#">
                                {`${index > 0 ? ", " : " "}` + attributes.givenName}
                              </a>
                            ))}
                          </div>

                          <div class="post-publish-date">
                            {new Date(post.createdAt).toLocaleString("en-US", {
                              day: "numeric",
                              month: "long",
                            })}
                          </div>
                        </div>
                      )}

                      <div class="recent-post-card-title alice mt-[15px]">
                        <a href={`/` + post.Meta.URL_slug}>{post.Title}</a>

                        <span class="icon recent-post-card-title-icon">
                          <img
                            class="recent-post-card-title-icon"
                            {...green_right_arrow}
                          />
                        </span>
                      </div>
                    </div>
                  </div>
                ))
              }
            </div>
          </div>
        </div>
      </section>
    )
  }
</PostDetailsLayout>

<script defer>
  var accordians = document.querySelectorAll("button.accordian");

  for(var i=0;i<accordians.length;i++){
    accordians[i].onclick=function(){
      this.classList.toggle("is-active");
      this.nextElementSibling.classList.toggle("is-open");
    }
  }
</script>
