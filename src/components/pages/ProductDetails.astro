---
import { Icon } from "astro-icon/components";
import { Schema } from "astro-seo-schema";
import { Picture } from "astro-imagetools/components";

import Markdown from "@components/Markdown.astro";
import Chapterize from "@components/Chapterize.astro";
import ClipPathSVG from "@components/ClipPathSVG.astro";
import RelevantPosts from "@components/RelevantPosts.astro";
import OptimizeContentImages from "@components/OptimizeContentImages.astro";

import CMS from "@store/CMS";
import RecurringImages from "@store/RecurringImages";

import renderMarkdown from "@utils/renderMarkdown";
import localizeCMSImage from "@utils/localizeCMSImage";

import PostDetailsLayout from "@layouts/PostDetailsLayout.astro";
import getPriceIncludingTax from "@utils/shared/getPriceIncludingTax";

const { green_right_arrow } = RecurringImages;

const { page, recurData, ariaLabelRecurData } = Astro.props,
  headingName = recurData.text_chapter,
  { STRAPI_URL } = import.meta.env;

const {
  locale,
  baseProductTitle,
  productVariant,
  productSize,
  availableVariants,
  availableSizes,
  availableFormats,
  Stock_amount: stockAmount,
} = page;

const { SKU: productSKU, Price, VatPercentage } = page,
  [_, productPriceIncludingTax] = getPriceIncludingTax({
    Price,
    VatPercentage,
    quantity: 1,
  });

const infos = page.product_infos.data.map(({ attributes }) => attributes),
  blogs = page.related_blogs?.data?.map(({ attributes }) => attributes),
  recipes = page.related_recipes?.data?.map(({ attributes }) => attributes),
  howTos = page.related_how_tos?.data?.map(({ attributes }) => attributes);

const relevantItems = blogs.concat(recipes, howTos);

const spentAmounts = page.Price_breakdown.map(
  ({ Spent_amount }) => Spent_amount,
);

const totalSpentAmount = spentAmounts.reduce(
  (total, currentValue) => total + currentValue,
  0,
);

const checkoutRecurData = CMS.get("checkoutRecurringElement", locale);
---

<style lang="scss">
  @use "src/styles/colors";

  form {
    *:focus {
      outline: none;
    }
  }

  .product-amount-tweak-btn:disabled {
    opacity: 30%;
  }

  .product-amount-input {
    -moz-appearance: textfield;

    &::-webkit-outer-spin-button,
    &::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }
  }

  .variant-container {
    @apply grid lg:grid-cols-[repeat(auto-fill,minmax(215px,3fr))] 
      gap-[15px] sm:gap-[30px] mt-4 overflow-hidden;

    .variant-content-container {
      @apply relative flex flex-nowrap cursor-pointer w-full h-[70px];

      @media (max-width: 320px) {
        @apply h-full;
      }
    }

    .variant-txt-container {
      @apply flex grow justify-center items-center px-[18px] py-[12px];

      @media (max-width: 320px) {
        @apply w-3/5;
      }
    }

    .variant-img-container {
      @media (max-width: 320px) {
        @apply w-2/5;
      }
    }
  }

  .product-details img {
    width: 100%;
    max-height: 530px;
    aspect-ratio: 3.26 / 1.77 !important;

    @media (min-width: 640px) {
      aspect-ratio: 8 / 5.17 !important;
    }
  }

  .product-details {
    ul,
    ol {
      padding: 0;
    }

    ol {
      list-style: none;
      counter-reset: counter;
    }

    li {
      counter-increment: counter;

      &::before {
        content: counter(counter);

        @apply bg-primary inline-flex items-center justify-center w-[45px] h-[45px] mr-5 text-white rounded-full;
      }
    }
  }

  .accordion-items-grid {
    grid-template-columns: clamp(2rem, 3vw + 0.3rem, 2.5rem) auto;
  }

  .accordion-item-icon {
    height: clamp(2rem, 3vw + 0.3rem, 2.5rem);

    img {
      @apply w-full block mx-auto object-contain;

      clip-path: none;
      aspect-ratio: 1 / 1;
    }
  }

  .accordion-button {
    font-size: clamp(1.125rem, 1.5vw + 0.15rem, 1.5rem);
    transition: all 150ms ease-out 0ms;

    &.is-active {
      @apply font-semibold md:font-bold;
    }
  }

  .accordion-content {
    @apply hidden max-h-0 opacity-0 transition-all;

    &.is-open {
      @apply block max-h-full opacity-100;
    }
  }

  .product-info-container {
    border-color: colors.$primary-light;
    grid-template-columns: repeat(
      auto-fit,
      minmax(0, clamp(100px, 18vw + 20px, 280px))
    );
  }
</style>

<ClipPathSVG
  id="product-category-card-curve"
  path="M0.547,0.01 c0.072,0.003,0.13,0,0.167,0 c0.315,0,0.282,0.03,0.282,0.467 s0.052,0.518,-0.264,0.518 c-0.105,0,-0.154,0,-0.174,-0.001 l-0.011,0.001 h-0.001 c-0.199,0.01,-0.401,0.008,-0.47,-0.037 C-0.013,0.898,0.003,0.642,0.003,0.487 c0,-0.216,-0.034,-0.411,0.14,-0.459 C0.305,-0.018,0.435,0.005,0.547,0.01"
/>

<ClipPathSVG
  id="product-variant-curve"
  path="M0.547,0.01 c0.072,0.003,0.13,0,0.167,0 c0.315,0,0.282,0.03,0.282,0.467 s0.052,0.518,-0.264,0.518 c-0.105,0,-0.154,0,-0.174,-0.001 l-0.011,0.001 h-0.001 c-0.199,0.01,-0.401,0.008,-0.47,-0.037 C-0.013,0.898,0.003,0.642,0.003,0.487 c0,-0.216,-0.034,-0.411,0.14,-0.459 C0.305,-0.018,0.435,0.005,0.547,0.01"
/>

<PostDetailsLayout {page} {recurData} {ariaLabelRecurData} {headingName}>
  <form
    slot="tea-details-header"
    class:list={[
      "cart-adding-form division-gap flex flex-wrap items-center w-full",
      stockAmount > 0 && "xl:w-2/3",
    ]}
  >
    <input type="hidden" name="SKU" value={productSKU} />

    <div class="flex flex-wrap division-in-gap">
      {
        availableVariants.length > 0 && (
          <div class="grid sm:flex flex-wrap items-center division-in-element-gap w-full">
            {availableVariants.map(({ value, variant, variantIcon, link }) => (
              <div>
                <input
                  type="radio"
                  name="tea_variant"
                  id={variant}
                  value={value}
                  data-href={link}
                  checked={value === productVariant}
                  class="peer hidden"
                />

                <label
                  for={variant}
                  class:list={[
                    "inline-block p-[3px] text-white w-full",
                    "peer-checked:bg-white select-none cursor-pointer",
                  ]}
                  style="clip-path: url(#product-variant-curve);"
                >
                  <div
                    class="md:w-[188px] p-1 bg-primary-light"
                    style="clip-path: url(#product-variant-curve);"
                  >
                    <div
                      class:list={[
                        "w-full py-[5px] px-[10px] bg-primary",
                        "flex items-center sm:justify-center division-in-element-gap",
                      ]}
                      style="clip-path: url(#product-variant-curve);"
                    >
                      {variantIcon?.src &&
                        (async () => (
                          <img
                            src={await localizeCMSImage(variantIcon.src)}
                            alt={variantIcon.alt}
                            class="w-[25px] h-[15px]"
                          />
                        ))}

                      <span class="text-sm font-bold leading-[110%]">
                        {variant}
                      </span>
                    </div>
                  </div>
                </label>
              </div>
            ))}
          </div>
        )
      }

      {
        availableSizes.length > 0 && (
          <div class="division-in-element-gap flex flex-wrap items-center">
            <div class="text-b5">{checkoutRecurData.text_size}:</div>

            <div class="flex flex-wrap division-in-element-gap">
              {availableSizes.map(({ value, size, link }) => (
                <div>
                  <input
                    type="radio"
                    name="tea_size"
                    id={size}
                    value={value}
                    data-href={link}
                    checked={value === productSize}
                    class="peer hidden"
                  />

                  <label
                    for={size}
                    class:list={[
                      "peer-checked:bg-primary peer-checked:text-white",
                      "peer-checked:font-bold inline-block py-[10px] px-[20px] text-primary",
                      "rounded-full select-none cursor-pointer border-2 border-white bg-white text-sm font-normal",
                    ]}
                  >
                    {size}
                  </label>
                </div>
              ))}
            </div>
          </div>
        )
      }
    </div>

    <div class="flex flex-wrap division-in-element-gap items-center w-full justify-between">
      {
        stockAmount < 1 && (
          <div class="grid gap-4 w-full">
            <div
              class:list={[
                "flex items-center gap-2 sm:gap-2.5 w-full lg:w-3/5",
                "text-b6 text-black bg-warning-light px:[15px] py:[10px] sm:px-[20px]",
                " sm:py-[15px] border-1 rounded-[10px]",
              ]}
            >
              <Icon
                name="mdi:alert-circle"
                class="inline-flex p-0.5 w-[26px] text-white bg-[#febf21] rounded-full select-none"
              />
              {
                // hide label if in-stock date is in the past or undefined
                new Date(page.In_stock_date).getTime() > new Date().getTime() &&
                  recurData.Item_stock_text.replace(
                    "<in_stock_date>",
                    new Date(page.In_stock_date).toLocaleString("en-GB", {
                      year: "2-digit",
                      month: "short",
                      day: "numeric",
                    }),
                  ) + "."
              }
              {availableFormats.length === 1
                ? recurData.Product_stock_other_formats_text_singular
                : recurData.Product_stock_other_formats_text.replace(
                    "<count>",
                    availableFormats.length,
                  )}
            </div>
          </div>
        )
      }

      <div
        class:list={[
          "flex items-center text-secondary border-2 border-secondary rounded-full",
          stockAmount === 0 ? "bg-slate" : "bg-dark-green",
        ]}
      >
        <button
          data-action="decrement"
          aria-label={ariaLabelRecurData.Product_quantity_minus_button_text}
          class:list={[
            "product-amount-tweak-btn w-7 h-10 py-2.5 pl-2 pr-1 select-none",
            stockAmount === 0 && "cursor-not-allowed",
          ]}
          disabled
        >
          <Icon name="akar-icons:minus" class="w-[14px] h-[14px] select-none" />
        </button>

        <input
          type="number"
          name="quantity"
          aria-label={ariaLabelRecurData.Product_quantity_text}
          min={1}
          max={stockAmount}
          value={1}
          class:list={[
            "product-amount-input w-7 h-10 outline-none",
            "text-primary text-center lg:text-lg bg-secondary",
            stockAmount === 0 && "cursor-not-allowed",
          ]}
          disabled={stockAmount === 0 && "disabled"}
          required
        />

        <button
          data-action="increment"
          aria-label={ariaLabelRecurData.Product_quantity_plus_button_text}
          class:list={[
            "product-amount-tweak-btn w-7 h-10 py-2.5 pl-1 pr-2",
            stockAmount === 0 && "cursor-not-allowed",
          ]}
          disabled={stockAmount === 0 && "disabled"}
        >
          <Icon name="akar-icons:plus" class="w-[14px] h-[14px] select-none" />
        </button>
      </div>

      <div class="grow">
        {
          stockAmount > 0 && (
            <button
              class:list={[
                "w-fit md:w-full p-3 px-5 mt-auto rounded-full",
                "flex justify-center items-center gap-2 md:gap-4",
                "text-sm md:text-base text-primary font-bold bg-white",
              ]}
            >
              <Icon
                name="mi:shopping-cart"
                class="w-5 md:w-[26px] h-5 md:h-[26px]"
              />

              <span class="flex flex-wrap items-center gap-[5px]">
                {checkoutRecurData.text_add_to_cart_for}
                <span class="w-2 h-2 bg-secondary rounded-full" />€
                <output class="product-amount-price">
                  {productPriceIncludingTax.toFixed(2).replace(".", ",")}
                </output>
              </span>
            </button>
          )
        }

        {
          stockAmount === 0 && (
            <button
              disabled
              class:list={[
                "bg-slate text-base font-bold text-white p-3 mt-auto rounded-full",
                "w-full xl:w-2/3 flex justify-center items-center gap-4 cursor-not-allowed",
              ]}
            >
              <Icon name="tabler:shopping-cart-x" class="w-[26px] h-[26px]" />

              <span class="flex flex-wrap items-center gap-[5px]">
                {recurData.Product_sold_out_text}
                <span class="w-2 h-2 bg-secondary rounded-full" />€
                <output class="product-amount-price">
                  {productPriceIncludingTax.toFixed(2).replace(".", ",")}
                </output>
              </span>
            </button>
          )
        }
      </div>
    </div>
  </form>

  <form
    slot="cart-adding-form-sm"
    class="cart-adding-form-sm hidden md:flex flex-wrap justify-between gap-[15px] w-full"
  >
    <input type="hidden" name="SKU" value={productSKU} />

    {
      stockAmount > 0 && (
        <div class="w-full flex flex-wrap gap-2.5 items-center justify-between">
          {availableVariants.length > 0 && (
            <fieldset class="grow">
              <legend
                class:list={[
                  "font-medium leading-[150%]",
                  "text-black-light mb-[5px] outline-none",
                ]}
              >
                {checkoutRecurData.text_variant}:
              </legend>

              <div class="border-2 border-primary overflow-hidden rounded-full">
                <select
                  name="tea_variant"
                  class:list={[
                    "w-full inline-block text-primary leading-[150%]",
                    "py-2.5 pl-2.5 bg-white border-r-[10px] border-transparent",
                  ]}
                >
                  {availableVariants.map(({ value, variant, link }) => (
                    <option
                      value={value}
                      data-href={link}
                      selected={value === productVariant}
                    >
                      {variant}
                    </option>
                  ))}
                </select>
              </div>
            </fieldset>
          )}

          {availableSizes.length > 0 && (
            <fieldset class="grow">
              <legend
                class:list={[
                  "font-medium leading-[150%]",
                  "text-black-light mb-[5px] outline-none",
                ]}
              >
                {checkoutRecurData.text_size}:
              </legend>

              <div class="border-2 border-primary overflow-hidden rounded-full">
                <select
                  name="tea_size"
                  class:list={[
                    "w-full inline-block text-primary leading-[150%]",
                    "py-2.5 pl-2.5 bg-white border-r-[10px] border-transparent",
                  ]}
                >
                  {availableSizes.map(({ value, size, link }) => (
                    <option
                      value={value}
                      data-href={link}
                      selected={value === productSize}
                    >
                      {size}
                    </option>
                  ))}
                </select>
              </div>
            </fieldset>
          )}
        </div>
      )
    }

    <div class="w-full flex flex-wrap justify-between items-center gap-2.5">
      {
        stockAmount > 0 && (
          <div class="w-fit flex items-center text-white p-1 bg-primary rounded-full">
            <button
              data-action="decrement"
              aria-label={ariaLabelRecurData.Product_quantity_minus_button_text}
              class="product-amount-tweak-btn w-10 h-12 py-2.5 pl-3 pr-1"
              disabled
            >
              <Icon name="akar-icons:minus" class="w-6 h-6 select-none" />
            </button>

            <input
              type="number"
              name="quantity"
              aria-label={ariaLabelRecurData.Product_quantity_text}
              min={1}
              max={stockAmount}
              value={1}
              class="product-amount-input w-12 h-full bg-transparent text-center lg:text-lg outline-none"
              required
            />

            <button
              data-action="increment"
              aria-label={ariaLabelRecurData.Product_quantity_plus_button_text}
              class="product-amount-tweak-btn w-10 h-12 py-2.5 pl-1 pr-3"
            >
              <Icon name="akar-icons:plus" class="w-6 h-6 select-none" />
            </button>
          </div>
        )
      }

      <div class="ml-auto grow">
        {
          stockAmount > 0 && (
            <button
              class:list={[
                "w-full flex justify-center items-center gap-4 p-3 mt-auto",
                "bg-primary text-base font-bold text-white leading-[19px] rounded-full",
              ]}
            >
              <Icon name="mi:shopping-cart" class="w-8 h-8" />
              {checkoutRecurData.text_add_to_cart}
            </button>
          )
        }

        {
          stockAmount === 0 && (
            <div
              class:list={[
                "w-full flex justify-center items-center gap-4 p-3 mt-auto rounded-full",
                "bg-slate text-white text-base font-bold leading-[19px] cursor-not-allowed",
              ]}
            >
              <Icon name="mi:shopping-cart" class="w-8 h-8" />
              {recurData.Product_sold_out_text}
            </div>
          )
        }
      </div>
    </div>
  </form>

  {
    stockAmount > 0 && (
      <form
        slot="cart-adding-form-fixed-sm"
        class:list={[
          "cart-adding-form-fixed-sm flex md:hidden items-center",
          "w-full py-[15px] fixed inset-x-0 bottom-0 z-[99]",
          "shadow-[0_4px_10px_rgba(0,0,0,0.6)] bg-secondary",
        ]}
      >
        <input type="hidden" name="SKU" value={productSKU} />

        <div class="wrapper flex items-center gap-4 justify-between">
          <div class="w-fit flex items-center text-white p-1 bg-primary rounded-full">
            <button
              data-action="decrement"
              aria-label={ariaLabelRecurData.Product_quantity_minus_button_text}
              class="product-amount-tweak-btn w-10 h-10 py-2.5 pl-3 pr-1"
              disabled
            >
              <Icon name="akar-icons:minus" class="w-6 h-6 select-none" />
            </button>

            <input
              type="number"
              name="quantity"
              aria-label={ariaLabelRecurData.Product_quantity_text}
              min={1}
              max={stockAmount}
              value={1}
              class="product-amount-input w-10 h-full bg-transparent text-center outline-none"
              required
            />

            <button
              data-action="increment"
              aria-label={ariaLabelRecurData.Product_quantity_plus_button_text}
              class="product-amount-tweak-btn w-10 h-10 py-2.5 pl-1 pr-3"
            >
              <Icon name="akar-icons:plus" class="w-6 h-6 select-none" />
            </button>
          </div>

          <div class="grow">
            <button
              class:list={[
                "w-full flex justify-center items-center gap-3 p-3",
                "bg-primary text-white font-bold text-base rounded-full",
              ]}
            >
              <Icon name="mi:shopping-cart" class="w-[26px] h-[26px]" />
              {checkoutRecurData.text_add_to_cart}
            </button>
          </div>
        </div>
      </form>
    )
  }

  <div slot="post-details" class="product-details prose prose-text">
    <ClipPathSVG
      id="price-breakdown-curve"
      path="M0.526,0.003 C0.368,0.003,0.173,0.042,0.111,0.133 C0.05,0.224,-0.008,0.58,0.013,0.696 C0.034,0.812,0.187,1,0.538,1 C0.826,1,0.917,0.939,0.99,0.718 C1,0.624,1,0.516,0.941,0.247 C0.892,0.073,0.747,0.003,0.526,0.003"
    />

    <Chapterize>
      <Markdown>{page.Intro_text}</Markdown>

      <OptimizeContentImages>
        <Markdown>{page.Block_text}</Markdown>
      </OptimizeContentImages>
    </Chapterize>

    {
      page.Price_breakdown.length > 0 && (
        <div class="chapter">
          <h2
            id="price-breakdown"
            class="recoleta text-[clamp(2rem,3vw+0.55rem,2.625rem)] font-semibold leading-[130%]"
          >
            {recurData.product_price_breakdown_title}
          </h2>

          <div>
            <Markdown>
              {page.Price_breakdown_text.split("<")[0]}
              <span class="recoleta text-[clamp(2rem,3vw+0.55rem,2.625rem)] text-primary">
                {page.Price_breakdown_text.match("<total_spent>") &&
                  `€${totalSpentAmount.toFixed(2).replace(".", ",")}`}
              </span>
              {page.Price_breakdown_text.split(">")[1]}
            </Markdown>
          </div>

          <div class="flex overflow-hidden w-full my-2.5 md:my-[15px] h-[80px] rounded-[25px]">
            {page.Price_breakdown.map((item) => (
              <div
                class="h-full"
                style={`background-color: ${item.Item_color_code}; width:${
                  (item.Spent_amount * 100) / totalSpentAmount
                }%`}
              />
            ))}
          </div>

          <div
            role="list"
            class="grid grid-cols-[repeat(auto-fit,minmax(0,250px))] gap-2.5 justify-between"
          >
            {page.Price_breakdown.map((item) => (
              <div role="listitem" class="flex items-center gap-x-2.5">
                <div
                  style={`background-color: ${item.Item_color_code}; clip-path: url(#price-breakdown-curve)`}
                  class:list={[
                    "w-[62px] h-[62px] flex justify-center items-center",
                    "text-sm lg:text-base font-medium lg:font-normal",
                  ]}
                >
                  {((item.Spent_amount * 100) / totalSpentAmount)
                    .toFixed(2)
                    .replace(".", ",")}
                  %
                </div>

                <div class="grid">
                  <div class="recoleta text-primary text-[clamp(1.75rem,2.2vw+0.15rem,2rem)]">
                    €{item.Spent_amount.toFixed(2).replace(".", ",")}
                  </div>

                  <div class="text-[clamp(0.875rem,1vw+0.25rem,1.125rem)]">
                    {item.Item_name}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )
    }

    {
      page.Transparency.length > 0 && (
        <div class="chapter">
          <h2
            id="transparency"
            class="recoleta text-[clamp(2rem,3vw+0.55rem,2.625rem)] font-semibold leading-[130%]"
          >
            {recurData.product_transparency_title}
          </h2>
          <p>{page.Transparency_text}</p>

          <div class="grid gap-5">
            {page.Transparency.map(async (item, index) => (
              <div class="w-full lg:w-10/12">
                <div class="accordion-items-grid grid gap-x-2.5">
                  <div class="accordion-item-icon flex items-center">
                    <img
                      alt=""
                      src={await localizeCMSImage(
                        item.Transparency_item_icon.data.attributes.url,
                      )}
                      class="w-full h-full object-contain p-1"
                    />
                  </div>

                  <div class="w-full">
                    <button
                      class:list={[
                        "accordion-button w-full cursor-pointer text-left leading-[150%]",
                        index === 0 ? "is-active" : "",
                      ]}
                    >
                      {item.Transparency_item_title}
                    </button>

                    <div
                      class:list={[
                        index === 0 ? "is-open" : "",
                        "accordion-content text-lg lg:text-xl leading-[150%] m-0",
                      ]}
                    >
                      <Markdown>{item.Transparency_item_text}</Markdown>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )
    }

    {
      page.Impact.length > 0 && (
        <div class="chapter">
          <h2
            id="impact"
            class="recoleta text-[clamp(2rem,3vw+0.55rem,2.625rem)] font-semibold leading-[130%]"
          >
            {recurData.product_impact_title}
          </h2>
          <p>{page.Impact_text}</p>

          <div class="grid gap-5">
            {page.Impact.map((item, index) => (
              <div class="w-full lg:w-10/12">
                <div class="grid accordion-items-grid gap-x-2.5">
                  <div class="accordion-item-icon flex items-center">
                    <img
                      alt=""
                      src={
                        STRAPI_URL + item.Impact_item_icon.data.attributes.url
                      }
                      class="w-full h-full object-contain p-1"
                    />
                  </div>

                  <div class="w-full">
                    <button
                      class:list={[
                        index === 0 && "is-active",
                        "accordion-button w-full cursor-pointer text-left leading-[150%]",
                      ]}
                    >
                      {item.Impact_item_title}
                    </button>

                    <div
                      class:list={[
                        index === 0 && "is-open",
                        "accordion-content text-lg lg:text-xl leading-[150%] m-0",
                      ]}
                    >
                      <Markdown>{item.Impact_item_text}</Markdown>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )
    }
  </div>

  {
    infos.length > 0 && (
      <section slot="product-info" class="wrapper">
        <div
          role="list"
          aria-label={ariaLabelRecurData.Product_related_kindness_info_text}
          class:list={[
            "grid justify-between md:justify-center gap-[14px] lg:gap-[21px]",
            "product-info-container py-[50px] my-[50px] border-y border-solid",
          ]}
        >
          {infos.map((info) => (
            <div
              role="listitem"
              class="grid gap-[7px] md:gap-3.5 lg:gap-[20px]"
            >
              <div class="h-[clamp(1.125rem,4vw+0.4rem,4rem)] mx-auto">
                <img
                  class="w-full h-full"
                  alt=""
                  src={STRAPI_URL + info.Product_info_icon.data.attributes.url}
                />
              </div>

              <div
                class:list={[
                  "text-[clamp(0.625rem,2vw+0.1rem,1.5em)]",
                  "font-medium leading-[150%] text-primary text-center",
                ]}
              >
                {info.Product_info_title}
              </div>
            </div>
          ))}
        </div>
      </section>
    )
  }

  {
    relevantItems.length > 0 && (
      <Fragment slot="product-kindness-impact">
        <RelevantPosts
          page={page}
          posts={relevantItems}
          heading={recurData.product_kindness_impact}
          curved_bg={true}
        />
      </Fragment>
    )
  }
</PostDetailsLayout>

<script
  define:vars={{
    baseProductTitle,
    Price,
    VatPercentage,
    productSize,
    productVariant,
  }}
>
  window.productPrice = Price;
  window.productVatPercentage = VatPercentage;

  const preferredProductsVariants = JSON.parse(
    localStorage.getItem("preferredProductsVariants") || "{}",
  );

  preferredProductsVariants[baseProductTitle] = {
    tea_variant: productVariant,
    tea_size: productSize,
  };

  localStorage.setItem(
    "preferredProductsVariants",
    JSON.stringify(preferredProductsVariants),
  );
</script>

<script>
  import tweakAmount from "@utils/client/tweakAmount";
  import getPriceIncludingTax from "@utils/shared/getPriceIncludingTax";

  type ProductData = Record<string, number | string>;

  const query = document.querySelector.bind(document),
    queryAll = document.querySelectorAll.bind(document);

  const accordions = queryAll("button.accordion"),
    cartAddingForms = queryAll(
      ".cart-adding-form, .cart-adding-form-sm, .cart-adding-form-fixed-sm",
    ),
    productFormatInputs = queryAll(
      'input:is([name="tea_variant"], [name="tea_size"])',
    ),
    productAmountPriceOutput = query(".product-amount-price"),
    productAmountInputs = queryAll(".product-amount-input"),
    productAmountTweakBtns = queryAll(".product-amount-tweak-btn");

  accordions.forEach((accordion) => {
    accordion.addEventListener("click", () => {
      accordion.classList.toggle("is-active");
      accordion.nextElementSibling.classList.toggle("is-open");
    });
  });

  productFormatInputs.forEach((input) => {
    input.addEventListener("change", (event) => {
      const target = event.target as HTMLInputElement;

      location.href = target.dataset.href;
    });
  });

  cartAddingForms.forEach((form: HTMLFormElement) => {
    form.addEventListener("change", (event) => {
      const target = event.target as HTMLSelectElement;

      if (["tea_variant", "tea_size"].includes(target.name)) {
        const selectedOption = target.selectedOptions[0];

        location.href = selectedOption.dataset.href;
      }
    });

    form.addEventListener("submit", (event) => {
      event.preventDefault();

      const productData = Object.fromEntries(new FormData(form)) as ProductData,
        { SKU } = productData,
        inCartProduct = window.cart[SKU];

      const quantity =
        Number(productData.quantity) + (inCartProduct?.quantity || 0);

      window.cart[SKU] = { quantity };

      cartAddingForms.forEach((form: HTMLFormElement) => {
        form.reset();

        const decrementBtn = form.querySelector<HTMLButtonElement>(
          "button[data-action='decrement']",
        );

        decrementBtn.disabled = true;
      });

      const [_, productPriceIncludingTax] = getPriceIncludingTax({
        Price: window.productPrice,
        VatPercentage: window.productVatPercentage,
        quantity: 1,
      });

      productAmountPriceOutput.textContent = productPriceIncludingTax
        .toFixed(2)
        .replace(".", ",");

      window.openCart();
    });
  });

  function tweakAmountCallback(input) {
    productAmountInputs.forEach((otherAmountInput: HTMLInputElement) => {
      if (otherAmountInput !== input) {
        otherAmountInput.value = input.value;

        const decrementBtn =
          otherAmountInput.previousElementSibling as HTMLButtonElement;

        decrementBtn.disabled = input.value === "1";
      }
    });

    const quantity = Number(input.value),
      [_, priceIncludingTax] = getPriceIncludingTax({
        Price: window.productPrice,
        VatPercentage: window.productVatPercentage,
        quantity,
      });

    productAmountPriceOutput.textContent = priceIncludingTax
      .toFixed(2)
      .replace(".", ",");
  }

  tweakAmount(productAmountTweakBtns, productAmountInputs, tweakAmountCallback);
</script>

<Schema
  item={{
    "@context": "https://schema.org",
    "@type": "Product",
    name: page.Meta.HTML_Title,
    image: await importImage(STRAPI_URL + page.Intro_blob?.data.attributes.url),
    description: `${renderMarkdown(page.Intro_text).replace(
      /(<([^>]+)>)/gi,
      "",
    )} ${renderMarkdown(page.Block_text).replace(/(<([^>]+)>)/gi, "")}`,
    sku: page.SKU,
    gtin: page.GTIN_Barcode,
    brand: {
      "@type": "Brand",
      name: page.brand?.data?.attributes.Brand_name,
    },
    offers: {
      "@type": "Offer",
      url: Astro.site.origin + Astro.url.pathname + "/",
      itemCondition: "https://schema.org/NewCondition",
      availability: "https://schema.org/InStock",
      price: page.Price,
      priceCurrency: page.Currency,
      priceValidUntil: new Date().toISOString(),
      shippingDetails: {
        "@type": "OfferShippingDetails",
        shippingDestination: {
          "@type": "DefinedRegion",
          addressCountry: "EU",
        },
      },
    },
  }}
/>
