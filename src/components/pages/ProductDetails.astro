---
import { Icon } from "astro-icon";
import { Schema } from "astro-seo-schema";
import Markdown from "@astrojs/markdown-component";
import Chapterize from "@components/Chapterize.astro";
import ClipPathSVG from "@components/ClipPathSVG.astro";
import ClippedPicture from "@components/ClippedPicture.astro";
import PostDetailsLayout from "@layouts/PostDetailsLayout.astro";

import CMS from "@store/CMS";
import RecurringImages from "@store/RecurringImages";

const { green_right_arrow } = RecurringImages;

const { page, recurData } = Astro.props,
  { locale } = page,
  headingName = recurData.text_chapter,
  { ASSETS_URL } = import.meta.env;

const infos = page.product_infos.data.map(({ attributes }) => attributes),
  blogs = page.related_blogs?.data?.map(({ attributes }) => attributes),
  recipes = page.related_recipes?.data?.map(({ attributes }) => attributes),
  how_tos = page.related_how_tos?.data?.map(({ attributes }) => attributes);

const relevant_items = blogs.concat(recipes, how_tos);

const Spent_amount = page.Price_breakdown.map(
  ({ Spent_amount }) => Spent_amount
);

let Total_spent_amount = 0;

for (const value of Spent_amount) {
  Total_spent_amount += value;
}

const productImgURL = ASSETS_URL + page.Intro_blob.data.attributes.url,
  { SKU: productSKU } = page,
  productPrice = Number(page.Price),
  tax = Math.round(productPrice * 9) / 100,
  productPriceIncludingTax = productPrice + tax,
  productNames = JSON.stringify(page.names),
  productSize = page.Weight_tea + page.Weight_tea_unit;

const checkoutRecurData = CMS.get("checkoutRecurringElement", locale);
---

<style lang="scss">
  @use "src/styles/colors";

  .cart-adding-form {
    margin-top: clamp(0.625rem, 1vw + 0.35rem, 1.25em);
    row-gap: clamp(0.938rem, 3vw + 0.3rem, 3.125rem);
  }

  .product-amount-tweak-btn:disabled {
    opacity: 30%;
  }

  .product-amount-input {
    -moz-appearance: textfield;

    &::-webkit-outer-spin-button,
    &::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }
  }

  .product-details img {
    width: 100%;
    max-height: 530px;
    aspect-ratio: 3.26 / 1.77 !important;

    @media (min-width: 640px) {
      aspect-ratio: 8 / 5.17 !important;
    }
  }

  .product-kindness-impact-top {
    clip-path: url(#product-impact-top-curve-sm);

    @media (min-width: 768px) {
      clip-path: url(#product-impact-top-curve);
    }
  }

  .product-kindness-impact-bottom {
    clip-path: url(#product-impact-bottom-curve-sm);

    @media (min-width: 768px) {
      clip-path: url(#product-impact-bottom-curve);
    }
  }

  .product-kindness-impact-img-container {
    width: 100%;
    max-height: 310px;
    aspect-ratio: 4.23 / 3.1;
  }

  .product-kindness-impact-text {
    font-size: clamp(2rem, 3vw + 0.4rem, 3rem);
  }

  .product-details {
    ul,
    ol {
      padding: 0;
    }

    ol {
      list-style: none;
      counter-reset: counter;
    }

    li {
      counter-increment: counter;
    }

    li::before {
      content: counter(counter);
      background: colors.$primary;
      width: 45px;
      height: 45px;
      border-radius: 100%;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      color: #fff;
      margin-right: 20px;
    }
  }

  .transparency-items-grid {
    grid-template-columns: clamp(2rem, 3vw + 0.3rem, 2.5rem) auto;
  }

  .transparency-item-icon {
    height: clamp(2rem, 3vw + 0.3rem, 2.5rem);
  }

  .accordion {
    font-size: clamp(1.125rem, 1.5vw + 0.15rem, 1.5rem);
    transition: all 150ms ease-out 0ms;

    &.is-active {
      @apply font-semibold md:font-bold;
    }
  }

  .accordion-content {
    display: none;
    max-height: 0;
    opacity: 0;
    transition: all 200ms ease-out 0ms;

    &.is-open {
      display: block;
      max-height: 100%;
      opacity: 1;
    }
  }

  .product-info-container {
    border-color: colors.$sticky-dropdown-border-top;
    grid-template-columns: repeat(
      auto-fit,
      minmax(0, clamp(100px, 18vw + 20px, 280px))
    );
  }
</style>

<style lang="scss" is:global>
  #post-details .transparency-item-icon {
    img {
      @apply block mx-auto;

      width: 100%;
      object-fit: contain;
      aspect-ratio: 1 / 1;
      clip-path: none;
    }
  }
</style>

<PostDetailsLayout {page} {recurData} {headingName}>
  <form
    slot="tea-details-header"
    class="cart-adding-form flex flex-wrap justify-between items-center gap-x-[31px] w-full xl:w-2/3"
  >
    <input type="hidden" name="sku" value={productSKU} />
    <input type="hidden" name="names" value={productNames} />
    <input type="hidden" name="image" value={productImgURL} />

    <input type="hidden" name="tax" value={tax} />
    <input type="hidden" name="price" value={productPriceIncludingTax} />

    <fieldset>
      <legend
        class="text-sm lg:text-base font-medium leading-[150%] mb-[3px] lg:mb-[5px]"
      >
        {checkoutRecurData.text_size}:
      </legend>

      <label class="cursor-pointer">
        <input
          type="radio"
          name="size"
          value={productSize}
          class="sr-only"
          checked
          required
        />

        <span
          class:list={[
            "inline-block bg-lightgray text-primary border border-lightgray",
            "py-1.5 lg:py-[7px] px-5 lg:text-lg lg:font-normal rounded-[22px]",
          ]}
        >
          {productSize}
        </span>
      </label>
    </fieldset>

    <div>
      <span
        class="text-sm lg:text-base font-medium leading-[150%] mb-[3px] lg:mb-[5px]"
      >
        {checkoutRecurData.text_quantity}:
      </span>

      <div class="flex items-center text-primary bg-lightgray rounded-full">
        <button
          data-action="decrement"
          class="product-amount-tweak-btn w-10 h-11 py-2.5 pl-3 pr-1"
          disabled
        >
          <Icon name="akar-icons:minus" class="w-6 h-6 select-none" />
        </button>

        <input
          type="number"
          name="quantity"
          aria-label="Quantity"
          min="1"
          value="1"
          class="product-amount-input w-12 h-full text-center lg:text-lg bg-lightgray outline-none"
          required
        />

        <button
          data-action="increment"
          class="product-amount-tweak-btn w-10 h-11 py-2.5 pl-1 pr-3"
        >
          <Icon name="akar-icons:plus" class="w-6 h-6 select-none" />
        </button>
      </div>
    </div>

    <button
      class:list={[
        "w-full gap-4 flex justify-center items-center bg-lightgray",
        "py-2.5 px-[52px] mt-auto font-bold text-base text-primary rounded-[40px]",
      ]}
    >
      <Icon name="mi:shopping-cart" class="w-[26px] h-[26px]" />
      <span>
        {checkoutRecurData.text_add_to_cart_for}
        â‚¬<output class="product-amount-price"
          >{productPriceIncludingTax.toFixed(2).replace(".", ",")}
        </output>
      </span>
    </button>
  </form>

  <form
    slot="cart-adding-form-sm"
    class="cart-adding-form-sm flex justify-between flex-wrap gap-4 mt-8"
  >
    <input type="hidden" name="sku" value={productSKU} />
    <input type="hidden" name="names" value={productNames} />
    <input type="hidden" name="image" value={productImgURL} />

    <input type="hidden" name="tax" value={tax} />
    <input type="hidden" name="price" value={productPriceIncludingTax} />

    <fieldset>
      <legend
        class="text-sm lg:text-base font-medium leading-[150%] text-primary mb-[3px] lg:mb-[5px]"
      >
        {checkoutRecurData.text_size}:
      </legend>

      <label class="cursor-pointer">
        <input
          type="radio"
          name="size"
          value={productSize}
          class="sr-only"
          checked
          required
        />

        <span
          class:list={[
            "inline-block border border-primary bg-primary text-lightgray",
            "py-1.5 lg:py-[7px] px-5 lg:text-lg lg:font-normal rounded-[22px]",
          ]}
        >
          {productSize}
        </span>
      </label>
    </fieldset>

    <div>
      <span
        class="text-sm lg:text-base font-medium leading-[150%] text-primary mb-[3px] lg:mb-[5px]"
      >
        {checkoutRecurData.text_quantity}:
      </span>

      <div
        class="w-fit flex items-center text-lightgray bg-primary rounded-full"
      >
        <button
          data-action="decrement"
          class="product-amount-tweak-btn w-10 h-11 py-2.5 pl-3 pr-1"
          disabled
        >
          <Icon
            name="akar-icons:minus"
            class="w-6 h-6 select-none cursor-pointer"
          />
        </button>

        <input
          type="number"
          name="quantity"
          aria-label="Quantity"
          min="1"
          value="1"
          class="product-amount-input w-12 h-full text-center lg:text-lg bg-primary outline-none"
          required
        />

        <button
          data-action="increment"
          class="product-amount-tweak-btn w-10 h-11 py-2.5 pl-1 pr-3"
        >
          <Icon
            name="akar-icons:plus"
            class="w-6 h-6 select-none cursor-pointer"
          />
        </button>
      </div>
    </div>

    <button
      class:list={[
        "w-full gap-4 flex justify-center items-center bg-primary",
        "p-[18px] mt-auto font-bold text-base text-lightgray leading-[19px] rounded-full",
      ]}
    >
      <Icon name="mi:shopping-cart" class="w-8 h-8" />
      {checkoutRecurData.text_add_to_cart}
    </button>
  </form>

  <div slot="post-details" class="product-details prose content-text">
    <ClipPathSVG
      id="price-breakdown-curve"
      path="M0.526,0.003 C0.368,0.003,0.173,0.042,0.111,0.133 C0.05,0.224,-0.008,0.58,0.013,0.696 C0.034,0.812,0.187,1,0.538,1 C0.826,1,0.917,0.939,0.99,0.718 C1,0.624,1,0.516,0.941,0.247 C0.892,0.073,0.747,0.003,0.526,0.003"
    />

    <Chapterize slot="post-details">
      <Markdown>{page.Intro_text}</Markdown>

      <Markdown>{page.Block_text}</Markdown>
    </Chapterize>

    {
      page.Price_breakdown.length > 0 && (
        <div class="chapter">
          <h2 id="price-breakdown">
            {recurData.product_price_breakdown_title}
          </h2>
          <div>
            <Markdown>
              {page.Price_breakdown_text.split("<")[0]}
              <span class="alice text-[clamp(2rem,3vw+0.55rem,2.625rem)] text-primary">
                {page.Price_breakdown_text.match("<total_spent>") &&
                  `â‚¬${Total_spent_amount.toFixed(2)}`}
              </span>
              {page.Price_breakdown_text.split(">")[1]}
            </Markdown>
          </div>

          <div class="flex overflow-hidden w-full my-2.5 md:my-[15px] h-[80px] rounded-[25px]">
            {page.Price_breakdown.map((item) => (
              <div
                class="h-full"
                style={`background-color: ${item.Item_color_code}; width:${
                  (item.Spent_amount * 100) / Total_spent_amount
                }%`}
              />
            ))}
          </div>

          <div class="grid grid-cols-[repeat(auto-fit,minmax(0,250px))] gap-2.5 justify-between">
            {page.Price_breakdown.map((item) => (
              <div class="flex items-center gap-x-2.5">
                <div
                  style={`background-color: ${item.Item_color_code};
                        clip-path: url(#price-breakdown-curve)`}
                  class="flex justify-center items-center w-[62px] h-[62px] text-sm lg:text-base font-medium lg:font-normal"
                >
                  {((item.Spent_amount * 100) / Total_spent_amount).toFixed(2)}%
                </div>

                <div class="grid">
                  <div class="alice text-[clamp(1.75rem,2.2vw+0.15rem,2rem)] text-primary">
                    â‚¬{item.Spent_amount.toFixed(2)}
                  </div>
                  <div class="text-[clamp(0.875rem,1vw+0.25rem,1.125rem)]">
                    {item.Item_name}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )
    }

    {
      page.Transparency.length > 0 && (
        <div class="chapter">
          <h2 id="transparency">{recurData.product_transparency_title}</h2>
          <p>{page.Transparency_text}</p>

          <div class="grid gap-5">
            {page.Transparency.map((item, index) => (
              <div class="w-full lg:w-10/12">
                <div class="grid transparency-items-grid gap-x-2.5">
                  <div class="transparency-item-icon flex items-center">
                    <img
                      alt=""
                      src={
                        ASSETS_URL +
                        item.Transparency_item_icon.data.attributes.url
                      }
                      class="w-full h-full object-contain p-1"
                    />
                  </div>

                  <div class="w-full">
                    <button
                      class:list={[
                        "accordion w-full cursor-pointer text-left leading-[150%]",
                        index === 0 ? "is-active" : "",
                      ]}
                    >
                      {item.Transparency_item_title}
                    </button>
                    <div
                      class:list={[
                        "accordion-content text-lg lg:text-xl leading-[150%] m-0",
                        index === 0 ? "is-open" : "",
                      ]}
                    >
                      <Markdown>{item.Transparency_item_text}</Markdown>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )
    }

    {
      page.Impact.length > 0 && (
        <div class="chapter">
          <h2 id="impact">{recurData.product_impact_title}</h2>
          <p>{page.Impact_text}</p>

          <div class="grid gap-5">
            {page.Impact.map((item, index) => (
              <div class="w-full lg:w-10/12">
                <div class="grid transparency-items-grid gap-x-2.5">
                  <div class="transparency-item-icon flex items-center">
                    <img
                      alt=""
                      src={
                        ASSETS_URL + item.Impact_item_icon.data.attributes.url
                      }
                      class="w-full h-full object-contain p-1"
                    />
                  </div>

                  <div class="w-full">
                    <button
                      class:list={[
                        "accordion w-full cursor-pointer text-left leading-[150%]",
                        index === 0 ? "is-active" : "",
                      ]}
                    >
                      {item.Impact_item_title}
                    </button>
                    <div
                      class:list={[
                        "accordion-content text-lg lg:text-xl leading-[150%] m-0",
                        index === 0 ? "is-open" : "",
                      ]}
                    >
                      <Markdown>{item.Impact_item_text}</Markdown>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )
    }
  </div>

  {
    infos.length > 0 && (
      <section slot="product-info" class="wrapper">
        <div
          class:list={[
            "grid gap-[14px] lg:gap-[21px] justify-between md:justify-center",
            "py-[50px] my-[50px] border-y border-solid product-info-container",
          ]}
        >
          {infos.map((info) => (
            <div class="grid gap-[7px] md:gap-3.5 lg:gap-[20px]">
              <div class="h-[clamp(1.125rem,4vw+0.4rem,4rem)] mx-auto">
                <img
                  class="w-full h-full"
                  alt=""
                  src={ASSETS_URL + info.Product_info_icon.data.attributes.url}
                />
              </div>

              <div class="text-[clamp(0.625rem,2vw+0.1rem,1.5em)] font-medium leading-[150%] text-primary text-center">
                {info.Product_info_title}
              </div>
            </div>
          ))}
        </div>
      </section>
    )
  }

  {
    relevant_items.length > 0 && (
      <section class="mb-[50px]" slot="product-kindness-impact">
        <ClipPathSVG
          id="product-impact-top-curve"
          path="M1,0.582 V1 H0 V0.582 S0.073,0.358,0.136,0.295 c0.103,-0.103,0.245,0.128,0.348,0.173 C0.602,0.52,0.729,0.058,0.847,0.003 L0.861,0 C0.965,0,1,0.582,1,0.582"
        />

        <ClipPathSVG
          id="product-impact-top-curve-sm"
          path="M1,0.892 V1 H0 V0.892 c0.059,-1.237,0.238,-0.517,0.321,-0.517 S0.499,0.133,0.639,0.033 a0.799,4,0,0,1,0.088,-0.033 C0.84,0,0.951,0.193,1,0.892"
        />

        <ClipPathSVG
          id="product-impact-bottom-curve"
          path="M1,0 c-0.005,0.158,-0.026,0.437,-0.104,0.633 c-0.115,0.288,-0.242,-0.102,-0.316,-0.102 c-0.07,0,-0.171,0.017,-0.231,0.185 c-0.057,0.16,-0.132,0.283,-0.193,0.283 C0.032,1,0,0.633,0,0.633 V0"
        />

        <ClipPathSVG
          id="product-impact-bottom-curve-sm"
          path="M1,0 V0.722 c-0.095,0.278,-0.193,0,-0.324,0 C0.504,0.722,0.369,1,0.22,1 C0.088,1,0,0.382,0,0.382 V0"
        />

        <ClipPathSVG
          id="card-curve"
          path="M0.99,0.554 V0.735 c0,0.331,-0.079,0.243,-0.519,0.258 S0.004,1,0.004,0.718 c0,-0.037,0.004,-0.093,0.001,-0.164 C-0.005,0.353,-0.003,0.148,0.042,0.078 C0.102,-0.013,0.358,0.003,0.513,0.003 c0.216,0,0.41,-0.034,0.459,0.141 C1,0.309,0.995,0.441,0.99,0.554"
        />

        <div>
          <div class="py-8 -mb-1 bg-primary product-kindness-impact-top" />
          <div class="bg-primary">
            <div class="wrapper py-2.5 md:py-[100px]">
              <div class="product-kindness-impact-text alice leading-[110%] md:leading-[115%] text-center">
                <h2>{recurData.product_kindness_impact}</h2>
              </div>

              <div
                role="list"
                aria-label="Kindness Items"
                class:list={[
                  "wrapper grid grid-cols-[repeat(1,minmax(0,420px))] md:grid-cols-[repeat(2,minmax(0,580px))]",
                  "justify-center gap-[50px] mt-[25px] sm:mt-[27px] md:mt-[27px] lg:mt-[32px]",
                ]}
              >
                {relevant_items.map((post) => (
                  <div
                    role="listitem"
                    aria-label="Kindness Item"
                    class="flex flex-wrap bg-lightgray"
                    style="clip-path: url(#card-curve)"
                  >
                    <a
                      class="product-kindness-impact-img-container block w-full"
                      href={`/` + post.Meta.URL_slug}
                    >
                      <img
                        alt={post.Intro_blob.data.attributes.alternativeText}
                        src={ASSETS_URL + post.Intro_blob.data.attributes.url}
                        class="w-full h-full object-cover"
                      />
                    </a>

                    <div class="recent-post-card-content-container text-primary">
                      {post.authors && (
                        <div>
                          <div class="recent-post-card-author flex flex-wrap font-bold">
                            {post.authors.data.map(({ attributes }, index) => (
                              <div>
                                {`${index > 0 ? ", " : " "}` +
                                  attributes.givenName}
                              </div>
                            ))}
                          </div>

                          <div class="post-publish-date">
                            {new Date(post.createdAt).toLocaleString("en-US", {
                              day: "numeric",
                              month: "long",
                            })}
                          </div>
                        </div>
                      )}

                      <div class="recent-post-card-title alice mt-[15px]">
                        <a href={`/` + post.Meta.URL_slug}>{post.Title}</a>

                        <span class="icon recent-post-card-title-icon">
                          <img
                            class="recent-post-card-title-icon"
                            {...green_right_arrow}
                          />
                        </span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
          <div class="py-8 -mt-1 bg-primary product-kindness-impact-bottom" />
        </div>
      </section>
    )
  }
</PostDetailsLayout>

<Schema
  item={{
    "@context": "https://schema.org",
    "@type": "Product",
    name: page.Title,
    image: ASSETS_URL + page.Intro_blob.data.attributes.url,
    description: `${(await Astro.__renderMarkdown(page.Intro_text)).replace(
      /(<([^>]+)>)/gi,
      ""
    )} ${(await Astro.__renderMarkdown(page.Block_text)).replace(
      /(<([^>]+)>)/gi,
      ""
    )}`,
    sku: page.SKU,
    gtin: page.GTIN_Barcode,
    brand: {
      "@type": "Brand",
      name: page.brand?.data?.attributes.Brand_name,
    },
    offers: {
      "@type": "Offer",
      url: `${Astro.site.origin}/${page.locale}/${
        page.Meta.URL_slug === "/" ? "" : page.Meta.URL_slug
      }/`,
      itemCondition: "https://schema.org/NewCondition",
      availability: "https://schema.org/InStock",
      price: page.Price,
      priceCurrency: page.Currency,
      priceValidUntil: new Date(),
      shippingDetails: {
        "@type": "OfferShippingDetails",
        shippingDestination: {
          "@type": "DefinedRegion",
          addressCountry: "EU",
        },
      },
    },
  }}
/>

<script>
  import tweakAmount from "@utils/tweakAmount";

  declare global {
    interface Window {
      cart: Record<string, Record<string, string | number>>;
    }
  }

  type ProductData = Record<string, number | string>;

  const query = document.querySelector.bind(document),
    queryAll = document.querySelectorAll.bind(document),
    accordions = queryAll("button.accordion"),
    cartAddingForms = queryAll(".cart-adding-form, .cart-adding-form-sm"),
    productAmountPriceOutput = document.querySelector(".product-amount-price"),
    productAmountOutput = query(".product-amount-price"),
    productAmountInputs = queryAll(".product-amount-input"),
    productAmountTweakBtns = queryAll(".product-amount-tweak-btn"),
    productPrice = Number(query("input[name='price']")?.value);

  accordions.forEach((accordion) => {
    accordion.addEventListener("click", () => {
      accordion.classList.toggle("is-active");
      accordion.nextElementSibling.classList.toggle("is-open");
    });
  });

  cartAddingForms.forEach((form: HTMLFormElement) => {
    form.onsubmit = (event) => {
      event.preventDefault();

      const productData = Object.fromEntries(new FormData(form)) as ProductData,
        { sku: id, price, tax } = productData as Record<string, string>,
        existingCartProduct = window.cart[id];

      productData.quantity =
        Number(productData.quantity) +
        (existingCartProduct ? (existingCartProduct.quantity as number) : 0);

      productData.price = +(Number(price) * productData.quantity).toFixed(2);
      productData.tax = +(Number(tax) * productData.quantity).toFixed(2);

      window.cart[id] = productData;

      form.reset();

      productAmountPriceOutput.textContent = Number(price)
        .toFixed(2)
        .replace(".", ",");
    };
  });

  function tweakAmountCallback(input) {
    productAmountInputs.forEach((otherAmountInput: HTMLInputElement) => {
      if (otherAmountInput !== input) {
        otherAmountInput.value = input.value;
      }
    });

    productAmountOutput.textContent = (
      Number(input.value) * Number(productPrice)
    )
      .toFixed(2)
      .replace(".", ",");
  }

  tweakAmount(productAmountTweakBtns, productAmountInputs, tweakAmountCallback);
</script>
