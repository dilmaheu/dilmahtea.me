---
import { Icon } from "astro-icon/components";
import { Schema } from "astro-seo-schema";

import Markdown from "@components/Markdown.astro";
import Chapterize from "@components/Chapterize.astro";
import ClipPathSVG from "@components/ClipPathSVG.astro";
import RelevantPosts from "@components/RelevantPosts.astro";
import AdvancedNotification from "@components/AdvancedNotification.astro";
import OptimizeContentImages from "@components/OptimizeContentImages.astro";

import CMS from "@store/CMS";
import RecurringImages from "@store/RecurringImages";

import renderMarkdown from "@utils/renderMarkdown";
import localizeCMSImage from "@utils/localizeCMSImage";

import PostDetailsLayout from "@layouts/PostDetailsLayout.astro";
import getPriceIncludingTax from "@utils/shared/getPriceIncludingTax";

const { page, recurData, ariaLabelRecurData } = Astro.props,
  headingName = recurData.text_chapter,
  { STRAPI_URL } = import.meta.env;

const {
  locale,
  baseProductTitle,
  productVariant,
  productSize,
  availableVariants,
  availableSizes,
  availableFormats,
  Stock_amount: stockAmount,
} = page;

const { SKU: productSKU, Price, VatPercentage } = page,
  [_, productPriceIncludingTax] = getPriceIncludingTax({
    Price,
    VatPercentage,
    quantity: 1,
  });

const infos = page.product_infos.data.map(({ attributes }) => attributes),
  blogs = page.related_blogs?.data?.map(({ attributes }) => attributes),
  recipes = page.related_recipes?.data?.map(({ attributes }) => attributes),
  howTos = page.related_how_tos?.data?.map(({ attributes }) => attributes);

const relevantItems = blogs.concat(recipes, howTos);

const spentAmounts = page.Price_breakdown.map(
  ({ Spent_amount }) => Spent_amount,
);

const totalSpentAmount = spentAmounts.reduce(
  (total, currentValue) => total + currentValue,
  0,
);

const generateId = (inputString) =>
  encodeURIComponent(inputString?.toLowerCase().replaceAll(" ", "-"));
---

<style lang="scss">
  @use "src/styles/colors";
  @use "src/styles/poly-fluid";

  form {
    *:focus {
      outline: none;
    }
  }

  .product-amount-tweak-btn:disabled {
    opacity: 30%;
  }

  .product-amount-input {
    -moz-appearance: textfield;

    &::-webkit-outer-spin-button,
    &::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }
  }

  .product-variant-blob-button-clip {
    clip-path: url(#product-variant-curve);
  }

  .product-details img {
    width: 100%;
    max-height: 530px;
    aspect-ratio: 3.26 / 1.77 !important;

    @media (min-width: 640px) {
      aspect-ratio: 8 / 5.17 !important;
    }
  }

  .accordion-items-grid {
    grid-template-columns: clamp(2rem, 3vw + 0.3rem, 2.5rem) auto;
  }

  .accordion-item-icon {
    height: clamp(2rem, 3vw + 0.3rem, 2.5rem);

    img {
      @apply w-full block mx-auto object-contain;

      clip-path: none;
      aspect-ratio: 1 / 1;
    }
  }

  .accordion-button {
    transition: all 150ms ease-out 0ms;

    &.is-active {
      @apply font-semibold md:font-bold;
    }
  }

  .accordion-content {
    @apply hidden max-h-0 opacity-0 transition-all;

    &.is-open {
      @apply block max-h-full opacity-100;
    }
  }

  .product-info-container {
    grid-template-columns: repeat(
      auto-fit,
      minmax(0, clamp(100px, 18vw + 20px, 280px))
    );

    .product-info-icon-container {
      height: poly-fluid-clamp-primary(25px, 60px);
    }
  }
</style>

<ClipPathSVG
  id="product-category-card-curve"
  path="M0.547,0.01 c0.072,0.003,0.13,0,0.167,0 c0.315,0,0.282,0.03,0.282,0.467 s0.052,0.518,-0.264,0.518 c-0.105,0,-0.154,0,-0.174,-0.001 l-0.011,0.001 h-0.001 c-0.199,0.01,-0.401,0.008,-0.47,-0.037 C-0.013,0.898,0.003,0.642,0.003,0.487 c0,-0.216,-0.034,-0.411,0.14,-0.459 C0.305,-0.018,0.435,0.005,0.547,0.01"
/>

<ClipPathSVG
  id="product-variant-curve"
  path="M0.547,0.01 c0.072,0.003,0.13,0,0.167,0 c0.315,0,0.282,0.03,0.282,0.467 s0.052,0.518,-0.264,0.518 c-0.105,0,-0.154,0,-0.174,-0.001 l-0.011,0.001 h-0.001 c-0.199,0.01,-0.401,0.008,-0.47,-0.037 C-0.013,0.898,0.003,0.642,0.003,0.487 c0,-0.216,-0.034,-0.411,0.14,-0.459 C0.305,-0.018,0.435,0.005,0.547,0.01"
/>

<PostDetailsLayout {page} {recurData} {ariaLabelRecurData} {headingName}>
  <form
    slot="tea-details-header"
    class:list={["cart-adding-form grid division-gap"]}
  >
    <div>
      <input type="hidden" name="SKU" value={productSKU} />

      <div class="flex flex-wrap division-in-gap">
        {
          availableVariants.length > 0 && (
            <div class="grid sm:flex flex-wrap items-center division-in-element-gap w-full">
              {availableVariants.map(
                ({ value, variant, variantIcon, link }) => (
                  <div class="h-[62px]">
                    <input
                      type="radio"
                      name="tea_variant"
                      id={generateId(variant)}
                      value={value}
                      data-href={link}
                      checked={value === productVariant ? "" : undefined}
                      class="peer hidden"
                    />

                    <label
                      for={generateId(variant)}
                      class:list={[
                        "product-variant-blob-button-clip",
                        "inline-block p-[3px] text-white w-full h-full",
                        "peer-checked:bg-white select-none cursor-pointer",
                      ]}
                    >
                      <span
                        class:list={[
                          "product-variant-blob-button-clip",
                          "block md:w-[200px] p-0.5 bg-primary-light h-full",
                        ]}
                      >
                        <span
                          class:list={[
                            "product-variant-blob-button-clip",
                            "division-in-element-gap w-full h-full",
                            "flex items-center py-[5px] px-2.5 bg-primary",
                          ]}
                        >
                          {variantIcon?.src &&
                            (async () => (
                              <img
                                src={await localizeCMSImage(variantIcon.src)}
                                alt={variantIcon.alt}
                                class="w-[25px] h-[15px]"
                              />
                            ))}

                          <span class="text-sm font-bold">{variant}</span>
                        </span>
                      </span>
                    </label>
                  </div>
                ),
              )}
            </div>
          )
        }

        {
          availableSizes.length > 0 && (
            <div class="division-in-element-gap flex flex-wrap items-center">
              <div class="input-label !text-white">{recurData.text_size}:</div>

              <div class="flex flex-wrap division-in-element-gap">
                {availableSizes.map(({ value, size, link }) => (
                  <div>
                    <input
                      type="radio"
                      name="tea_size"
                      id={generateId(size)}
                      value={value}
                      data-href={link}
                      checked={value === productSize ? "" : undefined}
                      class="peer hidden"
                    />

                    <label for={generateId(size)} class="radio-button-default">
                      {size}
                    </label>
                  </div>
                ))}
              </div>
            </div>
          )
        }
      </div>
    </div>

    <div class="division-in-gap grid w-full max-w-[600px]">
      <div class="division-in-gap flex flex-wrap items-center">
        {
          stockAmount > 0 && (
            <div class="button-cart-quantity-default">
              <button
                data-action="decrement"
                aria-label={
                  ariaLabelRecurData.Product_quantity_minus_button_text
                }
                class="product-amount-tweak-btn button-cart-quantity-item"
                disabled
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 24 24"
                  class="button-cart-quantity-icon"
                >
                  <path stroke="currentColor" stroke-width="2" d="M5 12h14" />
                </svg>
              </button>

              <input
                type="number"
                name="quantity"
                aria-label={ariaLabelRecurData.Product_quantity_text}
                min={1}
                max={stockAmount}
                value={1}
                class="product-amount-input"
                required
              />

              <button
                data-action="increment"
                aria-label={
                  ariaLabelRecurData.Product_quantity_plus_button_text
                }
                class="product-amount-tweak-btn button-cart-quantity-item"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 24 24"
                  class="button-cart-quantity-icon"
                >
                  <path
                    stroke="currentColor"
                    stroke-linecap="round"
                    stroke-width="2"
                    d="M12 5v14m-7-7h14"
                  />
                </svg>
              </button>
            </div>
          )
        }

        <button
          class:list={[
            "justify-center grow",
            stockAmount > 0 ? "button-cart-default" : "button-cart-disabled",
          ]}
          disabled={stockAmount < 1}
        >
          <Icon name="mi:shopping-cart" class="cart-icon" />

          <span class="text-container">
            {
              stockAmount > 0
                ? recurData.text_add_to_cart_for
                : recurData.text_sold_out
            }
            <span>&#x2022;</span>€
            <output class="product-amount-price">
              {productPriceIncludingTax.toFixed(2).replace(".", ",")}
            </output>
          </span>
        </button>
      </div>

      {
        stockAmount < 1 &&
          availableFormats.length > 0 &&
          (() => {
            let stockText = "";
            if (page.In_stock_date) {
              stockText =
                new Date(page.In_stock_date).getTime() > new Date().getTime() &&
                recurData.Item_stock_text.replace(
                  "<in_stock_date>",
                  new Date(page.In_stock_date).toLocaleString("en-GB", {
                    year: "2-digit",
                    month: "short",
                    day: "numeric",
                  }),
                ) + ".";
            }

            const availableFormatsText =
              availableFormats.length === 1
                ? recurData.Product_stock_other_formats_text_singular
                : recurData.Product_stock_other_formats_text.replace(
                    "<count>",
                    availableFormats.length,
                  );

            return (
              <AdvancedNotification
                Title={stockText + availableFormatsText}
                Type="Warning"
                Bordered={true}
                Rounded={true}
              />
            );
          })
      }
    </div>
  </form>

  <form
    slot="cart-adding-form-sm"
    class="cart-adding-form-sm hidden md:flex flex-wrap division-in-gap"
  >
    <input type="hidden" name="SKU" value={productSKU} />

    {
      stockAmount > 0 && (
        <div class="w-full flex flex-wrap division-in-element-gap items-center">
          {availableVariants.length > 0 && (
            <label class="grid division-in-element-gap grow">
              <span class="input-label">{recurData.text_variant}:</span>

              <select
                name="tea_variant"
                class="selector-default-bordered !w-full"
              >
                {availableVariants.map(({ value, variant, link }) => (
                  <option
                    value={value}
                    data-href={link}
                    selected={value === productVariant ? "" : undefined}
                  >
                    {variant}
                  </option>
                ))}
              </select>
            </label>
          )}

          {availableSizes.length > 0 && (
            <label class="grid division-in-element-gap grow">
              <span class="input-label">{recurData.text_size}:</span>

              <select name="tea_size" class="selector-default-bordered !w-full">
                {availableSizes.map(({ value, size, link }) => (
                  <option
                    value={value}
                    data-href={link}
                    selected={value === productSize ? "" : undefined}
                  >
                    {size}
                  </option>
                ))}
              </select>
            </label>
          )}
        </div>
      )
    }

    <div
      class="w-full flex flex-wrap justify-between items-center division-in-element-gap"
    >
      {
        stockAmount > 0 && (
          <div class="button-cart-quantity-primary">
            <button
              data-action="decrement"
              aria-label={ariaLabelRecurData.Product_quantity_minus_button_text}
              class="product-amount-tweak-btn button-cart-quantity-item"
              disabled
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                class="button-cart-quantity-icon"
              >
                <path
                  stroke="currentColor"
                  stroke-linecap="round"
                  stroke-width="2"
                  d="M5 12h14"
                />
              </svg>
            </button>

            <input
              type="number"
              name="quantity"
              aria-label={ariaLabelRecurData.Product_quantity_text}
              min={1}
              max={stockAmount}
              value={1}
              class="product-amount-input"
              required
            />

            <button
              data-action="increment"
              aria-label={ariaLabelRecurData.Product_quantity_plus_button_text}
              class="product-amount-tweak-btn button-cart-quantity-item"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                class="button-cart-quantity-icon"
              >
                <path
                  stroke="currentColor"
                  stroke-linecap="round"
                  stroke-width="2"
                  d="M12 5v14m-7-7h14"
                />
              </svg>
            </button>
          </div>
        )
      }

      <button
        class:list={[
          "justify-center grow",
          stockAmount > 0 ? "button-cart-primary" : "button-cart-disabled",
        ]}
        disabled={stockAmount < 1}
      >
        <Icon name="mi:shopping-cart" class="cart-icon" />

        <span class="text-container">
          <span class="hidden xl:block"
            >{
              stockAmount > 0
                ? recurData.text_add_to_cart
                : recurData.text_sold_out
            }</span
          >
          <span class="block xl:hidden"
            >{
              stockAmount > 0 ? recurData.text_add : recurData.text_sold_out
            }</span
          >
          <span>&#x2022;</span>€
          <output class="product-amount-price-sm">
            {productPriceIncludingTax.toFixed(2).replace(".", ",")}
          </output>
        </span>
      </button>
    </div>
  </form>

  {
    stockAmount > 0 && (
      <form
        slot="cart-adding-form-fixed-sm"
        class:list={[
          "cart-adding-form-fixed-sm flex md:hidden items-center",
          "w-full py-[15px] fixed inset-x-0 bottom-0 z-[99]",
          "shadow-[0_4px_10px_rgba(0,0,0,0.6)] bg-secondary",
        ]}
      >
        <input type="hidden" name="SKU" value={productSKU} />

        <div class="wrapper flex items-center division-in-gap justify-between">
          <div class="button-cart-quantity-primary">
            <button
              data-action="decrement"
              aria-label={ariaLabelRecurData.Product_quantity_minus_button_text}
              class="product-amount-tweak-btn button-cart-quantity-item"
              disabled
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                class="button-cart-quantity-icon"
              >
                <path
                  stroke="currentColor"
                  stroke-linecap="round"
                  stroke-width="2"
                  d="M5 12h14"
                />
              </svg>
            </button>

            <input
              type="number"
              name="quantity"
              aria-label={ariaLabelRecurData.Product_quantity_text}
              min={1}
              max={stockAmount}
              value={1}
              class="product-amount-input"
              required
            />

            <button
              data-action="increment"
              aria-label={ariaLabelRecurData.Product_quantity_plus_button_text}
              class="product-amount-tweak-btn button-cart-quantity-item"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                class="button-cart-quantity-icon"
              >
                <path
                  stroke="currentColor"
                  stroke-linecap="round"
                  stroke-width="2"
                  d="M12 5v14m-7-7h14"
                />
              </svg>
            </button>
          </div>

          <button class="button-cart-primary justify-center grow">
            <Icon name="mi:shopping-cart" class="cart-icon" />

            <span class="text-container">
              {recurData.text_add}
              <span>&#x2022;</span>€
              <output class="product-amount-price-sm-fixed">
                {productPriceIncludingTax.toFixed(2).replace(".", ",")}
              </output>
            </span>
          </button>
        </div>
      </form>
    )
  }

  <div slot="post-details" class="product-details prose-text">
    <ClipPathSVG
      id="price-breakdown-curve"
      path="M0.526,0.003 C0.368,0.003,0.173,0.042,0.111,0.133 C0.05,0.224,-0.008,0.58,0.013,0.696 C0.034,0.812,0.187,1,0.538,1 C0.826,1,0.917,0.939,0.99,0.718 C1,0.624,1,0.516,0.941,0.247 C0.892,0.073,0.747,0.003,0.526,0.003"
    />

    <Chapterize>
      <Markdown>{page.Intro_text}</Markdown>

      <OptimizeContentImages>
        <Markdown>{page.Block_text}</Markdown>
      </OptimizeContentImages>
    </Chapterize>

    {
      page.Price_breakdown.length > 0 && (
        <div class="chapter">
          <h2 id="price-breakdown">
            {recurData.product_price_breakdown_title}
          </h2>

          <div class="grid division-in-gap">
            <div>
              <Markdown>
                {page.Price_breakdown_text.split("<")[0]}
                <span class="text-h3 text-primary">
                  {page.Price_breakdown_text.match("<total_spent>") &&
                    ` €${totalSpentAmount.toFixed(2).replace(".", ",")} `}
                </span>
                {page.Price_breakdown_text.split(">")[1]}
              </Markdown>
            </div>

            <div class="flex overflow-hidden w-full h-[80px] rounded-[25px]">
              {page.Price_breakdown.map((item) => (
                <div
                  class="h-full"
                  style={`background-color: ${item.Item_color_code}; width:${
                    (item.Spent_amount * 100) / totalSpentAmount
                  }%`}
                />
              ))}
            </div>

            <div
              role="list"
              class="grid grid-gap grid-cols-[repeat(auto-fit,minmax(0,250px))] justify-between"
            >
              {page.Price_breakdown.map((item) => (
                <div role="listitem" class="flex items-center gap-x-2.5">
                  <div
                    style={`background-color: ${item.Item_color_code}; clip-path: url(#price-breakdown-curve)`}
                    class="size-[60px] flex justify-center items-center text-b6"
                  >
                    {((item.Spent_amount * 100) / totalSpentAmount)
                      .toFixed(2)
                      .replace(".", ",")}
                    %
                  </div>

                  <div class="grid">
                    <div class="text-h3 !font-normal text-primary">
                      €{item.Spent_amount.toFixed(2).replace(".", ",")}
                    </div>

                    <div class="text-b5-sm">{item.Item_name}</div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )
    }

    {
      page.Transparency.length > 0 && (
        <div class="chapter">
          <h2 id="transparency">{recurData.product_transparency_title}</h2>
          <p>{page.Transparency_text}</p>

          <div class="grid gap-5">
            {page.Transparency.map(async (item, index) => (
              <div class="w-full lg:w-10/12">
                <div class="accordion-items-grid grid gap-x-2.5">
                  <div class="accordion-item-icon flex items-center">
                    <img
                      alt=""
                      src={await localizeCMSImage(
                        item.Transparency_item_icon.data.attributes.url,
                      )}
                      class="w-full h-full object-contain p-1"
                    />
                  </div>

                  <div class="w-full">
                    <button
                      class:list={[
                        "accordion-button w-full cursor-pointer text-b3 text-left",
                        index === 0 ? "is-active" : "",
                      ]}
                    >
                      {item.Transparency_item_title}
                    </button>

                    <div
                      class:list={[
                        index === 0 ? "is-open" : "",
                        "accordion-content text-b4 m-0",
                      ]}
                    >
                      <Markdown>{item.Transparency_item_text}</Markdown>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )
    }

    {
      page.Impact.length > 0 && (
        <div class="chapter">
          <h2 id="impact">{recurData.product_impact_title}</h2>
          <p>{page.Impact_text}</p>

          <div class="grid gap-5">
            {page.Impact.map((item, index) => (
              <div class="w-full lg:w-10/12">
                <div class="grid accordion-items-grid gap-x-2.5">
                  <div class="accordion-item-icon flex items-center">
                    <img
                      alt=""
                      src={
                        STRAPI_URL + item.Impact_item_icon.data.attributes.url
                      }
                      class="w-full h-full object-contain p-1"
                    />
                  </div>

                  <div class="w-full">
                    <button
                      class:list={[
                        index === 0 && "is-active",
                        "accordion-button w-full cursor-pointer text-b3",
                      ]}
                    >
                      {item.Impact_item_title}
                    </button>

                    <div
                      class:list={[
                        index === 0 && "is-open",
                        "accordion-content b4 m-0",
                      ]}
                    >
                      <Markdown>{item.Impact_item_text}</Markdown>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )
    }
  </div>

  {
    infos.length > 0 && (
      <section slot="product-info" class="wrapper">
        <div
          role="list"
          aria-label={ariaLabelRecurData.Product_related_kindness_info_text}
          class:list={[
            "product-info-container section-in-v-pad-sm grid-gap grid",
            "justify-between md:justify-center border-y border-primary-lightest",
          ]}
        >
          {infos.map((info) => (
            <div role="listitem" class="division-in-element-gap grid">
              <div class="product-info-icon-container mx-auto">
                <img
                  class="w-full h-full"
                  alt=""
                  src={STRAPI_URL + info.Product_info_icon.data.attributes.url}
                />
              </div>

              <div class="text-b3">{info.Product_info_title}</div>
            </div>
          ))}
        </div>
      </section>
    )
  }

  {
    relevantItems.length > 0 && (
      <Fragment slot="product-kindness-impact">
        <RelevantPosts
          page={page}
          posts={relevantItems}
          heading={recurData.product_kindness_impact}
          curved_bg={true}
        />
      </Fragment>
    )
  }
</PostDetailsLayout>

<script
  define:vars={{
    baseProductTitle,
    Price,
    VatPercentage,
    productSize,
    productVariant,
  }}
>
  window.productPrice = Price;
  window.productVatPercentage = VatPercentage;

  const preferredProductsVariants = JSON.parse(
    localStorage.getItem("preferredProductsVariants") || "{}",
  );

  preferredProductsVariants[baseProductTitle] = {
    tea_variant: productVariant,
    tea_size: productSize,
  };

  localStorage.setItem(
    "preferredProductsVariants",
    JSON.stringify(preferredProductsVariants),
  );
</script>

<script>
  import tweakAmount from "@utils/client/tweakAmount";
  import getPriceIncludingTax from "@utils/shared/getPriceIncludingTax";

  type ProductData = Record<string, number | string>;

  const query = document.querySelector.bind(document),
    queryAll = document.querySelectorAll.bind(document);

  const accordions = queryAll("button.accordion"),
    cartAddingForms = queryAll(
      ".cart-adding-form, .cart-adding-form-sm, .cart-adding-form-fixed-sm",
    ),
    productFormatInputs = queryAll(
      'input:is([name="tea_variant"], [name="tea_size"])',
    ),
    productAmountPriceOutput = query(".product-amount-price"),
    productAmountPriceOutputSm = query(".product-amount-price-sm"),
    productAmountPriceOutputSmFixed = query(".product-amount-price-sm-fixed"),
    productAmountInputs = queryAll(".product-amount-input"),
    productAmountTweakBtns = queryAll(".product-amount-tweak-btn");

  const formatPrice = (price) => price?.toFixed(2)?.replace(".", ",");

  accordions.forEach((accordion) => {
    accordion.addEventListener("click", () => {
      accordion.classList.toggle("is-active");
      accordion.nextElementSibling.classList.toggle("is-open");
    });
  });

  productFormatInputs.forEach((input) => {
    input.addEventListener("change", (event) => {
      const target = event.target as HTMLInputElement;

      location.href = target.dataset.href;
    });
  });

  cartAddingForms.forEach((form: HTMLFormElement) => {
    form.addEventListener("change", (event) => {
      const target = event.target as HTMLSelectElement;

      if (["tea_variant", "tea_size"].includes(target.name)) {
        const selectedOption = target.selectedOptions[0];

        location.href = selectedOption.dataset.href;
      }
    });

    form.addEventListener("submit", (event) => {
      event.preventDefault();

      const productData = Object.fromEntries(new FormData(form)) as ProductData,
        { SKU } = productData,
        inCartProduct = window.cart[SKU];

      const quantity =
        Number(productData.quantity) + (inCartProduct?.quantity || 0);

      window.cart[SKU] = { quantity };

      cartAddingForms.forEach((form: HTMLFormElement) => {
        form.reset();

        const decrementBtn = form.querySelector<HTMLButtonElement>(
          "button[data-action='decrement']",
        );

        decrementBtn.disabled = true;
      });

      const [_, priceIncludingTax] = getPriceIncludingTax({
        Price: window.productPrice,
        VatPercentage: window.productVatPercentage,
        quantity: 1,
      });

      [
        productAmountPriceOutput,
        productAmountPriceOutputSm,
        productAmountPriceOutputSmFixed,
      ].forEach(
        (element) => (element.textContent = formatPrice(priceIncludingTax)),
      );

      window.openCart();
    });
  });

  function tweakAmountCallback(input) {
    productAmountInputs.forEach((otherAmountInput: HTMLInputElement) => {
      if (otherAmountInput !== input) {
        otherAmountInput.value = input.value;

        const decrementBtn =
          otherAmountInput.previousElementSibling as HTMLButtonElement;

        decrementBtn.disabled = input.value === "1";
      }
    });

    const quantity = Number(input.value),
      [_, priceIncludingTax] = getPriceIncludingTax({
        Price: window.productPrice,
        VatPercentage: window.productVatPercentage,
        quantity,
      });

    [
      productAmountPriceOutput,
      productAmountPriceOutputSm,
      productAmountPriceOutputSmFixed,
    ].forEach(
      (element) => (element.textContent = formatPrice(priceIncludingTax)),
    );
  }

  tweakAmount(productAmountTweakBtns, productAmountInputs, tweakAmountCallback);
</script>

<Schema
  item={{
    "@context": "https://schema.org",
    "@type": "Product",
    name: page.Meta.HTML_Title,
    image: await importImage(STRAPI_URL + page.Intro_blob?.data.attributes.url),
    description: `${renderMarkdown(page.Intro_text).replace(
      /(<([^>]+)>)/gi,
      "",
    )} ${renderMarkdown(page.Block_text).replace(/(<([^>]+)>)/gi, "")}`,
    sku: page.SKU,
    gtin: page.GTIN_Barcode,
    brand: {
      "@type": "Brand",
      name: page.brand?.data?.attributes.Brand_name,
    },
    offers: {
      "@type": "Offer",
      url: Astro.site.origin + Astro.url.pathname + "/",
      itemCondition: "https://schema.org/NewCondition",
      availability: "https://schema.org/InStock",
      price: page.Price,
      priceCurrency: page.Currency,
      priceValidUntil: new Date().toISOString(),
      shippingDetails: {
        "@type": "OfferShippingDetails",
        shippingDestination: {
          "@type": "DefinedRegion",
          addressCountry: "EU",
        },
      },
    },
  }}
/>
