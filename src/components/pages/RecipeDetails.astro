---
import { Schema } from "astro-seo-schema";
import { Picture } from "astro-imagetools/components";

import Markdown from "@components/Markdown.astro";
import Chapterize from "@components/Chapterize.astro";
import RelevantPosts from "@components/RelevantPosts.astro";
import RecipesInfoSection from "@components/RecipesInfoSection.astro";

import PostDetailsLayout from "@layouts/PostDetailsLayout.astro";

import renderMarkdown from "@utils/renderMarkdown";
import RecurringImages from "@store/RecurringImages";

const {
  green_bulb,
  white_clock,
  light_green_clock,
  white_down_arrow,
  green_down_arrow,
} = RecurringImages;

const { page, recurData, ariaLabelRecurData } = Astro.props,
  headingName = recurData.text_chapter,
  { STRAPI_URL } = import.meta.env;

const {
  recipe_day,
  recipe_days,
  recipe_hour,
  recipe_hours,
  recipe_minute,
  recipe_minutes,
  recipe_recipe,
  recipe_prep,
  recipe_cook,
  recipe_total,
  recipe_jump_to_recipe,
  recipe_similar,
  recipe_nutrition_information,
  recipe_yield,
  recipe_amount_per_serving,
  recipe_ingredients,
  recipe_serving_size,
  recipe_cooking_instructions,
  Recipes_related_products_title_text,
  recipe_tips,
} = recurData;

const { Time_cooking, Time_preparation, Related_products } = page,
  relatedProducts = Related_products.data?.map(({ attributes }) => attributes);

const cookingTime = Time_cooking
    ? Time_cooking.split(":").map(Number)
    : [0, 0, 0],
  preparationTime = Time_preparation.split(":").map(Number),
  totalTime = [...cookingTime].map((t, i) => t + preparationTime[i]);

totalTime[2] > 59 && ((totalTime[1] += 1), (totalTime[2] -= 60));
totalTime[1] > 23 && ((totalTime[0] += 1), (totalTime[1] -= 24));

function getTimeString(timeArray: number[], isSmall?: boolean): string {
  const [day, hour, minute] = timeArray;

  const dayString = isSmall
      ? recipe_day[0]
      : " " + (day === 1 ? recipe_day : recipe_days),
    hourString = isSmall
      ? recipe_hour[0]
      : " " + (hour === 1 ? recipe_hour : recipe_hours),
    minuteString = isSmall
      ? recipe_minute[0]
      : " " + (minute === 1 ? recipe_minute : recipe_minutes);

  return [
    day > 0 && `${day}${dayString}`,
    hour > 0 && `${hour}${hourString}`,
    minute > 0 && `${minute}${minuteString}`,
  ]
    .filter(Boolean)
    .join(" ");
}

const cookingTimeString = getTimeString(cookingTime),
  cookingTimeStringSm = getTimeString(cookingTime, true),
  preparationTimeString = getTimeString(preparationTime),
  preparationTimeStringSm = getTimeString(preparationTime, true),
  totalTimeString = getTimeString(totalTime),
  totalTimeStringSm = getTimeString(totalTime, true);

const pageURL = Astro.site.origin + Astro.url.pathname + "/";

interface Nutrition {
  "@type": "NutritionInformation";
  [key: string]: string;
}

const nutrition: Nutrition = {
  "@type": "NutritionInformation",
  ...Object.fromEntries(
    page.Nutrition.map((item) => [
      item.Nutrition_name,
      (item.Nutrition_amount || "0") + item.Nutrition_measurements_unit,
    ]),
  ),
};
---

<style lang="scss">
  .recipe-time-icon {
    @apply w-[clamp(25px,calc(0.625vw+21px),30px)]
      h-[clamp(25px,calc(0.625vw+21px),30px)];
  }

  .recipe-nutritions-container {
    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));

    @media (min-width: 640px) {
      grid-template-columns: repeat(auto-fit, minmax(200px, 5fr));
    }
  }

  .ingredients-grid {
    @media (min-width: 640px) {
      grid-template-columns: repeat(auto-fit, minmax(250px, 2fr));
    }
  }
</style>

<PostDetailsLayout {page} {recurData} {ariaLabelRecurData} {headingName}>
  <Fragment slot="recipe-header">
    <div
      role="complementary"
      aria-label={recipe_recipe + ariaLabelRecurData.Recipe_timing_text}
      class="grid-gap flex flex-wrap items-center"
    >
      {
        [
          [recipe_prep, preparationTimeString, preparationTimeStringSm],
          [recipe_cook, cookingTimeString, cookingTimeStringSm],
          [recipe_total, totalTimeString, totalTimeStringSm],
        ].map(([timeTag, timeString, timeStringSm]) => {
          // Check if timeString or timeStringSm is not available (undefined or null)
          if (!timeString && !timeStringSm) {
            return null; // Skip this iteration and do not render anything
          }

          return (
            <div class="inline-flex items-center division-in-element-gap text-white">
              <img class="recipe-time-icon !m-0" {...white_clock} />

              <div>
                <div class="text-b7">{timeTag} :</div>

                <div class="text-b6 font-bold">
                  <span class="hidden sm:block">{timeString}</span>

                  <span class="block sm:hidden">{timeStringSm}</span>
                </div>
              </div>
            </div>
          );
        })
      }
    </div>

    <a
      href={"#" +
        encodeURIComponent(
          (page.Title + recipe_recipe).toLowerCase().replaceAll(" ", "-"),
        )}
      class="button-default sm:!hidden w-fit"
    >
      <span>{recipe_jump_to_recipe}</span>
      <img class="button-icon" {...green_down_arrow} />
    </a>
  </Fragment>

  <a
    href={"#" +
      encodeURIComponent(
        (page.Title + recipe_recipe).toLowerCase().replaceAll(" ", "-"),
      )}
    slot="jump-to-recipe-sm"
    class="button-primary"
  >
    <span>{recipe_jump_to_recipe}</span>
    <img class="button-icon" {...white_down_arrow} />
  </a>

  <div slot="jump-to-recipe" class="hidden md:block">
    <a
      href={"#" +
        encodeURIComponent(
          (page.Title + recipe_recipe).toLowerCase().replaceAll(" ", "-"),
        )}
      class="button-primary-large"
    >
      <span>{recipe_jump_to_recipe}</span>
      <img class="button-icon" {...white_down_arrow} />
    </a>
  </div>

  <Chapterize slot="post-details">
    <RecipesInfoSection page={page} />

    {
      page.Recipe_variations.data.length > 0 && (
        <>
          <h2 class="tiled-title">
            {`${recipe_similar} ${page.Title?.toLowerCase()}`}
          </h2>

          <div class="tiled-div">
            <ul>
              {page.Recipe_variations.data.map(({ attributes }) => (
                <li>
                  <a href={attributes.Meta.URL_slug}>{attributes.Title}</a>
                </li>
              ))}
            </ul>
          </div>
        </>
      )
    }

    <h2 class="tiled-title">
      {`${page.Title} ${recipe_recipe?.toLowerCase()}`}
    </h2>

    <div class="tiled-div">
      <Markdown>{page.Time_text}</Markdown>

      <div
        role="complementary"
        aria-label={recipe_recipe + ariaLabelRecurData.Recipe_timing_text}
        class="grid-gap flex flex-wrap items-center"
      >
        {
          [
            [recipe_prep, preparationTimeString, preparationTimeStringSm],
            [recipe_cook, cookingTimeString, cookingTimeStringSm],
            [recipe_total, totalTimeString, totalTimeStringSm],
          ].map(([timeTag, timeString, timeStringSm]) => {
            // Check if timeString or timeStringSm is not available (undefined or null)
            if (!timeString && !timeStringSm) {
              return null; // Skip this iteration and do not render anything
            }

            return (
              <div class="inline-flex items-center division-in-element-gap">
                <img class="recipe-time-icon !m-0" {...light_green_clock} />

                <div>
                  <div class="text-b7 text-black-light">{timeTag} :</div>

                  <div class="text-b6 font-bold text-black">
                    <span class="hidden sm:block">{timeString}</span>

                    <span class="block sm:hidden">{timeStringSm}</span>
                  </div>
                </div>
              </div>
            );
          })
        }
      </div>
    </div>

    {
      page.Nutrition.length > 0 && (
        <div
          role="complementary"
          aria-label={recipe_nutrition_information}
          class="tiled-div division-in-gap flex w-full"
        >
          <div class="border-l-[3px] border-primary rounded-full" />

          <div class="division-gap grid grow">
            <div class="division-in-gap grid">
              <h3 class="!m-0">{recipe_nutrition_information}</h3>

              {page.Nutrition_yield && (
                <div class="division-in-element-gap flex items-center font-bold">
                  <div class="text-b6">{recipe_yield}:</div>
                  <div class="text-b5 text-primary">{page.Nutrition_yield}</div>
                </div>
              )}
            </div>

            <div class="division-in-gap grid">
              <div class="text-b5 font-bold">{recipe_amount_per_serving}:</div>

              <div
                role="list"
                aria-label={recipe_amount_per_serving}
                class="division-in-element-gap recipe-nutritions-container grid grid-flow-row"
              >
                {page.Nutrition.map((item) => (
                  <div role="list" class="text-b5">
                    {`${item.Nutrition_name}: ${item.Nutrition_amount || "0"}${
                      item.Nutrition_measurements_unit || ""
                    }`}
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      )
    }

    <div
      aria-label={recipe_ingredients}
      class="tiled-div division-gap grid w-full"
    >
      <div class="division-in-gap flex flex-wrap justify-between">
        <h3 class="!m-0">{recipe_ingredients}</h3>

        <div class="division-in-element-gap flex items-center">
          <div class="text-b6-sm font-bold whitespace-nowrap">
            {recipe_serving_size}:
          </div>

          <select
            id="recipe-serving-size"
            aria-label={ariaLabelRecurData.Recipe_serving_size_text}
            class="selector-sm-primary"
          >
            <option value="1">1x</option>
            <option value="2">2x</option>
            <option value="3">3x</option>
            <option value="5">5x</option>
            <option value="10">10x</option>
          </select>
        </div>
      </div>

      <div role="list" class="ingredients-grid division-in-gap grid">
        {
          page.Instructions_part.map((item) => (
            <div
              role="listitem"
              aria-label={item.Instructions_part_name}
              class="division-in-element-gap flex flex-col text-b5"
            >
              <div class="font-bold">{item.Instructions_part_name}</div>

              {item.Instructions_part_ingredients.map((item) => (
                <div class="flex">
                  <label class="checkbox-primary">
                    <span class="checkbox-input-container">
                      <input type="checkbox" />
                      <span class="checkbox-primary" />
                    </span>

                    <span>
                      <span
                        class="ingredient-amount"
                        data-amount={item.Instructions_part_ingredient_amount}
                      >
                        {item.Instructions_part_ingredient_amount}
                      </span>
                      {`
                        ${
                          item.Instructions_part_ingredient_measurements_unit ??
                          ""
                        }
                        ${item.Instructions_part_ingredient_name}`}
                    </span>
                  </label>
                </div>
              ))}
            </div>
          ))
        }
      </div>
    </div>

    <script>
      const ingredientAmountElements =
        document.querySelectorAll(".ingredient-amount");

      const recipeSectionServingSizeInput = document.getElementById(
        "recipe-serving-size",
      ) as HTMLSelectElement;

      recipeSectionServingSizeInput?.addEventListener("change", (e) => {
        const recipeSectionServingSize = Number(
          recipeSectionServingSizeInput.selectedOptions[0].value,
        );

        ingredientAmountElements.forEach((element: HTMLElement) => {
          const ingredientAmount = Number(element.dataset.amount);

          element.textContent = String(
            ingredientAmount * recipeSectionServingSize,
          );
        });
      });
    </script>

    <h2 aria-label={recipe_cooking_instructions} class="tiled-title">
      {recipe_cooking_instructions}
    </h2>

    {
      page.Instructions_part.map((item) => (
        <div role="list">
          <div role="listitem" class="tiled-div flex division-in-gap">
            <div class="border-l-[3px] border-primary rounded-full" />

            <h3
              id={encodeURIComponent(
                item.Instructions_part_name?.replaceAll(" ", "-")
                  ?.replace(/\s+/g, "")
                  .trim(),
              )}
              class="grow !my-0"
            >
              {item.Instructions_part_name}
            </h3>
          </div>

          {item.Instructions_part_steps.map((step, index) => (
            <div
              role="listitem"
              aria-label={ariaLabelRecurData.Recipe_step_text + (index + 1)}
              id={encodeURIComponent(
                item.Instructions_part_name.replaceAll(" ", "-")
                  .replace(/\s+/g, "")
                  .trim() +
                  `-step-` +
                  (index + 1),
              )}
              class="tiled-div"
            >
              <div class="flex gap-[15px]">
                <div>
                  <div class="number-list-circle">{index + 1}</div>
                </div>

                <div class="no-pad-mar-first-last-child">
                  <Markdown>{step.Instructions_part_steps_text}</Markdown>
                </div>
              </div>

              {step.Instructions_part_steps_blob.data && (
                <div class="aspect-[2/1] w-full mt-2.5 sm:mt-[15px]">
                  <Picture
                    layout="fill"
                    sizes="(min-width: 768px) calc(90vw * 2/3 - 72px), calc(90vw - 72px)"
                    alt={
                      step.Instructions_part_steps_blob.data.attributes
                        .alternativeText
                    }
                    src={
                      STRAPI_URL +
                      step.Instructions_part_steps_blob.data.attributes.url
                    }
                  />
                </div>
              )}
            </div>
          ))}

          {item.Instructions_part_step_tip && (
            <div role="listitem" class="tiled-div division-in-gap grid">
              <div class="division-in-element-gap flex items-center">
                <img
                  class="w-[clamp(25px,calc(1.25vw+17px),35px)] object-contain !m-0"
                  {...green_bulb}
                />

                <div class="text-b2 font-bold text-black">{recipe_tips}</div>
              </div>

              <div class="font-bold no-pad-mar-first-last-child">
                <Markdown>{item.Instructions_part_step_tip}</Markdown>
              </div>
            </div>
          )}
        </div>
      ))
    }
  </Chapterize>

  {
    relatedProducts.length > 0 && (
      <Fragment slot="product-kindness-impact">
        <RelevantPosts
          page={page}
          posts={relatedProducts}
          heading={Recipes_related_products_title_text}
          curved_bg={true}
          product={true}
        />
      </Fragment>
    )
  }

  <script slot="wake-lock-script">
    const interactionEvents = [
      "click",
      "touchstart",
      "keydown",
      "scroll",
      "mousemove",
    ];

    if ("wakeLock" in navigator) {
      const firstInteractionEventListener = () => {
        let wakeLock;

        const requestWakeLock = async () => {
          try {
            wakeLock = await navigator.wakeLock.request();
          } catch (err) {}
        };

        requestWakeLock();

        document.addEventListener("visibilitychange", () => {
          wakeLock &&
            document.visibilityState === "visible" &&
            requestWakeLock();
        });

        interactionEvents.forEach((eventType) => {
          document.removeEventListener(
            eventType,
            firstInteractionEventListener,
          );
        });
      };

      interactionEvents.forEach((eventType) => {
        document.addEventListener(eventType, firstInteractionEventListener);
      });
    } else {
      const playBackgroundVideoScript = document.createElement("script");

      playBackgroundVideoScript.type = "module";
      playBackgroundVideoScript.src = "/scripts/play-background-video.js";

      document.body.appendChild(playBackgroundVideoScript);
    }
  </script>
</PostDetailsLayout>

<Schema
  item={{
    "@context": "https://schema.org",
    "@type": "Recipe",
    name: page.Title,
    image: await importImage(STRAPI_URL + page.Intro_blob?.data.attributes.url),
    author: {
      "@type": "Person",
      name: page.authors.data.map(({ attributes }) => attributes.givenName),
    },
    dateCreated: page.createdAt,
    datePublished: page.publishedAt,
    dateModified: page.updatedAt,
    description: `${renderMarkdown(page.Intro_text).replace(
      /(<([^>]+)>)/gi,
      "",
    )} ${renderMarkdown(page.Block_text).replace(/(<([^>]+)>)/gi, "")}`,
    nutrition,
    prepTime: `PT${preparationTimeStringSm.toUpperCase().replace(/\s/g, "")}`,
    cookTime:
      Time_cooking &&
      `PT${cookingTimeStringSm.toUpperCase().replace(/\s/g, "")}`,
    totalTime: `PT${totalTimeStringSm.toUpperCase().replace(/\s/g, "")}`,
    recipeCuisine: page.Cuisine,
    recipeCategory: page.Category,
    recipeYield: page.Nutrition_yield,
    recipeIngredient: page.Instructions_part.flatMap((item) =>
      item.Instructions_part_ingredients.map(
        (item) =>
          item.Instructions_part_ingredient_amount +
          item.Instructions_part_ingredient_measurements_unit +
          ` ` +
          item.Instructions_part_ingredient_name,
      ),
    ),
    recipeInstructions: await Promise.all(
      page.Instructions_part.flatMap((item) =>
        item.Instructions_part_steps.map(async (step, index) => ({
          "@type": "HowToStep",
          name: item.Instructions_part_name,
          text: step.Instructions_part_steps_text,
          url: `${
            pageURL +
            `#` +
            encodeURIComponent(
              item.Instructions_part_name.replaceAll(" ", "-")
                .replace(/\s+/g, "")
                .trim() +
                `-step-` +
                (index + 1),
            )
          }`,
          image: step.Instructions_part_steps_blob.data
            ? await importImage(
                STRAPI_URL +
                  step.Instructions_part_steps_blob?.data?.attributes.url,
              )
            : "",
        })),
      ),
    ),
  }}
/>
