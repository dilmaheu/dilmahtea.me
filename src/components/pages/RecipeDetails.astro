---
import { Schema } from "astro-seo-schema";
import Markdown from "@astrojs/markdown-component";
import { Picture } from "astro-imagetools/components";

import renderMarkdown from "@utils/renderMarkdown";
import Chapterize from "@components/Chapterize.astro";
import ClipPathSVG from "@components/ClipPathSVG.astro";
import PostDetailsLayout from "@layouts/PostDetailsLayout.astro";
import RecipesInfoSection from "@components/RecipesInfoSection.astro";

import RecurringImages from "@store/RecurringImages";

const {
  green_bulb,
  white_clock,
  light_green_clock,
  white_down_arrow,
  green_down_arrow,
} = RecurringImages;

const { page, recurData, ariaLabelRecurData } = Astro.props,
  headingName = recurData.text_chapter,
  { ASSETS_URL } = import.meta.env;

const {
  recipe_day,
  recipe_days,
  recipe_hour,
  recipe_hours,
  recipe_minute,
  recipe_minutes,
  recipe_recipe,
  recipe_prep,
  recipe_cook,
  recipe_total,
  recipe_jump_to_recipe,
  recipe_similar,
  recipe_nutrition_information,
  recipe_yield,
  recipe_amount_per_serving,
  recipe_ingredients,
  recipe_serving_size,
  recipe_cooking_instructions,
  Recipes_related_products_title_text,
  recipe_tips,
} = recurData;

const { Time_cooking, Time_preparation, Related_products } = page,
  relatedProducts = Related_products.data?.map(({ attributes }) => attributes);

const cookingTime = Time_cooking.split(":").map(Number),
  preparationTime = Time_preparation.split(":").map(Number),
  totalTime = [...cookingTime].map((t, i) => t + preparationTime[i]);

totalTime[2] > 59 && ((totalTime[1] += 1), (totalTime[2] -= 60));
totalTime[1] > 23 && ((totalTime[0] += 1), (totalTime[1] -= 24));

function getTimeString(timeArray: number[], isSmall?: boolean): string {
  const [day, hour, minute] = timeArray;

  const dayString = isSmall
      ? recipe_day[0]
      : " " + (day === 1 ? recipe_day : recipe_days),
    hourString = isSmall
      ? recipe_hour[0]
      : " " + (hour === 1 ? recipe_hour : recipe_hours),
    minuteString = isSmall
      ? recipe_minute[0]
      : " " + (minute === 1 ? recipe_minute : recipe_minutes);

  return [
    day > 0 && `${day}${dayString}`,
    hour > 0 && `${hour}${hourString}`,
    minute > 0 && `${minute}${minuteString}`,
  ]
    .filter(Boolean)
    .join(" ");
}

const cookingTimeString = getTimeString(cookingTime),
  cookingTimeStringSm = getTimeString(cookingTime, true),
  preparationTimeString = getTimeString(preparationTime),
  preparationTimeStringSm = getTimeString(preparationTime, true),
  totalTimeString = getTimeString(totalTime),
  totalTimeStringSm = getTimeString(totalTime, true);

const pageURL = `${Astro.site.origin}/${page.locale}/${
  page.Meta.URL_slug === "/" ? "" : page.Meta.URL_slug
}/`;

interface Nutrition {
  "@type": "NutritionInformation";
  [key: string]: string;
}

const nutrition: Nutrition = {
  "@type": "NutritionInformation",
  ...Object.fromEntries(
    page.Nutrition.map((item) => [
      item.Nutrition_name,
      (item.Nutrition_amount || "0") + item.Nutrition_measurements_unit,
    ])
  ),
};
---

<style lang="scss" is:global>
  .recipe-title {
    font-size: clamp(2rem, 3vw + 0.55rem, 2.625rem);

    @apply p-[15px] md:py-[10px] md:px-[clamp(15px,2.08vw+0.01rem,30px)];
  }

  .chapter:nth-child(1) .recipe-title {
    margin-top: 0;
  }

  .recipe-content {
    font-size: clamp(1rem, 1.5vw + 0.1rem, 1.25rem);
  }
</style>

<style lang="scss">
  @use "src/styles/colors";

  .related-products-top {
    clip-path: url(#product-impact-top-curve-sm);

    @media (min-width: 768px) {
      clip-path: url(#product-impact-top-curve);
    }
  }

  .related-products-bottom {
    clip-path: url(#product-impact-bottom-curve-sm);

    @media (min-width: 768px) {
      clip-path: url(#product-impact-bottom-curve);
    }
  }

  .time-container {
    margin-top: clamp(1.25rem, 2vw + 0.2rem, 2rem);
    column-gap: clamp(25px, 3vw + 1px, 60px);
    row-gap: clamp(0.75rem, 1.5vw + 0.1rem, 1.25rem);
  }

  .time-icon {
    width: clamp(1rem, 1.5vw + 0.55rem, 1.875rem);
  }

  .time-tag {
    @apply leading-[12px] md:leading-[180%];

    font-size: clamp(0.625rem, 1.3vw + 0.01rem, 0.75rem);
  }

  .time {
    @apply leading-[16px] md:leading-[150%];

    font-size: clamp(0.875rem, 1.3vw + 0.1rem, 1rem);
  }

  .similar-recipies {
    li {
      font-size: clamp(1rem, 1.5vw + 0.15rem, 1.5rem);
    }

    a {
      background-size: 100% 45%;
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' style='border-radius:9999px' preserveAspectRatio='none' viewBox='0 0 1 1' fill='%23b3cccc'%3E%3Cpath d='M0 0h1v1H0z'/%3E%3C/svg%3E");
    }
  }

  .recipe-time-container {
    column-gap: clamp(40px, 6vw + 10px, 80px);
  }

  .recipe-time-icon {
    width: clamp(1.25rem, 1.5vw + 0.55rem, 1.875rem);
    height: clamp(1.25rem, 1.5vw + 0.55rem, 1.875rem);
  }

  .recipe-content-border {
    margin-right: clamp(0.938rem, 1.5vw + 0.3rem, 1.563rem);
  }

  .recipe-content-title {
    font-size: clamp(1.125rem, 2.2vw + 0.4rem, 2rem);
  }

  .recipe-nutritions-container {
    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));

    @media (min-width: 640px) {
      grid-template-columns: repeat(auto-fit, minmax(200px, 5fr));
    }
  }

  .recipe-serving-size-input-container {
    gap: clamp(0.438rem, 1.1vw + 0.01rem, 0.938rem);
  }

  .recipe-serving-size-input {
    background: colors.$serving-size-bg;
    font-size: clamp(1rem, 1.3vw + 0.1rem, 1.125rem);

    &:focus {
      @apply ring ring-emerald-800 ring-opacity-20 outline-none cursor-pointer;
    }
  }

  .recipe-ingredients-checkbox-container {
    .recipe-ingredients-checkbox {
      font-size: clamp(1rem, 1.5vw + 0.1rem, 1.25rem);

      &::after {
        content: "âœ“";
        top: -0.68rem;
        left: 1.2px;
        font-size: 0.85rem;
        font-weight: 1000;

        @apply absolute opacity-0 rotate-6 text-white;
      }
    }

    input:focus {
      @apply outline-none opacity-100 w-6 h-6 -top-1 -left-1;
    }

    input:checked ~ .recipe-ingredients-checkbox {
      @apply opacity-100 rounded-[3px] border-2 border-primary bg-primary;

      &::after {
        @apply opacity-100 rounded-none bg-transparent;
      }
    }
  }

  .recipe-cooking-title {
    font-size: clamp(1.5rem, 1.8vw + 0.1rem, 1.75rem);
  }

  .recipe-step-order {
    width: clamp(30px, 3vw + 0.4rem, 45px);
    height: clamp(30px, 3vw + 0.4rem, 45px);
    font-size: clamp(1rem, 1.5vw + 0.1rem, 1.25rem);
  }

  .recipe-tips-icon {
    width: clamp(1.75rem, 2.5vw + 0.15rem, 2.375rem);
    height: clamp(1.75rem, 2.5vw + 0.15rem, 2.375rem);
  }

  .recipe-tips-title {
    font-size: clamp(1.125rem, 1.5vw + 0.15rem, 1.5rem);
  }

  .related-post-card-content-container {
    padding: clamp(20px, 6.4vw, 40px) clamp(24px, 3.8vw + 11.75px, 36px);

    @media (min-width: 640px) {
      padding: clamp(30px, 7.8125vw - 20px, 60px)
        clamp(28px, 4.6875vw - 2px, 46px);
    }

    @media (min-width: 1024px) {
      padding: clamp(30px, 8vw - 51.75px, 60px) clamp(28px, 4.8vw - 21px, 46px);
    }
  }

  .related-post-card-title {
    font-size: clamp(1.5rem, 1.8vw + 0.1rem, 1.75rem);
  }
</style>

<PostDetailsLayout {page} {recurData} {ariaLabelRecurData} {headingName}>
  <Fragment slot="recipe-header">
    <div
      role="complementary"
      aria-label={recipe_recipe + ariaLabelRecurData.Recipe_timing_text}
      class="flex flex-wrap items-center time-container"
    >
      {
        [
          [recipe_prep, preparationTimeString, preparationTimeStringSm],
          [recipe_cook, cookingTimeString, cookingTimeStringSm],
          [recipe_total, totalTimeString, totalTimeStringSm],
        ].map(([timeTag, timeString, timeStringSm]) => (
          <div class="inline-flex items-center gap-2 md:gap-2.5">
            <img class="time-icon w-full h-full" {...white_clock} />

            <div class="w-auto">
              <div class="time-tag">{timeTag} :</div>

              <div class="hidden sm:block font-bold time">{timeString}</div>

              <div class="block sm:hidden font-bold time">{timeStringSm}</div>
            </div>
          </div>
        ))
      }
    </div>

    <div class="inline-flex sm:hidden gap-2 md:gap-2.5 mt-[30px] w-auto">
      <a href="#recipe">
        <div
          class:list={[
            "flex items-center justify-center rounded-[40px] py-[13px] px-[23px]",
            "bg-secondary text-base font-bold leading-[19px] text-primary text-center",
          ]}
        >
          {recipe_jump_to_recipe}
          <span class="icon ml-5 h-5">
            <img class="w-full h-full" {...green_down_arrow} />
          </span>
        </div>
      </a>
    </div>
  </Fragment>

  <a
    href="#recipe"
    slot="jump-to-recipe-sm"
    class:list={[
      "bg-primary flex items-center justify-center gap-5 max-w-[200px] rounded-[40px]",
      "mt-6 ml-4 py-[13px] px-[23px] text-sm font-bold leading-[19px] text-secondary text-center",
    ]}
  >
    {recipe_jump_to_recipe}

    <span class="icon">
      <img class="h-5" {...white_down_arrow} />
    </span>
  </a>

  <a
    href="#recipe"
    slot="jump-to-recipe"
    class:list={[
      "bg-primary text-base font-bold leading-[19px] text-secondary text-center",
      "hidden md:block flex items-center justify-center gap-5 rounded-[40px] py-5 mb-[50px]",
    ]}
  >
    {recipe_jump_to_recipe}

    <span class="icon">
      <img class="h-5" {...white_down_arrow} />
    </span>
  </a>

  <Chapterize slot="post-details">
    <RecipesInfoSection page={page} />

    {
      page.Recipe_variations.data.length > 0 && (
        <div>
          <h2
            id="similar-recipe"
            class="recipe-title bg-primary alice leading-[110%] text-secondary-light rounded-[10px] mt-[50px]"
          >
            {recipe_similar}
            {page.Title}
          </h2>

          <div class="bg-secondary-light rounded-[10px] p-[15px] sm:p-5 md:p-[25px] lg:p-[35px] my-[30px]">
            <ul class="similar-recipies list-disc list-inside">
              {page.Recipe_variations.data.map(({ attributes }) => (
                <li class="font-bold sm:font-semibold text-primary leading-[175%] sm:leading-[180%]">
                  <a
                    href={attributes.Meta.URL_slug}
                    class:list={[
                      "hover:brightness-95 transition-all",
                      "px-1 font-bold sm:font-semibold no-underline bg-bottom bg-no-repeat",
                    ]}
                  >
                    {attributes.Title}
                  </a>
                </li>
              ))}
            </ul>
          </div>
        </div>
      )
    }

    <h2
      id="recipe"
      class="recipe-title bg-primary alice text-secondary-light leading-[110%] rounded-[10px] mt-[50px]"
    >
      {page.Title}
      {recipe_recipe}
    </h2>

    <div
      class="bg-secondary-light rounded-[10px] p-[15px] sm:p-5 md:p-[25px] lg:p-[35px] my-[30px]"
    >
      <div class="recipe-content prose max-w-none mb-[15px] leading-[150%]">
        <Markdown>{page.Time_text}</Markdown>
      </div>

      <div
        role="complementary"
        aria-label={recipe_recipe + ariaLabelRecurData.Recipe_timing_text}
        class="recipe-time-container flex flex-wrap mt-5 gap-y-5"
      >
        {
          [
            [recipe_prep, preparationTimeString, preparationTimeStringSm],
            [recipe_cook, cookingTimeString, cookingTimeStringSm],
            [recipe_total, totalTimeString, totalTimeStringSm],
          ].map(([timeTag, timeString, timeStringSm]) => (
            <div class="inline-flex items-center gap-2.5">
              <div class="recipe-time-icon">
                <img class="w-full h-full" {...light_green_clock} />
              </div>

              <div class="w-auto text-black-light leading-[150%]">
                <div class="text-[10px] md:text-xs">{timeTag} :</div>

                <div class="hidden sm:block text-base font-medium">
                  {timeString}
                </div>

                <div class="block sm:hidden text-base font-medium">
                  {timeStringSm}
                </div>
              </div>
            </div>
          ))
        }
      </div>
    </div>

    {
      page.Nutrition.length > 0 && (
        <div
          role="complementary"
          aria-label={recipe_nutrition_information}
          class="flex bg-secondary-light rounded-[10px] p-[15px] sm:p-5 md:p-[25px] lg:p-[35px] my-[30px]"
        >
          <div class="recipe-content-border w-auto border-l-[3px] border-primary rounded-full" />

          <div class="grid w-full items-center gap-[15px]">
            <h3
              class:list={[
                "recipe-content-title font-bold sm:font-semibold",
                "text-primary sm:text-black leading-[150%]",
              ]}
            >
              {recipe_nutrition_information}
            </h3>

            <div class="flex items-center gap-2.5 w-full font-bold leading-[150%]">
              <div class="text-xs text-black">{recipe_yield}:</div>

              <div class="text-lg text-primary">{page.Nutrition_yield}</div>
            </div>

            <div class="text-base md:text-lg text-black">
              {recipe_amount_per_serving}:
            </div>

            <div
              role="list"
              aria-label={recipe_amount_per_serving}
              class="recipe-nutritions-container grid grid-flow-row gap-[5px]"
            >
              {page.Nutrition.map((item) => (
                <div
                  role="list"
                  class="flex items-center text-base lg:text-lg leading-[150%] text-black"
                >
                  <div>{item.Nutrition_name}</div>

                  <span class="mr-1">:</span>

                  <div>
                    {item.Nutrition_amount != null
                      ? item.Nutrition_amount
                      : "0"}
                    {item.Nutrition_measurements_unit}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )
    }

    <div
      aria-label={recipe_ingredients}
      class="bg-secondary-light rounded-[10px] p-[15px] sm:p-5 md:p-[25px] lg:p-[35px] my-[30px]"
    >
      <div class="flex flex-wrap justify-between">
        <h3
          class="recipe-content-title font-bold sm:font-semibold text-primary sm:text-black leading-[150%]"
        >
          {recipe_ingredients}
        </h3>

        <label
          class="recipe-serving-size-input-container relative inline-grid grid-flow-col items-center"
        >
          <span class="text-xs leading-[150%] font-bold text-black">
            {recipe_serving_size}:
          </span>

          <select
            id="recipe-serving-size"
            class:list={[
              "recipe-serving-size-input max-w-[65px] md:max-w-[83px] py-[5px] pl-[11px]",
              "text-secondary-light border-r-[11px] border-transparent rounded-[7px]",
            ]}
          >
            <option value="1">1x</option>
            <option value="2">2x</option>
            <option value="3">3x</option>
            <option value="5">5x</option>
            <option value="10">10x</option>
          </select>
        </label>
      </div>

      <div
        role="list"
        class="mt-5 md:mt-[25px] flex flex-wrap sm:flex-nowrap gap-2"
      >
        {
          page.Cooking_part.map((item) => (
            <div
              role="listitem"
              aria-label={item.Cooking_part_name}
              class="w-full sm:w-1/2"
            >
              <h4 class="text-base md:text-lg font-bold leading-[150%] text-black mb-[10px] md:mb-[15px]">
                {item.Cooking_part_name}
              </h4>

              {item.Cooking_part_ingredients.map((item) => (
                <label class="inline-flex items-center w-full">
                  <div class="flex">
                    <div
                      class:list={[
                        "recipe-ingredients-checkbox-container",
                        "relative w-4 h-4 m-auto cursor-pointer clear-both",
                      ]}
                    >
                      <input
                        type="checkbox"
                        tabindex="0"
                        class="absolute opacity-0 cursor-pointer"
                      />
                      <span
                        class:list={[
                          "recipe-ingredients-checkbox absolute w-4 h-4 bg-transparent",
                          "border-2 border-black text-black-light leading-[175%] rounded-[3px]",
                        ]}
                      />
                    </div>
                  </div>

                  <div class="text-base md:text-lg leading-[150%] text-black ml-2.5">
                    <span
                      class="ingredient-amount"
                      data-amount={item.Cooking_part_ingredient_amount}
                    >
                      {item.Cooking_part_ingredient_amount}
                    </span>
                    {item.Cooking_part_ingredient_measurements_unit}
                    {item.Cooking_part_ingredient_name}
                  </div>
                </label>
              ))}
            </div>
          ))
        }
      </div>
    </div>

    <script>
      const ingredientAmountElements =
        document.querySelectorAll(".ingredient-amount");

      const recipeSectionServingSizeInput = document.getElementById(
        "recipe-serving-size"
      ) as HTMLSelectElement;

      recipeSectionServingSizeInput?.addEventListener("change", (e) => {
        const recipeSectionServingSize = Number(
          recipeSectionServingSizeInput.selectedOptions[0].value
        );

        ingredientAmountElements.forEach((element: HTMLElement) => {
          const ingredientAmount = Number(element.dataset.amount);

          element.textContent = String(
            ingredientAmount * recipeSectionServingSize
          );
        });
      });
    </script>

    <h2
      aria-label={recipe_cooking_instructions}
      id="cooking-instructions"
      class="recipe-title alice bg-primary mt-[50px] text-secondary-light leading-[110%] rounded-[10px]"
    >
      {recipe_cooking_instructions}
    </h2>

    {
      page.Cooking_part.map((item) => (
        <div role="list">
          <div class="flex bg-secondary-light p-[15px] sm:p-5 md:p-[25px] lg:p-[35px] my-[30px] rounded-[10px]">
            <div class="recipe-content-border w-auto border-l-[3px] border-primary rounded-full" />

            <div class="w-full gap-[15px]">
              <h3
                class="recipe-cooking-title alice text-black leading-[130%] sm:leading-[120%]"
                id={item.Cooking_part_name.replaceAll(" ", "-")
                  .replace(/\s+/g, "")
                  .trim()}
              >
                {item.Cooking_part_name}
              </h3>
            </div>
          </div>

          {item.Cooking_part_steps.map((step, index) => (
            <div
              role="listitem"
              aria-label={ariaLabelRecurData.Recipe_step_text + (index + 1)}
              id={
                item.Cooking_part_name.replaceAll(" ", "-")
                  .replace(/\s+/g, "")
                  .trim() +
                `-step-` +
                (index + 1)
              }
              class="bg-secondary-light rounded-[10px] p-[15px] sm:p-5 md:p-[25px] lg:p-[35px] my-[30px]"
            >
              <div class="flex gap-[15px]">
                <div>
                  <div
                    class:list={[
                      "recipe-step-order bg-primary rounded-full",
                      "flex items-center justify-center font-extrabold",
                    ]}
                  >
                    {index + 1}
                  </div>
                </div>

                <div class="prose max-w-none text-black leading-[150%] recipe-content w-auto">
                  {step.Cooking_part_steps_text}
                </div>
              </div>

              {step.Cooking_part_steps_blob.data && (
                <div class="aspect-[2/1] w-full mt-2.5 sm:mt-[15px]">
                  <Picture
                    layout="fill"
                    sizes="(min-width: 768px) calc(90vw * 2/3 - 72px), calc(90vw - 72px)"
                    alt={
                      step.Cooking_part_steps_blob.data.attributes
                        .alternativeText
                    }
                    src={
                      ASSETS_URL +
                      step.Cooking_part_steps_blob.data.attributes.url
                    }
                  />
                </div>
              )}
            </div>
          ))}

          {item.Cooking_part_step_tip && (
            <div class="bg-secondary-light rounded-[10px] p-[15px] sm:p-5 md:p-[25px] lg:p-[35px] my-[30px]">
              <div class="flex flex-wrap items-center gap-2.5">
                <div class="flex items-center gap-[15px] sm:gap-5 w-full">
                  <div class="recipe-tips-icon">
                    <img class="w-full h-full object-contain" {...green_bulb} />
                  </div>

                  <h3 class="font-bold leading-[150%] text-primary recipe-tips-title">
                    {recipe_tips}
                  </h3>
                </div>

                <div class="prose max-w-none font-medium sm:font-bold text-primary leading-[150%] recipe-content">
                  {item.Cooking_part_step_tip}
                </div>
              </div>
            </div>
          )}
        </div>
      ))
    }
  </Chapterize>

  {
    relatedProducts.length > 0 && (
      <section class="mb-[50px]" slot="product-kindness-impact">
        <ClipPathSVG
          id="product-impact-top-curve"
          path="M1,0.582 V1 H0 V0.582 S0.073,0.358,0.136,0.295 c0.103,-0.103,0.245,0.128,0.348,0.173 C0.602,0.52,0.729,0.058,0.847,0.003 L0.861,0 C0.965,0,1,0.582,1,0.582"
        />

        <ClipPathSVG
          id="product-impact-top-curve-sm"
          path="M1,0.892 V1 H0 V0.892 c0.059,-1.237,0.238,-0.517,0.321,-0.517 S0.499,0.133,0.639,0.033 a0.799,4,0,0,1,0.088,-0.033 C0.84,0,0.951,0.193,1,0.892"
        />

        <ClipPathSVG
          id="product-impact-bottom-curve"
          path="M1,0 c-0.005,0.158,-0.026,0.437,-0.104,0.633 c-0.115,0.288,-0.242,-0.102,-0.316,-0.102 c-0.07,0,-0.171,0.017,-0.231,0.185 c-0.057,0.16,-0.132,0.283,-0.193,0.283 C0.032,1,0,0.633,0,0.633 V0"
        />

        <ClipPathSVG
          id="product-impact-bottom-curve-sm"
          path="M1,0 V0.722 c-0.095,0.278,-0.193,0,-0.324,0 C0.504,0.722,0.369,1,0.22,1 C0.088,1,0,0.382,0,0.382 V0"
        />

        <ClipPathSVG
          id="card-curve"
          path="M0.99,0.554 V0.735 c0,0.331,-0.079,0.243,-0.519,0.258 S0.004,1,0.004,0.718 c0,-0.037,0.004,-0.093,0.001,-0.164 C-0.005,0.353,-0.003,0.148,0.042,0.078 C0.102,-0.013,0.358,0.003,0.513,0.003 c0.216,0,0.41,-0.034,0.459,0.141 C1,0.309,0.995,0.441,0.99,0.554"
        />

        <div>
          <div class="py-8 -mb-1 bg-primary related-products-top" />
          <div class="bg-primary">
            <div class="wrapper py-2.5 md:py-[100px]">
              <div class="text-[clamp(2rem,3vw+0.4rem,3rem)] alice leading-[110%] md:leading-[115%] text-center">
                <h2>{Recipes_related_products_title_text}</h2>
              </div>

              <div
                role="list"
                aria-label={ariaLabelRecurData.Kindness_Items_text}
                class:list={[
                  "wrapper justify-center gap-[50px] mt-[25px] sm:mt-[27px] md:mt-[27px] lg:mt-[32px]",
                  "grid grid-cols-[repeat(1,minmax(0,420px))] md:grid-cols-[repeat(2,minmax(0,580px))]",
                ]}
              >
                {relatedProducts.map(
                  ({
                    Title,
                    Intro_text,
                    Intro_blob: {
                      data: { attributes: intro_blob },
                    },
                    Meta: { URL_slug },
                  }) => (
                    <div
                      role="listitem"
                      aria-label={ariaLabelRecurData.Product_tea_item_text}
                      class="link-section bg-secondary"
                      style="clip-path: url(#card-curve)"
                    >
                      <Picture
                        layout="fullWidth"
                        alt={intro_blob.alternativeText}
                        src={ASSETS_URL + intro_blob.url}
                        attributes={{ img: { style: "aspect-ratio: 6 / 5;" } }}
                        sizes="(min-width: 768px) min(580px, calc(40vw - 25px)), min(80vw, 420px)"
                      />

                      <div class="related-post-card-content-container text-primary">
                        <div class="related-post-card-title alice mt-[15px]">
                          <a
                            class="main-link"
                            set:text={Title}
                            href={`/` + URL_slug}
                          />
                        </div>

                        <div
                          class:list={[
                            "text-base md:text-lg leading-[150%] line-clamp-3 mt-[5px] md:mt-[7px] lg:mt-[15px]",
                          ]}
                        >
                          <Markdown>{Intro_text}</Markdown>
                        </div>
                      </div>
                    </div>
                  )
                )}
              </div>
            </div>
          </div>
          <div class="py-8 -mt-1 bg-primary related-products-bottom" />
        </div>
      </section>
    )
  }

  <script slot="wake-lock-script">
    const interactionEvents = [
      "click",
      "touchstart",
      "keydown",
      "scroll",
      "mousemove",
    ];

    if ("wakeLock" in navigator) {
      const firstInteractionEventListener = () => {
        let wakeLock;

        const requestWakeLock = async () => {
          try {
            wakeLock = await navigator.wakeLock.request();
          } catch (err) {}
        };

        requestWakeLock();

        document.addEventListener("visibilitychange", () => {
          wakeLock &&
            document.visibilityState === "visible" &&
            requestWakeLock();
        });

        interactionEvents.forEach((eventType) => {
          document.removeEventListener(
            eventType,
            firstInteractionEventListener
          );
        });
      };

      interactionEvents.forEach((eventType) => {
        document.addEventListener(eventType, firstInteractionEventListener);
      });
    } else {
      const playBackgroundVideoScript = document.createElement("script");

      playBackgroundVideoScript.type = "module";
      playBackgroundVideoScript.src = "/scripts/play-background-video.js";

      document.body.appendChild(playBackgroundVideoScript);
    }
  </script>
</PostDetailsLayout>

<Schema
  item={{
    "@context": "https://schema.org",
    "@type": "Recipe",
    name: page.Title,
    image: await importRemoteImage(
      ASSETS_URL + page.Intro_blob?.data.attributes.url
    ),
    author: {
      "@type": "Person",
      name: page.authors.data.map(({ attributes }) => attributes.givenName),
    },
    dateCreated: page.createdAt,
    datePublished: page.publishedAt,
    dateModified: page.updatedAt,
    description: `${(await renderMarkdown(page.Intro_text)).replace(
      /(<([^>]+)>)/gi,
      ""
    )} ${(await renderMarkdown(page.Block_text)).replace(/(<([^>]+)>)/gi, "")}`,
    nutrition,
    prepTime: `PT${preparationTimeStringSm.toUpperCase().replace(/\s/g, "")}`,
    cookTime: `PT${cookingTimeStringSm.toUpperCase().replace(/\s/g, "")}`,
    totalTime: `PT${totalTimeStringSm.toUpperCase().replace(/\s/g, "")}`,
    recipeCuisine: page.Cuisine,
    recipeCategory: page.Category,
    recipeYield: page.Nutrition_yield,
    recipeIngredient: page.Cooking_part.flatMap((item) =>
      item.Cooking_part_ingredients.map(
        (item) =>
          item.Cooking_part_ingredient_amount +
          item.Cooking_part_ingredient_measurements_unit +
          ` ` +
          item.Cooking_part_ingredient_name
      )
    ),
    recipeInstructions: await Promise.all(
      page.Cooking_part.flatMap((item) =>
        item.Cooking_part_steps.map(async (step, index) => ({
          "@type": "HowToStep",
          name: item.Cooking_part_name,
          text: step.Cooking_part_steps_text,
          url: `${
            pageURL +
            `#` +
            item.Cooking_part_name.replaceAll(" ", "-")
              .replace(/\s+/g, "")
              .trim() +
            `-step-` +
            (index + 1)
          }`,
          image: step.Cooking_part_steps_blob.data
            ? await importRemoteImage(
                ASSETS_URL + step.Cooking_part_steps_blob?.data?.attributes.url
              )
            : "",
        }))
      )
    ),
  }}
/>
