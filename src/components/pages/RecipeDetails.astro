---
import { Schema } from "astro-seo-schema";
import Markdown from "@astrojs/markdown-component";
import Chapterize from "@components/Chapterize.astro";
import ClippedImg from "@components/ClippedImg.astro";
import ClippedPicture from "@components/ClippedPicture.astro";
import PostDetailsLayout from "@layouts/PostDetailsLayout.astro";
import RecipesInfoSection from "@components/RecipesInfoSection.astro";

import RecurringImages from "@store/RecurringImages";

const {
  green_bulb,
  white_clock,
  light_green_clock,
  white_down_arrow,
  green_down_arrow,
} = RecurringImages;

const { page, recurData } = Astro.props,
  headingName = recurData.text_chapter,
  { ASSETS_URL } = import.meta.env;

const url = `${Astro.site.origin}/${page.locale}/${
  page.Meta.URL_slug === "/" ? "" : page.Meta.URL_slug
}/`;

function calcTime(timeArray) {
  const [day, hour, minute] = timeArray;

  const calcDay =
    day > 0
      ? day +
        (day === 1
          ? ` ${recurData.recipe_day}\xa0\xa0`
          : ` ${recurData.recipe_day}\xa0\xa0`)
      : "";
  const calcHour =
    hour > 0
      ? hour +
        (hour === 1
          ? ` ${recurData.recipe_hour}\xa0\xa0`
          : ` ${recurData.recipe_hours}\xa0\xa0`)
      : "";
  const calcMinute =
    minute > 0
      ? minute +
        (minute === 1
          ? ` ${recurData.recipe_minute}`
          : ` ${recurData.recipe_minutes}`)
      : "";

  return calcDay + calcHour + calcMinute;
}

function calcTimeSm(timeArray) {
  const [day, hour, minute] = timeArray;

  const calcDay =
    day > 0 ? day + `${recurData.recipe_day.substring(0, 1)}\xa0` : "";
  const calcHour =
    hour > 0 ? hour + `${recurData.recipe_hour.substring(0, 1)}\xa0` : "";
  const calcMinute =
    minute > 0 ? minute + `${recurData.recipe_minute.substring(0, 1)}\xa0` : "";

  return calcDay + calcHour + calcMinute;
}

function time(x) {
  const array = x.split(":").map(Number);

  return calcTime(array);
}

function timeSm(x) {
  const array = x.split(":").map(Number);

  return calcTimeSm(array);
}

function calcTotalTime(x, y) {
  const preparation = x.split(":").map(Number);
  const cooking = y.split(":").map(Number);

  var sum = [...preparation].map((e, i) => e + cooking[i]);

  var min = sum[0] * 24 * 60 + sum[1] * 60 + sum[2];
  var d = Math.floor(min / (60 * 24));
  var h = Math.floor((min % (60 * 24)) / 60);
  var m = Math.floor(min % 60);

  return [d, h, m];
}

function totalTime(x, y) {
  var a = calcTotalTime(x, y);

  return calcTime(a);
}

function totalTimeSm(x, y) {
  var a = calcTotalTime(x, y);

  return calcTimeSm(a);
}

const nutrition = {
  "@type": "NutritionInformation",
};

page.Nutrition.forEach((item) => {
  nutrition[item.Nutrition_name] =
    (item.Nutrition_amount || "0") + item.Nutrition_measurements_unit;
});
---

<PostDetailsLayout {page} {recurData} {headingName}>
  <Fragment slot="recipe-header">
    <div class="flex flex-wrap items-center recipe-Time-Container">
      <div class="inline-flex items-center gap-2 md:gap-2.5">
        <div class="recipe-Time-Icon">
          <img class="w-full h-full" {...white_clock} />
        </div>

        <div class="w-auto">
          <div class="recipe-Time-Tag">{recurData.recipe_prep} :</div>

          <div class="hidden sm:block font-bold recipe-cooktime">
            {time(page.Time_preparation)}
          </div>

          <div class="block sm:hidden font-bold recipe-cooktime">
            {timeSm(page.Time_preparation)}
          </div>
        </div>
      </div>

      <div class="inline-flex items-center gap-2 md:gap-2.5">
        <div class="recipe-Time-Icon">
          <img class="w-full h-full" {...white_clock} />
        </div>

        <div class="w-auto">
          <div class="recipe-Time-Tag">{recurData.recipe_cook} :</div>

          <div class="hidden sm:block font-bold recipe-cooktime">
            {time(page.Time_cooking)}
          </div>

          <div class="block sm:hidden font-bold recipe-cooktime">
            {timeSm(page.Time_cooking)}
          </div>
        </div>
      </div>

      <div class="inline-flex items-center gap-2 md:gap-2.5">
        <div class="recipe-Time-Icon">
          <img class="w-full h-full" {...white_clock} />
        </div>

        <div class="w-auto">
          <div class="recipe-Time-Tag">{recurData.recipe_total} :</div>

          <div class="hidden sm:block font-bold recipe-cooktime">
            {totalTime(page.Time_preparation, page.Time_cooking)}
          </div>

          <div class="block sm:hidden font-bold recipe-cooktime">
            {totalTimeSm(page.Time_preparation, page.Time_cooking)}
          </div>
        </div>
      </div>
    </div>

    <div class="inline-flex sm:hidden gap-2 md:gap-2.5 mt-[30px] w-auto">
      <a href="#recipe">
        <div
          class:list={[
            "bg-lightgray flex items-center justify-center rounded-[40px] py-[13px] px-[23px]",
            "text-base font-bold leading-[19px] text-primary text-center",
          ]}
        >
          {recurData.recipe_jump_to_recipe}
          <span class="icon relative top-0">
            <span class="relative ml-5 h-5">
              <img class="w-full h-full" {...green_down_arrow} />
            </span>
          </span>
        </div>
      </a>
    </div>
  </Fragment>

  <a
    href="#recipe"
    slot="jump-to-recipe-sm"
    class:list={[
      "bg-primary flex items-center justify-center gap-5 max-w-[200px] rounded-[40px]",
      "mt-6 ml-4 py-[13px] px-[23px] text-sm font-bold leading-[19px] text-lightgray text-center",
    ]}
  >
    {recurData.recipe_jump_to_recipe}

    <span class="icon">
      <img class="h-5" {...white_down_arrow} />
    </span>
  </a>

  <a
    href="#recipe"
    slot="jump-to-recipe"
    class:list={[
      "bg-primary flex items-center justify-center gap-5 rounded-[40px] py-5 mb-[50px]",
      "hidden md:block text-base font-bold leading-[19px] text-lightgray text-center",
    ]}
  >
    {recurData.recipe_jump_to_recipe}

    <span class="icon">
      <img class="h-5" {...white_down_arrow} />
    </span>
  </a>

  <Chapterize slot="post-details">
    <RecipesInfoSection page={page} />

    {
      page.Recipe_variations.data.length > 0 && (
        <>
          <h2
            id="similar-recipe"
            class="bg-primary alice leading-[110%] text-lightgray2 rounded-[10px] mt-[50px] recipe-sec-title"
          >
            {recurData.recipe_similar}
            {page.Title}
          </h2>

          <div class="bg-white2 rounded-[10px] p-[15px] sm:p-5 md:p-[25px] lg:p-[35px] my-[30px]">
            <ul class="list-disc list-inside similarRecipies">
              {page.Recipe_variations.data.map(({ attributes }) => (
                <li class="font-bold sm:font-semibold text-primary">
                  <a href={attributes.Meta.URL_slug}>{attributes.Title}</a>
                </li>
              ))}
            </ul>
          </div>
        </>
      )
    }

    <h2
      id="recipe"
      class="bg-primary alice leading-[110%] text-lightgray2 rounded-[10px] mt-[50px] recipe-sec-title"
    >
      {page.Title}
      {recurData.recipe_recipe}
    </h2>

    <div
      class="bg-white2 rounded-[10px] p-[15px] sm:p-5 md:p-[25px] lg:p-[35px] my-[30px]"
    >
      <div class="prose max-w-none mb-[15px] leading-[150%] recipe-sec-text">
        <Markdown>{page.Time_text}</Markdown>
      </div>

      <div class="flex flex-wrap mt-5 gap-y-5 recipe-sec-time-container">
        <div class="inline-flex items-center gap-2.5">
          <div class="recipe-sec-time-icon">
            <img class="w-full h-full" {...light_green_clock} />
          </div>

          <div class="w-auto text-dark">
            <div class="text-[10px] md:text-xs leading-[150%]">
              {recurData.recipe_prep} :
            </div>

            <div class="hidden sm:block text-base font-medium leading-[150%]">
              {time(page.Time_preparation)}
            </div>

            <div class="block sm:hidden text-base font-medium leading-[150%]">
              {timeSm(page.Time_preparation)}
            </div>
          </div>
        </div>

        <div class="inline-flex items-center gap-2.5">
          <div class="recipe-sec-time-icon">
            <img class="w-full h-full" {...light_green_clock} />
          </div>
          <div class="w-auto text-dark">
            <div class="text-[10px] md:text-xs leading-[150%]">
              {recurData.recipe_cook} :
            </div>
            <div class="hidden sm:block text-base font-medium leading-[150%]">
              {time(page.Time_cooking)}
            </div>
            <div class="block sm:hidden text-base font-medium leading-[150%]">
              {timeSm(page.Time_cooking)}
            </div>
          </div>
        </div>

        <div class="inline-flex items-center gap-2.5">
          <div class="recipe-sec-time-icon">
            <img class="w-full h-full" {...light_green_clock} />
          </div>
          <div class="w-auto text-dark">
            <div class="text-[10px] md:text-xs leading-[150%]">
              {recurData.recipe_total} :
            </div>
            <div class="hidden sm:block text-base font-medium leading-[150%]">
              {totalTime(page.Time_preparation, page.Time_cooking)}
            </div>
            <div class="block sm:hidden text-base font-medium leading-[150%]">
              {totalTimeSm(page.Time_preparation, page.Time_cooking)}
            </div>
          </div>
        </div>
      </div>
    </div>

    <div
      class="bg-white2 rounded-[10px] p-[15px] sm:p-5 md:p-[25px] lg:p-[35px] my-[30px]"
    >
      <div class="flex">
        <div class="w-auto recipe-sec-content-border"></div>

        <div class="grid w-full items-center gap-[15px]">
          <h3
            class="font-bold sm:font-semibold text-primary sm:text-dark2 recipe-sec-content-title"
          >
            {recurData.recipe_nutrition_information}
          </h3>

          <div class="flex items-center gap-2.5 w-full">
            <div class="text-xs font-bold leading-[150%] text-dark2">
              {recurData.recipe_yield}:
            </div>

            <div class="text-lg font-bold leading-[150%] text-primary">
              {page.Nutrition_yield}
            </div>
          </div>

          <div class="text-base md:text-lg font-bold leading-[150%] text-dark2">
            {recurData.recipe_amount_per_serving}:
          </div>

          <div
            class="grid grid-flow-row gap-[5px] recipe-sec-nutritions-container"
          >
            {
              page.Nutrition.map((item, idx) => (
                <div class="flex items-center text-base lg:text-lg leading-[150%] text-dark2">
                  <div>{item.Nutrition_name}</div>

                  <span class="mr-1">:</span>

                  <div>
                    {item.Nutrition_amount != null
                      ? item.Nutrition_amount
                      : "0"}
                    {item.Nutrition_measurements_unit}
                  </div>
                </div>
              ))
            }
          </div>
        </div>
      </div>
    </div>

    <div
      class="bg-white2 rounded-[10px] p-[15px] sm:p-5 md:p-[25px] lg:p-[35px] my-[30px]"
    >
      <div class="flex flex-wrap justify-between">
        <h3
          class="font-bold sm:font-semibold text-primary sm:text-dark2 recipe-sec-content-title"
        >
          {recurData.recipe_ingredients}
        </h3>

        <label
          class="inline-grid grid-flow-col items-center relative recipe-sec-servingsize-input-container"
        >
          <span class="text-xs leading-[150%] font-bold text-dark2">
            {recurData.recipe_serving_size}:
          </span>

          <select
            id="recipeSecServingsize"
            name="recipeSecServingsize"
            class:list={[
              "focus:ring-emerald-800 focus:ring-opacity-20 focus:outline-none focus:ring cursor-pointer",
              "max-w-[65px] md:max-w-[83px] text-lightgray2 py-[5px] pl-[11px] rounded-[7px] recipe-sec-servingsize-input",
            ]}
          >
            <option value="1">1x</option>
            <option value="2">2x</option>
            <option value="3">3x</option>
            <option value="5">5x</option>
            <option value="10">10x</option>
          </select>
        </label>
      </div>

      <div class="mt-5 md:mt-[25px] flex flex-wrap sm:flex-nowrap gap-2">
        {
          page.Cooking_part.map((item, idx) => (
            <div class="w-full sm:w-1/2">
              <h4 class="text-base md:text-lg font-bold leading-[150%] text-dark2 mb-[10px] md:mb-[15px]">
                {item.Cooking_part_name}
              </h4>

              {item.Cooking_part_ingredients.map((item, idx) => (
                <label class="inline-flex items-center w-full">
                  <div class="flex">
                    <div class="recipe-sec-ingridients-checkbox-container">
                      <input type="checkbox" />
                      <span class="recipe-sec-ingridients-checkbox" />
                    </div>
                  </div>

                  <div class="text-base md:text-lg leading-[150%] text-dark2 ml-2.5">
                    {item.Cooking_part_ingredient_amount}
                    {item.Cooking_part_ingredient_measurements_unit}
                    {item.Cooking_part_ingredient_name}
                  </div>
                </label>
              ))}
            </div>
          ))
        }
      </div>
    </div>

    <h2
      id="cooking-instructions"
      class="bg-primary alice leading-[110%] text-lightgray2 rounded-[10px] mt-[50px] recipe-sec-title"
    >
      {recurData.recipe_cooking_instructions}
    </h2>

    {
      page.Cooking_part.map((item) => (
        <div>
          <div class="bg-white2 rounded-[10px] p-[15px] sm:p-5 md:p-[25px] lg:p-[35px] my-[30px]">
            <div class="flex">
              <div class="w-auto recipe-sec-content-border" />
              <div class="w-full gap-[15px]">
                <h3
                  class="alice leading-[130%] sm:leading-[120%] text-dark2 recipe-sec-coockingpart-title"
                  id={item.Cooking_part_name.replaceAll(" ", "-")
                    .replace(/\s+/g, "")
                    .trim()}
                >
                  {item.Cooking_part_name}
                </h3>
              </div>
            </div>
          </div>

          {item.Cooking_part_steps.map((step, idx) => (
            <div
              class="bg-white2 rounded-[10px] p-[15px] sm:p-5 md:p-[25px] lg:p-[35px] my-[30px]"
              id={
                item.Cooking_part_name.replaceAll(" ", "-")
                  .replace(/\s+/g, "")
                  .trim() +
                `-step-` +
                (idx + 1)
              }
            >
              <div class="flex gap-[15px]">
                <div>
                  <div class="bg-primary flex items-center justify-center font-extrabold rounded-full recipe-sec-step-num">
                    {idx + 1}
                  </div>
                </div>
                <div class="prose max-w-none text-dark2 leading-[150%] recipe-sec-text w-auto">
                  {step.Cooking_part_steps_text}
                </div>
              </div>

              {step.Cooking_part_steps_blob.data && (
                <div class="aspect-[2/1] w-full h-full mt-2.5 sm:mt-[15px]">
                  <ClippedImg
                    id="recipe-img-curve"
                    src={
                      ASSETS_URL +
                      step.Cooking_part_steps_blob.data.attributes.url
                    }
                    alt={
                      step.Cooking_part_steps_blob.data.attributes
                        .alternativeText
                    }
                    path="M.516.008C.359.008.1-.008.039.083S.002.495.017.736.182 1 .528 1C.813 1 .902.936.974.717 1 .624 1 .395.946.128.897-.045.735.008.516.008"
                  />

                  {/* <ClippedPicture
                      id="recipe-img-curve"
                      src={
                        ASSETS_URL +
                        step.Cooking_part_steps_blob.data.attributes.url
                      }
                      alt={
                        step.Cooking_part_steps_blob.data.attributes
                          .alternativeText
                      }
                      path="M.516.008C.359.008.1-.008.039.083S.002.495.017.736.182 1 .528 1C.813 1 .902.936.974.717 1 .624 1 .395.946.128.897-.045.735.008.516.008"
                    /> */}
                </div>
              )}
            </div>
          ))}

          <div
            class={
              item.Cooking_part_step_tip === null
                ? "hidden"
                : "bg-white2 rounded-[10px] p-[15px] sm:p-5 md:p-[25px] lg:p-[35px] my-[30px]"
            }
          >
            <div class="flex flex-wrap items-center gap-2.5">
              <div class="flex items-center gap-[15px] sm:gap-5 w-full">
                <div class="recipe-sec-icon">
                  <img class="w-full h-full object-contain" {...green_bulb} />
                </div>

                <h3 class="font-bold leading-[150%] text-primary recipe-sec-tips-title">
                  {recurData.recipe_tips}
                </h3>
              </div>

              <div class="prose max-w-none font-medium sm:font-bold text-primary leading-[150%] recipe-sec-text">
                {item.Cooking_part_step_tip}
              </div>
            </div>
          </div>
        </div>
      ))
    }
  </Chapterize>

  <script slot="wake-lock-script">
    const interactionEvents = [
      "click",
      "touchstart",
      "keydown",
      "scroll",
      "mousemove",
    ];

    if ("wakeLock" in navigator) {
      const firstInteractionEventListener = () => {
        let wakeLock;

        const requestWakeLock = async () => {
          try {
            wakeLock = await navigator.wakeLock.request();
          } catch (err) {}
        };

        requestWakeLock();

        document.addEventListener("visibilitychange", () => {
          wakeLock &&
            document.visibilityState === "visible" &&
            requestWakeLock();
        });

        interactionEvents.forEach((eventType) => {
          document.removeEventListener(
            eventType,
            firstInteractionEventListener
          );
        });
      };

      interactionEvents.forEach((eventType) => {
        document.addEventListener(eventType, firstInteractionEventListener);
      });
    } else {
      const playBackgroundVideoScript = document.createElement("script");

      playBackgroundVideoScript.type = "module";
      playBackgroundVideoScript.src = "/scripts/play-background-video.js";

      document.body.appendChild(playBackgroundVideoScript);
    }
  </script>
</PostDetailsLayout>

<Schema
  item={{
    "@context": "https://schema.org",
    "@type": "Recipe",
    name: page.Title,
    image: ASSETS_URL + page.Intro_blob.data.attributes.url,
    author: {
      "@type": "Person",
      name: page.authors.data.map(
        ({ attributes }) => `${attributes.givenName}`
      ),
    },
    dateCreated: page.createdAt,
    datePublished: page.publishedAt,
    dateModified: page.updatedAt,
    description: `${(await Astro.__renderMarkdown(page.Intro_text)).replace(
      /(<([^>]+)>)/gi,
      ""
    )} ${(await Astro.__renderMarkdown(page.Block_text)).replace(
      /(<([^>]+)>)/gi,
      ""
    )}`,
    prepTime: `PT${timeSm(page.Time_preparation)
      .toUpperCase()
      .replace(/\s/g, "")}`,
    cookTime: `PT${timeSm(page.Time_cooking).toUpperCase().replace(/\s/g, "")}`,
    totalTime: `PT${totalTimeSm(page.Time_preparation, page.Time_cooking)
      .toUpperCase()
      .replace(/\s/g, "")}`,
    recipeCuisine: page.Cuisine,
    recipeCategory: page.Category,
    recipeYield: page.Nutrition_yield,
    nutrition,
    recipeIngredient: page.Cooking_part.map((item) =>
      item.Cooking_part_ingredients.map(
        (item) =>
          item.Cooking_part_ingredient_amount +
          item.Cooking_part_ingredient_measurements_unit +
          ` ` +
          item.Cooking_part_ingredient_name
      )
    ).flat(),
    recipeInstructions: page.Cooking_part.map((item) =>
      item.Cooking_part_steps.map((step, idx) => ({
        "@type": "HowToStep",
        name: item.Cooking_part_name,
        text: step.Cooking_part_steps_text,
        url: `${
          url +
          `#` +
          item.Cooking_part_name.replaceAll(" ", "-")
            .replace(/\s+/g, "")
            .trim() +
          `-step-` +
          (idx + 1)
        }`,
        image: step.Cooking_part_steps_blob.data
          ? ASSETS_URL + step.Cooking_part_steps_blob?.data?.attributes.url
          : "",
      }))
    ).flat(),
  }}
/>
