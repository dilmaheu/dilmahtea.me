---
import CMS from "@store/CMS";
import Markdown from "@components/Markdown.astro";
import getLocalizedLink from "@utils/getLocalizedLink";

const { page, recurData } = Astro.props,
  { locale } = page,
  checkoutFlowData = CMS.get("checkoutFlow").data.attributes,
  steps = checkoutFlowData.steps.split("\n"),
  shortenedSteps = checkoutFlowData.shortened_steps.split("\n"),
  checkoutInfoLink = CMS.get("checkoutInformation", locale).Meta.URL_slug,
  checkoutPaymentLink = CMS.get("checkoutPayment", locale).Meta.URL_slug;
---

<form
  id="shipping-details"
  class="section-gap flex flex-col"
  action={getLocalizedLink(locale, checkoutPaymentLink)}
>
  <input type="hidden" name="price" />

  <div class="division-gap grid">
    <h2 class="text-h2 text-primary">{page.Block_title}</h2>

    <div role="list" class="division-in-gap flex flex-col">
      {
        page.shipping_methods.data.map(
          ({ attributes: { method, cost, description, localizations } }, i) => (
            <label
              role="listitem"
              class="division-in-element-gap radio-input-extended"
            >
              <input
                type="radio"
                name="shipping_method"
                value={localizations?.data[0]?.attributes?.method || method}
                data-cost={cost}
                checked={i === 0 ? "" : undefined}
                class="peer hidden"
              />

              <span>
                <span class="radio-input-label">
                  <span class="shipping-method">{method}</span>
                  &#x2022;
                  <span class="shipping-cost">
                    â‚¬{cost.toFixed(2).toString().replace(".", ",")}
                  </span>
                </span>

                <div class="prose-text radio-input-text">
                  <Markdown>{description}</Markdown>
                </div>
              </span>
            </label>
          ),
        )
      }
    </div>
  </div>

  <div class="checkout-button-container">
    <a href={checkoutInfoLink} class="button-link-primary-large">
      <span class="sm:hidden">
        {`${recurData.text_return_to} ${shortenedSteps[0]?.toLowerCase()}`}
      </span>
      <span class="hidden sm:block">
        {`${recurData.text_return_to} ${steps[0]?.toLowerCase()}`}
      </span>
    </a>

    <button class="w-full sm:max-w-[250px] button-primary-large">
      {`${recurData.text_continue_to} ${shortenedSteps[2]?.toLowerCase()}`}
    </button>
  </div>
</form>

<script>
  const shippingDetailsForm = document.getElementById("shipping-details"),
    priceInputElement = document.querySelector(
      "input[name='price']",
    ) as HTMLInputElement;

  let shippingCostInputElement = document.querySelector(
    "input[name='shipping_cost']",
  ) as HTMLInputElement;

  const updateCheckoutInfo = (input) => {
    const isShippingMethodInput = input.name === "shipping_method";

    window.checkoutInfo[input.name] = input.value;

    if (isShippingMethodInput) {
      window.checkoutInfo.shipping_cost = input.getAttribute("data-cost");
    }

    isShippingMethodInput && window.cart.updateUI(window.cart);

    localStorage.setItem("checkout-info", JSON.stringify(window.checkoutInfo));

    priceInputElement.value = window.cart.total.split(",").join(".");

    if (!shippingCostInputElement) {
      shippingCostInputElement = document.createElement("input");

      shippingCostInputElement.type = "hidden";
      shippingCostInputElement.name = "shipping_cost";
      shippingCostInputElement.value = window.checkoutInfo.shipping_cost;

      shippingDetailsForm.prepend(shippingCostInputElement);
    }
  };

  if (shippingDetailsForm) {
    const shippingDetailsFormSelectables = [
        ...shippingDetailsForm.querySelectorAll<HTMLElement>("input, button"),
      ],
      shippingMethodInputs = shippingDetailsForm.querySelectorAll(
        'input[type="radio"]',
      );

    shippingDetailsFormSelectables.forEach((selectable, i) => {
      if (selectable.tagName === "INPUT") {
        selectable.addEventListener("keydown", (event: KeyboardEvent) => {
          if (event.key === "Enter") {
            event.preventDefault();

            const nextButton = shippingDetailsFormSelectables
              .slice(i + 1)
              .find(({ tagName }) => tagName === "BUTTON");

            nextButton.click();
          }
        });
      }
    });

    shippingMethodInputs.forEach((input: HTMLInputElement) => {
      const { shipping_cost, shipping_method } = window.checkoutInfo;

      if (!(shipping_cost && shipping_method) && input.checked) {
        updateCheckoutInfo(input);
      } else if (input.value === shipping_method) {
        input.checked = true;
      }

      // the click event is named poorly, it handles all kinds of activation
      input.addEventListener("click", () => updateCheckoutInfo(input));
    });
  }
</script>
