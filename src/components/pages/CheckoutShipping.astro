---
import CMS from "@store/CMS";
import DynamicHTML from "@components/DynamicHTML.astro";
import OrderSummary from "@components/OrderSummary.astro";
import shouldDisplayExperimentals from "@utils/shouldDisplayExperimentals";

const { page } = Astro.props,
  { locale } = page,
  checkoutRecurData = CMS.get("checkoutRecurringElement", locale);

const checkoutInfoLink = `/${locale}/${
    CMS.get("checkoutInformation", locale).Meta.URL_slug
  }/`,
  checkoutKindnessLink = `/${locale}/${
    CMS.get("checkoutKindness", locale).Meta.URL_slug
  }/`;
---

<style lang="scss">
  @use "src/styles/poly-fluid" as *;

  .shipping-detail {
    @apply flex flex-col gap-1.5;

    div {
      &:first-of-type {
        @apply font-bold text-black-light;

        font-size: poly-fluid-clamp(
          (
            640px: 16px,
            1440px: 18px,
          )
        );
      }

      &:last-of-type {
        @apply flex justify-between;

        gap: poly-fluid-clamp(
          (
            640px: 20px,
            1440px: 68px,
          )
        );

        p {
          @apply text-primary grow;

          font-size: poly-fluid-clamp(
            (
              640px: 18px,
              1440px: 24px,
            )
          );
        }

        a {
          @apply font-semibold text-primary leading-[130%];

          font-size: poly-fluid-clamp(
            (
              640px: 18px,
              1440px: 24px,
            )
          );
        }
      }
    }
  }
</style>

<script
  define:vars={{
    checkoutInfoLink,
    checkoutKindnessLink,
  }}
>
  if (Object.keys(window.checkoutInfo).length === 0) {
    location.href = checkoutInfoLink;
  }

  window.checkoutKindnessLink = checkoutKindnessLink;
</script>

<section class="w-full xl:w-2/3">
  <form
    method="POST"
    id="shipping-details"
    class="section-gap flex flex-col"
    action={shouldDisplayExperimentals
      ? "https://dev.pay.scripts.dilmahtea.me"
      : "https://pay.scripts.dilmahtea.me"}
  >
    <DynamicHTML
      htmlFn={() => {
        const { origin, pathname } = location;

        const product_desc = Object.keys(window.cart)
          .map((id) => {
            const productData = window.cart[id],
              names = JSON.parse(productData.names),
              name = names[window.preferredLocale] || names["en"];

            return `${productData.quantity}x ${name}`;
          })
          .join(", ");

        const paymentInfo = {
          ...window.checkoutInfo,
          product_desc,
          cart: JSON.stringify(window.cart),
          tax: window.cart.tax.split(",").join("."),
          price: window.cart.total.split(",").join("."),
          payment_type: "ecommerce",
          locale: window.preferredLocale,
          origin_url: origin + pathname,
          success_url: `${origin}${window.checkoutKindnessLink}?clear=cart`,
        };

        delete paymentInfo.delivery_address;

        return Object.keys(paymentInfo)
          .map(
            (name) =>
              `<input type="hidden" name="${name}" value='${paymentInfo[name]}' />`,
          )
          .join("");
      }}
    />

    <div
      role="list"
      aria-label={page.Aria_label_kindness_delivery_address_section_text}
      class="p-4 gap-6 flex flex-col bg-secondary-light rounded-2xl"
    >
      <div
        role="listitem"
        aria-label={page.Aria_label_email_address_text}
        class="shipping-detail"
      >
        <div>{page.text_contact}</div>

        <div>
          <p>
            <DynamicHTML htmlFn={() => window.checkoutInfo.email} />
          </p>

          <a
            aria-label={`${page.Aria_label_change_text} ${page.Aria_label_email_address_text}`}
            href={checkoutInfoLink + "?change=email"}
          >
            {page.text_change}
          </a>
        </div>
      </div>

      <div class="border border-black-light opacity-80"></div>

      <div
        role="listitem"
        aria-label={page.Aria_label_delivery_address_text}
        class="shipping-detail"
      >
        <div>{page.text_delivery_address}</div>

        <div>
          <p>
            <DynamicHTML htmlFn={() => window.checkoutInfo.delivery_address} />
          </p>

          <a
            aria-label={`${page.Aria_label_change_text} ${page.Aria_label_delivery_address_text}`}
            href={checkoutInfoLink + "?change=street"}
          >
            {page.text_change}
          </a>
        </div>
      </div>
    </div>

    <div
      role="list"
      aria-label={page.text_shipping_method}
      class="flex flex-col gap-4"
    >
      <h2 class="recoleta text-h2 text-primary">{page.text_shipping_method}</h2>

      {
        page.shipping_methods.data.map(
          ({ attributes: { method, cost, description, localizations } }, i) => (
            <label
              role="listitem"
              class="gap-5 flex items-center cursor-pointer"
            >
              <div>
                <input
                  type="radio"
                  name="shipping_method"
                  value={localizations?.data[0]?.attributes?.method || method}
                  data-cost={cost}
                  class:list={[
                    "hover:brightness-50 active:brightness-150 block",
                    "appearance-none w-5 h-5 flex items-center justify-center border-2 border-primary rounded-full",
                    "checked:before:block before:hidden before:w-2 before:h-2 before:bg-primary before:rounded-full",
                  ]}
                  checked={i === 0 ? "" : undefined}
                  required
                />
              </div>

              <div class="division-in-element-gap grid">
                <span class="flex items-center gap-2 text-b3 font-bold text-black">
                  <span class="shipping-method">{method}</span>
                  <span>&#x2022;</span>
                  <span class="shipping-cost recoleta text-h5">
                    â‚¬{cost.toFixed(2).toString().replace(".", ",")}
                  </span>
                </span>

                <span class="text-b5 text-black-light">{description}</span>
              </div>
            </label>
          ),
        )
      }
    </div>

    <div class="block lg:hidden">
      <OrderSummary page={page} />
    </div>

    <div
      class="flex flex-col sm:flex-row items-center justify-center sm:justify-start gap-9 sm:gap-12"
    >
      <button
        type="submit"
        class="w-full sm:w-auto py-4 px-20 sm:px-24 bg-primary text-white font-bold rounded-full"
      >
        {checkoutRecurData.text_continue_to_payment}
      </button>

      <a href={checkoutInfoLink} class="text-primary font-bold">
        {checkoutRecurData.text_return_to_information}
      </a>
    </div>
  </form>
</section>

<section
  role="complementary"
  aria-label={checkoutRecurData.text_order_summary}
  class="hidden xl:block xl:w-1/3 xl:border xl:border-l-primary-light"
>
  <OrderSummary page={page} />
</section>

<script>
  const shippingDetailsForm = document.getElementById("shipping-details"),
    priceInputElement = document.querySelector(
      "input[name='price']",
    ) as HTMLInputElement;

  let shippingCostInputElement = document.querySelector(
    "input[name='shipping_cost']",
  ) as HTMLInputElement;

  const updateCheckoutInfo = (input) => {
    const isShippingMethodInput = input.name === "shipping_method";

    window.checkoutInfo[input.name] = input.value;

    if (isShippingMethodInput) {
      window.checkoutInfo.shipping_cost = input.getAttribute("data-cost");
    }

    isShippingMethodInput && window.cart.updateUI(window.cart);

    localStorage.setItem("checkout-info", JSON.stringify(window.checkoutInfo));

    priceInputElement.value = window.cart.total.split(",").join(".");

    if (!shippingCostInputElement) {
      shippingCostInputElement = document.createElement("input");

      shippingCostInputElement.type = "hidden";
      shippingCostInputElement.name = "shipping_cost";
      shippingCostInputElement.value = window.checkoutInfo.shipping_cost;

      shippingDetailsForm.prepend(shippingCostInputElement);
    }
  };

  if (shippingDetailsForm) {
    const shippingDetailsFormSelectables = [
        ...shippingDetailsForm.querySelectorAll<HTMLElement>("input, button"),
      ],
      shippingMethodInputs = shippingDetailsForm.querySelectorAll(
        'input[type="radio"]',
      );

    shippingDetailsFormSelectables.forEach((selectable, i) => {
      if (selectable.tagName === "INPUT") {
        selectable.addEventListener("keydown", (event: KeyboardEvent) => {
          if (event.key === "Enter") {
            event.preventDefault();

            const nextButton = shippingDetailsFormSelectables
              .slice(i + 1)
              .find(({ tagName }) => tagName === "BUTTON");

            nextButton.click();
          }
        });
      }
    });

    shippingMethodInputs.forEach((input: HTMLInputElement) => {
      const { shipping_cost, shipping_method } = window.checkoutInfo;

      if (!(shipping_cost && shipping_method) && input.checked) {
        updateCheckoutInfo(input);
      } else if (input.value === shipping_method) {
        input.checked = true;
      }

      // the click event is named poorly, it handles all kinds of activation
      input.addEventListener("click", () => updateCheckoutInfo(input));
    });
  }
</script>
