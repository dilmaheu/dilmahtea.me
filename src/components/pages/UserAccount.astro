---
import Markdown from "@components/Markdown.astro";
import AdvancedNotification from "@components/AdvancedNotification.astro";

import RecurringImages from "@store/RecurringImages";

import localizeCMSImage from "@utils/localizeCMSImage";
import getUserAccountPagesLink from "@utils/getUserAccountPagesLink";

const { green_cup } = RecurringImages;

const { page, recurData } = Astro.props,
  { UID, locale, Form: form, Social_media, Block_text: block_text } = page;

const {
  text_email_address: textEmail,
  text_phone: textMobileNumber,
  email_address_placeholder,
  text_phone,
  phone_placeholder,
  text_first_name,
  first_name_placeholder,
  text_last_name,
  last_name_placeholder,
  text_or,
} = recurData;

const isEmailOrPhoneForm = form?.Email_or_phone,
  displaySocialMedia =
    Social_media && Object.values(Social_media).some((value) => value);

function fromEntries(array) {
  const formInputItems = Object.fromEntries(Object.entries(array).slice(0, 4)),
    formIputs = Object.values(formInputItems).filter(
      (val) => val === true,
    ).length;

  return formIputs;
}

const verificationHref = getUserAccountPagesLink("verification", locale),
  congratsHref = getUserAccountPagesLink("congrats", locale),
  linkPageHref = getUserAccountPagesLink("link", locale);
---

<style lang="scss">
  @use "src/styles/colors";
  @use "src/styles/poly-fluid" as *;

  .form-container {
    label {
      input {
        &:disabled {
          @apply cursor-not-allowed bg-black-light/10;
        }
      }

      input:is([type="text"], [type="email"])::placeholder {
        color: colors.$black-light;
      }
    }
  }

  .social-media-icon-container {
    @apply bg-white rounded-full;

    width: poly-fluid-clamp-primary(40px, 60px);
    height: poly-fluid-clamp-primary(40px, 60px);
    padding: poly-fluid-clamp-primary(10px, 15px);
  }

  .error-notification {
    margin-top: poly-fluid-clamp-primary(25px, 30px);
  }
</style>

<div class="relative z-5">
  <div class="hero-sub-menu-shadow nav-bg hidden"></div>
</div>

<div class="wrapper section-in-v-pad">
  <div class="division-gap grid md:max-w-[748px] mx-auto">
    <div role="banner" class="grid division-gap">
      {
        page.Intro_blob?.data && (
          <div class="md:max-h-[300px] mx-auto">
            <img
              class="w-full h-full object-contain"
              src={await localizeCMSImage(
                page.Intro_blob?.data?.attributes?.url,
              )}
              alt={page.Intro_blob?.data?.attributes?.alternativeText}
            />
          </div>
        )
      }

      <h1 class="text-h1 text-primary text-center">
        {page.Title}

        <span class="inline-block heading-inline-icon">
          <img class="w-full h-full" {...green_cup} />
        </span>
      </h1>
    </div>

    {
      page.Intro_text && (
        <div class="prose-text text-center">
          <Markdown>{page.Intro_text}</Markdown>
        </div>
      )
    }

    <section id="account-action" class="w-full mx-auto">
      <div
        class:list={[
          form?.Blob?.data
            ? "division-gap grid md:grid-cols-2 items-center"
            : "flex flex-wrap justify-center w-full",
        ]}
      >
        <div class="division-gap grid w-full">
          {
            form && (
              <form>
                <div class:list={["division-gap grid form-container w-full"]}>
                  {isEmailOrPhoneForm ? (
                    <div class="form-gap grid w-full max-w-[360px] mx-auto">
                      <div class="input-default">
                        <label>
                          {textEmail}

                          <input
                            type="email"
                            name="email"
                            placeholder={email_address_placeholder}
                            required
                          />
                        </label>
                      </div>

                      <div class="form-item w-full">
                        <div class="flex items-center">
                          <span class="w-full h-px bg-primary-lightest" />
                          <span class="text-black-light px-3">{text_or}</span>
                          <span class="w-full h-px bg-primary-lightest" />
                        </div>
                      </div>

                      <div class="input-default">
                        <label>
                          {text_phone}

                          <input
                            type="tel"
                            name="phone"
                            placeholder={phone_placeholder}
                            required
                          />
                        </label>
                      </div>
                    </div>
                  ) : (
                    <div
                      class:list={[
                        form?.Blob?.data
                          ? "form-gap grid w-full"
                          : "form-grid w-full",
                      ]}
                    >
                      {form.First_name && (
                        <div class="input-default">
                          <label>
                            {text_first_name}

                            <input
                              class="w-full"
                              type="text"
                              name="first_name"
                              placeholder={first_name_placeholder}
                              required
                            />
                          </label>
                        </div>
                      )}

                      {form.Last_name && (
                        <div class="input-default">
                          <label>
                            {text_last_name}

                            <input
                              type="text"
                              name="last_name"
                              placeholder={last_name_placeholder}
                              required
                            />
                          </label>
                        </div>
                      )}

                      {form.Email && (
                        <div class="input-default">
                          <label>
                            {textEmail}

                            <input
                              type="email"
                              name="email"
                              placeholder={email_address_placeholder}
                              required
                            />
                          </label>
                        </div>
                      )}

                      {form.Phone && (
                        <div class="input-default">
                          <label>
                            {text_phone}

                            <input
                              type="tel"
                              name="phone"
                              placeholder={phone_placeholder}
                              required
                            />
                          </label>
                        </div>
                      )}
                    </div>
                  )}

                  <div class="grid w-full max-w-[360px] mx-auto">
                    <button class="button-primary-large !w-full submit-btn">
                      {form?.Submit_button_text}
                    </button>

                    <div class="error-notification hidden">
                      <AdvancedNotification
                        Title={null}
                        Type="Error"
                        Bordered={true}
                        Rounded={true}
                      />
                    </div>
                  </div>
                </div>
              </form>
            )
          }

          <div class="form-container division-gap grid w-full mx-auto">
            <!-- {
              displaySocialMedia && (
                <div class="flex items-center w-full max-w-[360px] mx-auto">
                  <span class="w-full h-px bg-primary-lightest" />
                  <span class="text-black-light px-3">{text_or}</span>
                  <span class="w-full h-px bg-primary-lightest" />
                </div>
              )
            } -->

            {
              block_text && (
                <div
                  class:list={[
                    "block-text prose-text-sm no-pad-mar-child text-center",
                    (isEmailOrPhoneForm || (form && fromEntries(form) === 1)) &&
                      "w-full !max-w-[360px] mx-auto overflow-hidden",
                  ]}
                >
                  <Markdown>{block_text}</Markdown>
                </div>
              )
            }

            <!-- {
              displaySocialMedia && (
                <div
                  class:list={[
                    "grid-gap flex flex-wrap justify-center text-center",
                    (isEmailOrPhoneForm || (form && fromEntries(form) === 1)) &&
                      "w-full max-w-[360px]",
                  ]}
                >
                  {Social_media.Facebook && (
                    <div class="social-media-icon-container">
                      <img
                        class="w-full h-full"
                        src={await localizeCMSImage(
                          fb_icon?.data?.attributes.url,
                        )}
                        alt={fb_icon?.data?.attributes.alternativeText}
                      />
                    </div>
                  )}

                  {Social_media.Google && (
                    <div class="social-media-icon-container">
                      <img
                        class="w-full h-full"
                        src={await localizeCMSImage(
                          g_icon?.data?.attributes.url,
                        )}
                        alt={g_icon?.data?.attributes.alternativeText}
                      />
                    </div>
                  )}

                  {Social_media.Twitter && (
                    <div class="social-media-icon-container">
                      <img
                        class="w-full h-full"
                        src={await localizeCMSImage(
                          twitter_icon?.data?.attributes.url,
                        )}
                        alt={twitter_icon?.data?.attributes.alternativeText}
                      />
                    </div>
                  )}
                </div>
              )
            } -->

            {
              page?.Button_text && (
                <div class="grid">
                  <div class="form-gap flex flex-wrap justify-center text-center items-center">
                    {page?.Button_pretext && (
                      <div class="text-b5 text-black-light">
                        {page?.Button_pretext}
                      </div>
                    )}

                    <button class="button-primary-large w-full max-w-[360px]">
                      {page?.Button_text}
                    </button>
                  </div>

                  <div class="error-notification hidden">
                    <AdvancedNotification
                      Title={null}
                      Type="Error"
                      Bordered={true}
                      Rounded={true}
                    />
                  </div>
                </div>
              )
            }
          </div>
        </div>

        {
          form?.Blob?.data && (
            <img
              class="w-full max-h-[300px]"
              src={await localizeCMSImage(form.Blob.data.attributes.url)}
              alt={form.Blob.data.attributes?.alternativeText}
            />
          )
        }
      </div>
    </section>
  </div>
</div>

<script
  define:vars={{
    UID,
    verificationHref,
    linkPageHref,
    congratsHref,
    textEmail,
    textMobileNumber,
  }}
>
  const accountActionSection = document.getElementById("account-action");

  const form = accountActionSection.querySelector("form"),
    ctaButton = accountActionSection.querySelector("button"),
    blockText = accountActionSection.querySelector(".block-text"),
    errorNotification = accountActionSection.querySelector(
      ".error-notification",
    ),
    errorNotificationContent = errorNotification.querySelector(
      ".notification-content",
    );

  const searchParams = Object.fromEntries(new URLSearchParams(location.search));

  function updateTimeLeft() {
    ctaButton.disabled = true;

    const { innerText: buttonText } = ctaButton;

    let timeLeft = 61;

    const updateTimeLeft = () => {
      timeLeft -= 1;

      ctaButton.innerText = buttonText + ` (${timeLeft})`;
    };

    updateTimeLeft();

    const setTimeLeftID = setInterval(updateTimeLeft, 1000);

    setTimeout(() => {
      ctaButton.disabled = false;
      ctaButton.innerText = buttonText;

      clearInterval(setTimeLeftID);
    }, 60000);
  }

  function continueToWhereLeft() {
    location.href = searchParams.referrer;
  }

  switch (UID) {
    case "login":
      const formInputs = form.querySelectorAll("input");

      formInputs.forEach((input, i) => {
        const disableOtherInput = () => {
          formInputs[i === 0 ? 1 : 0].disabled = input.value.length > 0;
        };

        disableOtherInput();

        input.addEventListener("input", disableOtherInput);
      });

      break;

    case "verification":
      updateTimeLeft();

      const contact = searchParams.email || searchParams.phone;

      blockText.innerHTML = blockText.innerHTML.replace(
        "&lt;contact&gt;",
        contact,
      );

      break;

    case "signup":
      {
        const { email } = searchParams;

        blockText.innerHTML = blockText.innerHTML
          .replace(
            "&lt;alternate_contact_type&gt;",
            email ? textMobileNumber : textEmail,
          )
          .replace(linkPageHref, linkPageHref + location.search);
      }

      break;

    case "link":
      {
        const { email } = searchParams,
          inputToHide = form.querySelector(
            "input[name=" + (email ? "email" : "phone") + "]",
          );

        inputToHide.parentElement.remove();
      }

      break;

    case "congrats":
      setTimeout(continueToWhereLeft, 5000);

      break;

    default:
      break;
  }

  async function sendRequest({ url, data, onSuccess }) {
    errorNotification.classList.add("hidden");

    const response = await fetch(url, {
      method: "POST",
      body: JSON.stringify(data),
    })
      .then((res) => res.text())
      .then((text) => {
        try {
          return JSON.parse(text);
        } catch (error) {
          return { message: "Something went wrong" };
        }
      });

    if (response.success) {
      onSuccess(response);
    } else {
      errorNotificationContent.textContent = response.message;

      errorNotification.classList.remove("hidden");
    }
  }

  ctaButton.addEventListener("click", async (event) => {
    event.preventDefault();

    formdata = form && Object.fromEntries(new FormData(form));

    switch (UID) {
      case "login":
        {
          await sendRequest({
            url: "/account/send-magic-link",
            data: {
              action: "login",
              ...formdata,
              referrer: document.referrer,
              locale: window.preferredLocale,
            },
            onSuccess: () => {
              const queryParams = new URLSearchParams({
                [formdata.email ? "email" : "phone"]:
                  formdata.email || formdata.phone,
                referrer: document.referrer,
              }).toString();

              location.href = verificationHref + "?" + queryParams;
            },
          });
        }

        break;

      case "verification":
        {
          const { email, phone, referrer } = searchParams;

          await sendRequest({
            url: "/account/send-magic-link",
            data: {
              action: "login",
              email,
              phone,
              referrer,
              locale: window.preferredLocale,
            },
            onSuccess: updateTimeLeft,
          });
        }

        break;

      case "signup":
        {
          await sendRequest({
            url: "/account/signup",
            data: {
              ...formdata,
              token: searchParams.token,
            },
            onSuccess: (response) => {
              location.href =
                congratsHref +
                "?" +
                new URLSearchParams({ referrer: response.referrer }).toString();
            },
          });
        }

        break;

      case "link":
        {
          await sendRequest({
            url: "/account/send-magic-link",
            data: {
              action: "link",
              ...formdata,
              token: searchParams.token,
            },
            onSuccess: (response) => {
              const queryParams = new URLSearchParams({
                contact: formdata.email || formdata.phone,
                referrer: response.referrer,
              }).toString();

              location.href = verificationHref + "?" + queryParams;
            },
          });
        }

        break;

      case "congrats":
        continueToWhereLeft();

        break;

      default:
        break;
    }
  });
</script>
