---
import Markdown from "@components/Markdown.astro";

import CMS from "@store/CMS";
import RecurringImages from "@store/RecurringImages";
import getUserAccountPagesLink from "@utils/getUserAccountPagesLink";
import localizeCMSImage from "@utils/localizeCMSImage";

const { green_cup } = RecurringImages;

const { page } = Astro.props,
  {
    UID,
    locale,
    Form: form,
    Social_media: social_media,
    Block_text: block_text,
  } = page;

const userAccountRecurData = CMS.get("userAccountRecurringElement", locale);

const {
  Facebook_icon: fb_icon,
  Google_icon: g_icon,
  Twitter_icon: twitter_icon,
  text_email: textEmail,
  text_mobile_number: textMobileNumber,
} = userAccountRecurData;

const isEmailOrPhoneForm = form?.Email_or_phone;

function fromEntries(array) {
  const formInputItems = Object.fromEntries(Object.entries(array).slice(0, 4)),
    formIputs = Object.values(formInputItems).filter(
      (val) => val === true,
    ).length;

  return formIputs;
}

const verificationHref = getUserAccountPagesLink("verification", locale),
  congratsHref = getUserAccountPagesLink("congrats", locale),
  linkPageHref = getUserAccountPagesLink("link", locale);
---

<style lang="scss">
  @use "src/styles/colors";

  .form-heading-icon {
    height: clamp(38px, 3.5vw + 6px, 58px);
  }

  .form-grid {
    @apply gap-x-[35px] gap-y-[25px];

    label {
      @apply w-full md:w-[330px] lg:w-[350px] text-[1.125rem] font-bold leading-[150%] text-black-light;

      width: 100%;
      color: colors.$input-label;

      @media (min-width: 768px) {
        width: 330px;
      }

      @media (min-width: 1024px) {
        width: 350px;
      }

      input {
        border: 1px solid colors.$primary;

        @apply block w-full mt-2.5 px-4 py-3 text-lg font-normal leading-[115%] text-black rounded-full bg-transparent;
        @apply focus:ring-emerald-800 focus:ring-opacity-20 focus:outline-none focus:ring;

        &:disabled {
          @apply cursor-not-allowed bg-black-light/10;
        }
      }

      input:is([type="text"], [type="email"])::placeholder {
        color: colors.$input;

        @apply text-[1.125rem];
      }
    }

    .form-item {
      @apply w-full md:w-[330px] lg:w-[350px] mx-auto;
    }
  }
</style>

<div class="wrapper py-[50px]">
  <div role="banner">
    {
      page.Intro_blob?.data && (
        <div class="w-full h-full md:max-w-[740px] p-2.5 mb-[35px] mx-auto">
          <img
            class="w-full max-h-[330px] object-contain"
            src={await localizeCMSImage(page.Intro_blob?.data?.attributes?.url)}
            alt={page.Intro_blob?.data?.attributes?.alternativeText}
          />
        </div>
      )
    }

    <h1 class="hero-title recoleta text-primary text-center">
      {page.Title}

      {" "}

      <span class="icon heading-inline-icon">
        <img class="w-full h-full" {...green_cup} />
      </span>
    </h1>
  </div>

  {
    page.Intro_text && (
      <div
        class:list={[
          "hero-text prose-text prose pt-2.5 mx-auto",
          "w-full md:max-w-[740px] text-black-light text-center",
        ]}
      >
        <Markdown>{page.Intro_text}</Markdown>
      </div>
    )
  }

  <section id="account-action" class="w-full md:max-w-[740px] mx-auto">
    <div
      class:list={[
        form?.Blob?.data
          ? "grid md:grid-cols-2 items-center gap-[35px]"
          : "flex flex-wrap justify-center",
      ]}
    >
      <div>
        {
          form && (
            <form>
              <div
                class:list={[
                  "flex flex-wrap form-grid mt-[35px]",
                  form && fromEntries(form) === 1
                    ? "justify-center"
                    : "justify-between",
                ]}
              >
                {isEmailOrPhoneForm ? (
                  <div class="grid gap-[15px] w-full">
                    <label class="mx-auto">
                      {userAccountRecurData.Input_label_email}

                      <input
                        type="email"
                        name="email"
                        placeholder={
                          userAccountRecurData.Input_placeholder_email
                        }
                        required
                      />
                    </label>

                    <div class="form-item w-full">
                      <div class="flex items-center">
                        <span class="w-full h-px bg-black" />
                        <span class="text-black-light px-3">
                          {userAccountRecurData.Social_media_divider_or_text}
                        </span>
                        <span class="w-full h-px bg-black" />
                      </div>
                    </div>

                    <label class="mx-auto">
                      {userAccountRecurData.Input_label_phone}

                      <input
                        type="tel"
                        name="phone"
                        placeholder={
                          userAccountRecurData.Input_placeholder_phone
                        }
                        required
                      />
                    </label>
                  </div>
                ) : (
                  <>
                    {form.First_name && (
                      <label>
                        {userAccountRecurData.Input_label_first_name}

                        <input
                          type="text"
                          name="first_name"
                          placeholder={
                            userAccountRecurData.Input_placeholder_first_name
                          }
                          required
                        />
                      </label>
                    )}

                    {form.Last_name && (
                      <label>
                        {userAccountRecurData.Input_label_last_name}

                        <input
                          type="text"
                          name="last_name"
                          placeholder={
                            userAccountRecurData.Input_placeholder_last_name
                          }
                          required
                        />
                      </label>
                    )}

                    {form.Email && (
                      <label>
                        {userAccountRecurData.Input_label_email}

                        <input
                          type="email"
                          name="email"
                          placeholder={
                            userAccountRecurData.Input_placeholder_email
                          }
                          required
                        />
                      </label>
                    )}

                    {form.Phone && (
                      <label>
                        {userAccountRecurData.Input_label_phone}

                        <input
                          type="tel"
                          name="phone"
                          placeholder={
                            userAccountRecurData.Input_placeholder_phone
                          }
                          required
                        />
                      </label>
                    )}
                  </>
                )}

                <div class="w-full flex flex-col justify-center">
                  <button
                    class:list={[
                      "font-bold text-white bg-primary rounded-full",
                      "w-full md:w-fit md:min-w-[330px] lg:min-w-[350px] py-3 px-[35px] mt-2.5 mx-auto",
                    ]}
                  >
                    {form?.Submit_button_text}
                  </button>

                  <strong>
                    <p class="text-error pt-4 -mb-4 text-center" />
                  </strong>
                </div>
              </div>
            </form>
          )
        }

        <div class="flex flex-wrap mx-auto justify-between form-grid">
          <div class="w-full">
            {
              social_media && (
                <div class="form-item mt-[35px]">
                  <div class="flex items-center">
                    <span class="w-full h-px bg-black" />
                    <span class="text-black-light px-3">
                      {userAccountRecurData.Social_media_divider_or_text}
                    </span>
                    <span class="w-full h-px bg-black" />
                  </div>
                </div>
              )
            }

            {
              block_text && (
                <div
                  class:list={[
                    "block-text prose-text prose max-w-none mt-[35px] text-center text-black-light",
                    (isEmailOrPhoneForm || (form && fromEntries(form) === 1)) &&
                      "form-item",
                  ]}
                >
                  <Markdown>{block_text}</Markdown>
                </div>
              )
            }

            {
              social_media && (
                <div
                  class:list={[
                    "flex flex-wrap gap-[25px] justify-center mt-[25px] text-center text-black-light",
                    (isEmailOrPhoneForm || (form && fromEntries(form) === 1)) &&
                      "form-item",
                  ]}
                >
                  {social_media.Facebook && (
                    <div class="w-[70px] h-[70px] p-3 bg-secondary-light rounded-full">
                      <img
                        class="w-full h-full"
                        src={await localizeCMSImage(
                          fb_icon?.data?.attributes.url,
                        )}
                        alt={fb_icon?.data?.attributes.alternativeText}
                      />
                    </div>
                  )}
                  {social_media.Google && (
                    <div class="w-[70px] h-[70px] p-3 bg-secondary-light rounded-full">
                      <img
                        class="w-full h-full"
                        src={await localizeCMSImage(
                          g_icon?.data?.attributes.url,
                        )}
                        alt={g_icon?.data?.attributes.alternativeText}
                      />
                    </div>
                  )}
                  {social_media.Twitter && (
                    <div class="w-[70px] h-[70px] p-3 bg-secondary-light rounded-full">
                      <img
                        class="w-full h-full"
                        src={await localizeCMSImage(
                          twitter_icon?.data?.attributes.url,
                        )}
                        alt={twitter_icon?.data?.attributes.alternativeText}
                      />
                    </div>
                  )}
                </div>
              )
            }

            {
              page?.Button_text && (
                <div class="flex flex-col">
                  <div class="flex flex-wrap justify-center text-center items-center gap-[25px] mt-[15px]">
                    {page?.Button_pretext && (
                      <div class="text-black-light">{page?.Button_pretext}</div>
                    )}

                    <button
                      class:list={[
                        "flex justify-center rounded-full font-bold text-white py-3 px-[35px]",
                        "bg-primary cursor-pointer disabled:bg-slate disabled:cursor-not-allowed",
                      ]}
                    >
                      {page?.Button_text}
                    </button>
                  </div>

                  <strong>
                    <p class="text-error pt-4 -mb-4 text-center" />
                  </strong>
                </div>
              )
            }
          </div>
        </div>
      </div>

      {
        form?.Blob?.data && (
          <img
            class="w-full max-h-[320px] p-2.5 mt-[35px]"
            src={await localizeCMSImage(form.Blob.data.attributes.url)}
            alt={form.Blob.data.attributes?.alternativeText}
          />
        )
      }
    </div>
  </section>
</div>

<script
  define:vars={{
    UID,
    verificationHref,
    linkPageHref,
    congratsHref,
    textEmail,
    textMobileNumber,
  }}
>
  const accountActionSection = document.getElementById("account-action");

  const form = accountActionSection.querySelector("form"),
    ctaButton = accountActionSection.querySelector("button"),
    errorArea = accountActionSection.querySelector(".text-error"),
    blockText = accountActionSection.querySelector(".block-text");

  const searchParams = Object.fromEntries(new URLSearchParams(location.search));

  function updateTimeLeft() {
    ctaButton.disabled = true;

    const { innerText: buttonText } = ctaButton;

    let timeLeft = 61;

    const updateTimeLeft = () => {
      timeLeft -= 1;

      ctaButton.innerText = buttonText + ` (${timeLeft})`;
    };

    updateTimeLeft();

    const setTimeLeftID = setInterval(updateTimeLeft, 1000);

    setTimeout(() => {
      ctaButton.disabled = false;
      ctaButton.innerText = buttonText;

      clearInterval(setTimeLeftID);
    }, 60000);
  }

  function continueToWhereLeft() {
    location.href = searchParams.referrer;
  }

  switch (UID) {
    case "login":
      const formInputs = form.querySelectorAll("input");

      formInputs.forEach((input, i) => {
        input.addEventListener("input", () => {
          const { value } = input;

          formInputs[i === 0 ? 1 : 0].disabled = value.length > 0;
        });
      });

      break;

    case "verification":
      updateTimeLeft();

      const contact = searchParams.email || searchParams.phone;

      blockText.innerHTML = blockText.innerHTML.replace(
        "&lt;contact&gt;",
        contact,
      );

      break;

    case "signup":
      {
        const { email } = searchParams;

        blockText.innerHTML = blockText.innerHTML
          .replace(
            "&lt;alternate_contact_type&gt;",
            email ? textMobileNumber : textEmail,
          )
          .replace(linkPageHref, linkPageHref + location.search);
      }

      break;

    case "link":
      {
        const { email } = searchParams,
          inputToHide = form.querySelector(
            "input[name=" + (email ? "email" : "phone") + "]",
          );

        inputToHide.parentElement.remove();
      }

      break;

    case "congrats":
      setTimeout(continueToWhereLeft, 5000);

      break;

    default:
      break;
  }

  async function sendRequest({ url, data, onSuccess }) {
    errorArea.textContent = "";

    const response = await fetch(url, {
      method: "POST",
      body: JSON.stringify(data),
    })
      .then((res) => res.text())
      .then((text) => {
        try {
          return JSON.parse(text);
        } catch (error) {
          return { message: "Something went wrong" };
        }
      });

    if (response.success) {
      onSuccess(response);
    } else {
      errorArea.textContent = response.message;
    }
  }

  ctaButton.addEventListener("click", async (event) => {
    event.preventDefault();

    formdata = form && Object.fromEntries(new FormData(form));

    switch (UID) {
      case "login":
        {
          await sendRequest({
            url: "/account/send-magic-link",
            data: {
              action: "login",
              ...formdata,
              referrer: document.referrer,
              locale: window.preferredLocale,
            },
            onSuccess: () => {
              const queryParams = new URLSearchParams({
                [formdata.email ? "email" : "phone"]:
                  formdata.email || formdata.phone,
                referrer: document.referrer,
              }).toString();

              location.href = verificationHref + "?" + queryParams;
            },
          });
        }

        break;

      case "verification":
        {
          const { email, phone, referrer } = searchParams;

          await sendRequest({
            url: "/account/send-magic-link",
            data: {
              action: "login",
              email,
              phone,
              referrer,
              locale: window.preferredLocale,
            },
            onSuccess: updateTimeLeft,
          });
        }

        break;

      case "signup":
        {
          await sendRequest({
            url: "/account/signup",
            data: {
              ...formdata,
              token: searchParams.token,
            },
            onSuccess: (response) => {
              location.href =
                congratsHref +
                "?" +
                new URLSearchParams({ referrer: response.referrer }).toString();
            },
          });
        }

        break;

      case "link":
        {
          await sendRequest({
            url: "/account/send-magic-link",
            data: {
              action: "link",
              ...formdata,
              token: searchParams.token,
            },
            onSuccess: (response) => {
              const queryParams = new URLSearchParams({
                contact: formdata.email || formdata.phone,
                referrer: response.referrer,
              }).toString();

              location.href = verificationHref + "?" + queryParams;
            },
          });
        }

        break;

      case "congrats":
        continueToWhereLeft();

        break;

      default:
        break;
    }
  });
</script>
