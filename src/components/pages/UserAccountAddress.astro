---
import { Icon } from "astro-icon/components";

import CMS from "@store/CMS";

import SavedAddresses from "@solid/SavedAddresses.astro";

import ClipPathSVG from "@components/ClipPathSVG.astro";
import UserAccountLayout from "@layouts/UserAccountLayout.astro";

const { page, recurData } = Astro.props,
  { Title, locale } = page;

const userAccountRecurData = CMS.get("userAccountRecurringElement", locale);
---

<style lang="scss">
  @use "src/styles/poly-fluid" as *;
  @use "src/styles/colors";

  .form-grid-container {
    .tag-button-container {
      input[type="radio"] {
        @apply hidden;
      }

      input[type="radio"] + label {
        @apply border-2 border-secondary-light;
      }

      input[type="radio"]:checked + label {
        @apply border-primary;
      }

      label,
      #others-tag-button {
        @apply py-2.5 md:py-[14px] px-4 text-sm font-medium leading-[150%]
          text-black-light bg-secondary-light rounded-full cursor-pointer;
      }
    }

    .other_tag input {
      @apply focus:ring focus:ring-emerald-800 focus:ring-opacity-20 focus:outline-none;
      @apply h-12 bg-secondary-light py-3 px-4 border border-primary rounded-full text-black-light sm:text-[1.125rem];
    }
  }
</style>

<ClipPathSVG
  id="orders-curve"
  path="M0.517,0.008 C0.36,0.008,0.1,-0.008,0.04,0.082 S0.002,0.495,0.018,0.737 S0.182,1,0.528,1 c0.286,0,0.375,-0.063,0.447,-0.282 c0.031,-0.094,0.047,-0.323,-0.029,-0.591 C0.898,-0.045,0.734,0.008,0.517,0.008"
/>

<UserAccountLayout page={page}>
  <Fragment>
    <h2
      id={`#` + Title.toLowerCase().replaceAll(" ", "-")}
      class="tiled-div-title recoleta"
    >
      {Title}
    </h2>

    <SavedAddresses {recurData} {userAccountRecurData}>
      <Icon
        slot="plusIcon"
        name="akar-icons:plus"
        class="w-[18px] select-none"
      />

      <Icon
        slot="trashCanIcon"
        name="mdi:trash-can-outline"
        class="w-6 text-error-dark"
      />
    </SavedAddresses>
  </Fragment>
</UserAccountLayout>

<script is:inline>
  const query = document.querySelector.bind(document),
    newAddress = query("#new-address"),
    moreAddress = query("#more-address"),
    quitOthers = query("#quit-others"),
    othersTagButton = query("#others-tag-button"),
    showMoreAddress = query("#show-more-address"),
    hideMoreAddress = query("#hide-more-address"),
    toggleMoreAddress = query("#toggle-more-address"),
    addressOpenButton = query("#new-address-open-btn"),
    addressCloseButton = query("#new-address-close-btn");

  function addressToggle() {
    newAddress.style.display = "block";
    addressOpenButton.style.display = "none";
  }

  addressOpenButton?.addEventListener("click", () => {
    newAddress.style.display = "block";
    addressOpenButton.style.display = "none";
  });

  addressCloseButton?.addEventListener("click", () => {
    newAddress.style.display = "none";
    addressOpenButton.style.display = "flex";
  });

  toggleMoreAddress?.addEventListener("click", () => {
    if (moreAddress.style.display === "block") {
      moreAddress.style.display = "none";
      showMoreAddress.style.display = "flex";
      hideMoreAddress.style.display = "none";
    } else {
      moreAddress.style.display = "block";
      showMoreAddress.style.display = "none";
      hideMoreAddress.style.display = "flex";
    }
  });

  othersTagButton?.addEventListener("click", () => {
    othersTagButton.style.display = "none";
    othersTagButton.previousElementSibling.style.display = "none";
    othersTagButton.nextElementSibling.style.display = "block";
  });

  quitOthers?.addEventListener("click", () => {
    othersTagButton.style.display = "block";
    othersTagButton.previousElementSibling.style.display = "flex";
    othersTagButton.nextElementSibling.style.display = "none";
  });
</script>
