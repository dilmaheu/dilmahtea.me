---
import { Icon } from "astro-icon/components";

import CMS from "@store/CMS";
import BaseLayout from "@layouts/BaseLayout.astro";
import UpdateTopMargin from "@scripts/UpdateTopMargin.astro";

import Navbar from "@components/Navbar.astro";
import Footer from "@components/Footer.astro";
import DynamicHTML from "@components/DynamicHTML.astro";
import ClipPathSVG from "@components/ClipPathSVG.astro";
import EmptyCartNotification from "@components/EmptyCartNotification.astro";
import CartProductQuantityInput from "@components/CartProductQuantityInput.astro";

interface Props {
  page: Record<string, any>;
  meta: Record<string, any>;
  locale: string;
  recurData: Record<string, any>;
  metaImageSrc: string;
  alternateURLs: { [locale: string]: string };
  availableLocales: string[];
}

const {
  page,
  meta,
  locale,
  recurData,
  alternateURLs,
  availableLocales,
  metaImageSrc,
} = Astro.props;

const checkoutRecurData = CMS.get("checkoutRecurringElement", locale),
  ariaLabelRecurData = CMS.get("ariaLabelRecurringElement", locale),
  checkoutInfoLink = CMS.get("checkoutInformation", locale).Meta.URL_slug;

const footerText = recurData.Footer_text.replaceAll(
  "<current_year>",
  `${new Date().getFullYear()}`,
);
---

<style lang="scss">
  @use "src/styles/poly-fluid" as *;

  #checkout-cart-container {
    @include poly-fluid-sizing(
      "padding-top",
      (
        639.98px: 131px,
        640px: 70px,
        767px: 77px,
        768px: 135px,
        1024px: 162px,
        1280px: 175px,
      )
    );
  }

  .product-image {
    $fluid-image-size: poly-fluid-clamp(
      (
        375px: 50px,
        1440px: 85px,
      )
    );

    width: $fluid-image-size;
    height: $fluid-image-size;
    min-width: $fluid-image-size;
  }

  .cart-products {
    > div {
      @media (min-width: 768px) {
        @apply grid;

        grid-template-columns: 3fr 1fr 1fr;

        :global(div) {
          &:nth-of-type(1) {
            justify-self: start;
          }

          &:nth-of-type(2) {
            justify-self: center;
          }

          &:nth-of-type(3) {
            justify-self: end;
          }
        }
      }
    }
  }
</style>

<BaseLayout
  page={page}
  meta={meta}
  locale={locale}
  alternateURLs={alternateURLs}
  metaImageSrc={metaImageSrc}
>
  <div class="flex flex-wrap w-full h-full">
    <div class="block w-full bg-secondary">
      <Navbar
        docLocale={locale}
        footerText={footerText}
        isCartNavbar={true}
        availableLocales={availableLocales}
      />

      <div id="checkout-cart-container" class="wrapper flex flex-col">
        <UpdateTopMargin />

        <EmptyCartNotification locale={locale} />

        <ClipPathSVG
          id="cart-product-image"
          path="M0.516,0.008 C0.36,0.008,0.1,-0.008,0.04,0.082 C-0.021,0.172,0.002,0.495,0.017,0.736 C0.032,0.978,0.182,1,0.528,1 C0.813,1,0.902,0.936,0.974,0.717 C1,0.624,1,0.395,0.946,0.128 C0.897,-0.045,0.735,0.008,0.516,0.008"
        />

        <div id="cart" class="division-gap grow flex flex-col section-in-v-pad">
          <h1 class="text-h2 text-primary">
            {page.text_cart}
          </h1>

          <div class="cart-products division-in-gap flex flex-col">
            <div class="!hidden md:!grid text-b3 font-semibold text-black">
              <div>{page.text_product}</div>
              <div>{checkoutRecurData.text_quantity}</div>
              <div>{checkoutRecurData.text_subtotal}</div>
            </div>

            <div class="h-px bg-primary-lightest" />

            <DynamicHTML
              voidFn={(content, currentScript) => {
                const cart = document.getElementById("cart"),
                  emptyCartNotification = document.getElementById(
                    "empty-cart-notification",
                  );

                if (Object.keys(window.cart).length === 0) {
                  cart.classList.add("hidden");
                } else {
                  emptyCartNotification.classList.add("hidden");
                }

                currentScript.insertAdjacentHTML(
                  "beforebegin",
                  Object.keys(window.cart)
                    .map((id) => {
                      const productData = window.cart[id],
                        names = JSON.parse(productData.names),
                        name = names[window.preferredLocale] || names["en"],
                        infos = JSON.parse(productData.infos),
                        info = infos[window.preferredLocale] || infos["en"],
                        price = Number(productData.price)
                          .toFixed(2)
                          .replace(".", ",");

                      return window.replacePlaceholders(content, {
                        ...productData,
                        id,
                        name,
                        info,
                        price,
                      });
                    })
                    .join(""),
                );
              }}
            >
              <div
                id={`<placeholder name="id"></placeholder>`}
                class:list={[
                  "cart-product tiled-div-sm-pad division-in-gap",
                  "flex items-center bg-secondary-light rounded-[10px]",
                ]}
              >
                <div class="division-in-gap w-full flex text-black-light">
                  <img
                    class="product-image"
                    src={`<placeholder name="image"></placeholder>`}
                    style="clip-path: url(#cart-product-image)"
                  />

                  <div class="division-in-element-gap grow flex flex-col">
                    <div class="division-in-element-gap flex justify-between">
                      <h2 class="text-h5 text-black">
                        <placeholder name="name"></placeholder>
                      </h2>

                      <button
                        aria-label={checkoutRecurData.Aria_label_remove_item_button_text}
                        class="remove-item-btn md:hidden h-fit text-black-light"
                      >
                        <Icon
                          name="akar-icons:trash-can"
                          class="w-[29px] h-[29px]"
                        />
                      </button>
                    </div>

                    <div class="text-b6">
                      <placeholder name="info"></placeholder>
                    </div>

                    <div class="flex justify-between items-center">
                      <div class="block md:hidden">
                        <CartProductQuantityInput {ariaLabelRecurData} />
                      </div>

                      <div
                        class="cart-product-price text-b3 font-bold text-black block md:hidden"
                      >
                        €<placeholder name="price"></placeholder>
                      </div>
                    </div>
                  </div>
                </div>

                <div class="hidden md:flex gap-7">
                  <CartProductQuantityInput {ariaLabelRecurData} />

                  <button
                    class="remove-item-btn text-black-light"
                    aria-label={page.Aria_label_remove_item_button_text}
                  >
                    <Icon
                      name="akar-icons:trash-can"
                      class="w-[29px] h-[29px]"
                    />
                  </button>
                </div>

                <div
                  class="cart-product-price text-b3 font-bold text-black hidden md:block"
                >
                  €<placeholder name="price"></placeholder>
                </div>
              </div>
            </DynamicHTML>

            <div class="h-px bg-primary-lightest" />
          </div>

          <div class="division-in-gap flex flex-col text-black-light">
            <div class="division-in-element-gap flex justify-between">
              <div class="division-in-element-gap flex flex-col">
                <div class="text-b2 font-bold text-black">
                  {checkoutRecurData.text_subtotal}
                </div>

                <div class="text-b4">
                  {checkoutRecurData.text_shipping_calculated_at_checkout}
                </div>
              </div>

              <div id="cart-subtotal" class="text-b2 font-bold text-black">
                €<DynamicHTML htmlFn={() => window.cart.subTotal} />
              </div>
            </div>

            <a
              href={checkoutInfoLink}
              class="self-end w-full sm:w-fit sm:min-w-[400px] button-primary-large"
            >
              {page.text_go_to_checkout}
            </a>
          </div>
        </div>
      </div>
    </div>

    <Footer footerText={footerText} recurData={recurData} type={page?.type} />
  </div>
</BaseLayout>

<script defer>
  const removeItemBtns = document.querySelectorAll(".remove-item-btn"),
    cart = document.getElementById("cart"),
    emptyCartNotification = document.getElementById("empty-cart-notification");

  removeItemBtns.forEach((button) => {
    button.addEventListener("click", () => {
      const parentCartProduct = button.closest(".cart-product"),
        productId = parentCartProduct.id;

      delete window.cart[productId];

      if (Object.keys(window.cart).length === 0) {
        cart.classList.add("hidden");
        emptyCartNotification.classList.remove("hidden");
      }

      parentCartProduct.remove();
    });
  });
</script>

<script>
  import tweakAmount from "@utils/client/tweakAmount";

  const cartProductAmountInputs = document.querySelectorAll(
      ".cart-product-amount-input",
    ),
    cartProductAmountTweakBtns = document.querySelectorAll(
      ".cart-product-amount-tweak-btn",
    ),
    decreaseAmountBtns = document.querySelectorAll(
      ".cart-product-amount-tweak-btn[data-action='decrement']",
    );

  decreaseAmountBtns.forEach((button: HTMLButtonElement) => {
    const input = button.nextElementSibling as HTMLInputElement;

    button.disabled = input.value === "1";
  });

  function tweakAmountCallback(input) {
    const parentCartProduct = input.closest(".cart-product"),
      productPriceElements = parentCartProduct.querySelectorAll(
        ".cart-product-price",
      );

    const SKU = parentCartProduct.id,
      quantity = Number(input.value);

    window.cart[SKU] = { quantity };

    productPriceElements.forEach((element) => {
      element.textContent =
        "€" + window.cart[SKU].price.toFixed(2).replace(".", ",");
    });
  }

  tweakAmount(
    cartProductAmountTweakBtns,
    cartProductAmountInputs,
    tweakAmountCallback,
  );
</script>
