---
import CMS from "@store/CMS";
import DynamicHTML from "@components/DynamicHTML.astro";
import ClipPathSVG from "@components/ClipPathSVG.astro";
import UpdateTopMargin from "@scripts/UpdateTopMargin.astro";

import Navbar from "@components/Navbar.astro";
import BaseLayout from "@layouts/BaseLayout.astro";
import CheckoutBackground from "@components/checkout_background.webp";
import CartProductQuantityInput from "@components/CartProductQuantityInput.astro";

interface Props {
  page: Record<string, any>;
  meta: Record<string, any>;
  locale: string;
  recurData: Record<string, any>;
  metaImageID: string;
  availableLocales: string[];
}

const { page, meta, locale, recurData, availableLocales, metaImageID } =
  Astro.props;

const footerText = recurData.Footer_text.replaceAll(
  "<current_year>",
  `${new Date().getFullYear()}`
);

const checkoutRecurData = CMS.get("checkoutRecurringElement", locale);
---

<style
  lang="scss"
  define:vars={{ "checkout-background": `url('${CheckoutBackground}')` }}
>
  @use "src/styles/poly-fluid" as *;

  #checkout-cart-container {
    background-size: cover;
    background-image: var(--checkout-background);
    padding-bottom: poly-fluid-clamp(
      (
        375px: 20px,
        1440px: 56px,
      )
    );

    @include poly-fluid-sizing(
      "padding-top",
      (
        639px: 90px,
        640px: 95px,
        768px: 100px,
        960px: 110px,
        1024px: 120px,
        1280px: 130px,
        1536px: 145px,
        2050px: 165px,
      )
    );
  }

  h1,
  .amount-total {
    line-height: 115%;
    font-size: poly-fluid-clamp(
      (
        375px: 32px,
        1440px: 48px,
      )
    );
  }

  .cart-products {
    > div {
      @media (min-width: 768px) {
        @apply grid gap-4;

        grid-template-columns: 3fr 1fr 1fr;

        :global(div) {
          &:nth-of-type(1) {
            justify-self: start;
          }

          &:nth-of-type(2) {
            justify-self: center;
          }

          &:nth-of-type(3) {
            justify-self: end;
          }
        }
      }
    }

    hr {
      @apply border border-lightgreen2 opacity-50;
    }

    .details-headings {
      @apply font-semibold text-lightgray3 text-[1.5rem] leading-[130%];
    }
  }

  .cart-product-details {
    gap: poly-fluid-clamp(
      (
        375px: 14px,
        1440px: 35px,
      )
    );
  }

  .cart-product-name {
    line-height: 110%;
    font-size: poly-fluid-clamp(
      (
        375px: 20px,
        1440px: 32px,
      )
    );
  }

  .cart-product-price {
    line-height: 110%;
    font-size: poly-fluid-clamp(
      (
        375px: 28px,
        1440px: 32px,
      )
    );
  }

  .cart-product-size,
  .text-shipping-charge-info {
    font-size: poly-fluid-clamp(
      (
        375px: 14px,
        1440px: 18px,
      )
    );
  }

  .text-total {
    line-height: 115%;
    font-size: poly-fluid-clamp(
      (
        375px: 28px,
        1440px: 48px,
      )
    );
  }
</style>

<BaseLayout
  meta={meta}
  locale={locale}
  availableLocales={availableLocales}
  metaImageID={metaImageID}
>
  <Navbar
    docLocale={locale}
    footerText={footerText}
    availableLocales={availableLocales}
  />

  <div id="checkout-cart-container">
    <UpdateTopMargin />

    <div class="wrapper">
      <h1 class="alice mb-4 md:mb-6">{page.text_cart}</h1>

      <ClipPathSVG
        id="cart-product-image"
        path="M0.516,0.008 C0.36,0.008,0.1,-0.008,0.04,0.082 C-0.021,0.172,0.002,0.495,0.017,0.736 C0.032,0.978,0.182,1,0.528,1 C0.813,1,0.902,0.936,0.974,0.717 C1,0.624,1,0.395,0.946,0.128 C0.897,-0.045,0.735,0.008,0.516,0.008"
      />

      <div class="cart-products flex flex-col gap-6 md:gap-4 mb-24">
        <div class="!hidden md:!grid details-headings">
          <div>{page.text_product}</div>
          <div>{checkoutRecurData.text_quantity}</div>
          <div>{checkoutRecurData.text_subtotal}</div>
        </div>

        <hr />

        <DynamicHTML
          htmlFn={(content) =>
            Object.keys(window.cart)
              .map((id) => {
                const productData = window.cart[id],
                  names = JSON.parse(productData.names),
                  name = names[preferredLocale] || names["en"],
                  price = Number(productData.price)
                    .toFixed(2)
                    .replace(".", ",");

                return window.replacePlaceholders(content, {
                  ...productData,
                  id,
                  name,
                  price,
                });
              })
              .join("")}
        >
          <div
            id={`<placeholder name="id"></placeholder>`}
            class="cart-product items-center"
          >
            <div class="cart-product-details flex items-center">
              <img
                src={`<placeholder name="image"></placeholder>`}
                style="min-width: 85px; width: 85px; height: 85px; clip-path: url(#cart-product-image);"
              />

              <div class="grow flex flex-col gap-2">
                <div class="cart-product-name alice">
                  <placeholder name="name"></placeholder>
                </div>

                <div class="cart-product-size">
                  {checkoutRecurData.text_size}: <placeholder name="size"
                  ></placeholder>
                </div>

                <div class="flex justify-between">
                  <div class="block md:hidden">
                    <CartProductQuantityInput />
                  </div>

                  <div class="cart-product-price alice block md:hidden">
                    €<placeholder name="price"></placeholder>
                  </div>
                </div>
              </div>
            </div>

            <div class="hidden md:block">
              <CartProductQuantityInput />
            </div>

            <div class="cart-product-price alice hidden md:block">
              €<placeholder name="price"></placeholder>
            </div>
          </div>
        </DynamicHTML>

        <hr />
      </div>

      <div class="flex flex-col">
        <div class="mb-3 md:mb-4 flex justify-between items-center">
          <div class="flex flex-col gap-4">
            <div class="alice text-total">{checkoutRecurData.text_total}</div>

            <div class="hidden md:block text-shipping-charge-info">
              {checkoutRecurData.text_shipping_calculated_at_checkout}
            </div>
          </div>

          <div class="amount-total alice">
            €<DynamicHTML htmlFn={() => window.cart.subTotal} />
          </div>
        </div>

        <div class="md:hidden mb-5 text-shipping-charge-info">
          {checkoutRecurData.text_shipping_calculated_at_checkout}
        </div>

        <button
          class="self-end px-32 py-3 bg-lightgray font-bold text-primary rounded-full"
        >
          {page.text_go_to_checkout}
        </button>
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  import tweakAmount from "@utils/tweakAmount";

  const cartProductAmountInputs = document.querySelectorAll(
      ".cart-product-amount-input"
    ),
    cartProductAmountTweakBtns = document.querySelectorAll(
      ".cart-product-amount-tweak-btn"
    );

  function tweakAmountCallback(input) {
    const parentCartProduct = input.closest(".cart-product"),
      productPriceElements = parentCartProduct.querySelectorAll(
        ".cart-product-price"
      ),
      productId = parentCartProduct.id,
      productData = window.cart[productId],
      { price, tax, quantity } = productData,
      productPrice = Number(price) / Number(quantity),
      productTax = Number(tax) / Number(quantity),
      updatedQuantity = Number(input.value);

    productData.quantity = updatedQuantity;
    productData.tax = +(updatedQuantity * productTax).toFixed(2);
    productData.price = +(updatedQuantity * productPrice).toFixed(2);

    window.cart[productId] = productData;

    productPriceElements.forEach((element) => {
      element.textContent =
        "€" + Number(productData.price).toFixed(2).replace(".", ",");
    });
  }

  tweakAmount(
    cartProductAmountTweakBtns,
    cartProductAmountInputs,
    tweakAmountCallback
  );
</script>
