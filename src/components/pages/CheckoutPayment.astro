---
import CMS from "@store/CMS";

import DynamicHTML from "@components/DynamicHTML.astro";
import CheckoutPaymentInfo from "@components/CheckoutPaymentInfo.astro";
import AdvancedNotification from "@components/AdvancedNotification.astro";

import CheckoutBillingAddress from "@solid/CheckoutBillingAddress.astro";

import shouldDisplayExperimentals from "@utils/shouldDisplayExperimentals";

const { page, recurData } = Astro.props,
  { locale, payment_methods } = page;

const checkoutFlowData = CMS.get("checkoutFlow").data.attributes,
  steps = checkoutFlowData.steps.split("\n"),
  shortenedSteps = checkoutFlowData.shortened_steps.split("\n");

const checkoutShippingLink = CMS.get("checkoutShipping", locale).Meta.URL_slug,
  checkoutInfo = CMS.get("checkoutInformation", locale),
  checkoutInfoLink = `/${locale}/${checkoutInfo.Meta.URL_slug}/`,
  checkoutKindnessLink = `/${locale}/${
    CMS.get("checkoutKindness", locale).Meta.URL_slug
  }/`;
---

<script
  define:vars={{
    checkoutInfoLink,
    checkoutKindnessLink,
  }}
>
  if (Object.keys(window.checkoutInfo).length === 0) {
    location.href = checkoutInfoLink;
  }

  window.checkoutKindnessLink = checkoutKindnessLink;
</script>

<form
  method="POST"
  id="payment-info-form"
  class="section-gap grid"
  action={shouldDisplayExperimentals
    ? "https://dev.pay.scripts.dilmahtea.me"
    : "https://pay.scripts.dilmahtea.me"}
>
  <DynamicHTML
    htmlFn={() => {
      const { origin, pathname } = location;

      const product_desc = Object.keys(window.cart)
        .map((id) => {
          const productData = window.cart[id],
            names = JSON.parse(productData.names),
            name = names[window.preferredLocale] || names["en"];

          return `${productData.quantity}x ${name}`;
        })
        .join(", ");

      const paymentInfo = {
        ...window.checkoutInfo,
        product_desc,
        cart: JSON.stringify(window.cart),
        tax: window.cart.tax.split(",").join("."),
        price: window.cart.total.split(",").join("."),
        payment_type: "ecommerce",
        locale: window.preferredLocale,
        origin_url: origin + pathname,
        success_url: origin + window.checkoutKindnessLink,
      };

      delete paymentInfo.delivery_address;

      return Object.keys(paymentInfo)
        .map(
          (name) =>
            `<input type="hidden" name="${name}" value='${paymentInfo[name]}' />`,
        )
        .join("");
    }}
  />

  <div id="payment-error" class="hidden">
    <AdvancedNotification
      Title={recurData.error_payment}
      Type="Error"
      Bordered={true}
      Rounded={true}
    />
  </div>

  <CheckoutBillingAddress {page} {recurData} />

  <CheckoutPaymentInfo
    page={page}
    recurData={recurData}
    title={page.Block2_title}
    payment_methods={payment_methods}
    returnButtonText={`${recurData.text_return_to} ${steps[1]?.toLowerCase()}`}
    returnButtonTextSm={`${recurData.text_return_to} ${shortenedSteps[1]?.toLowerCase()}`}
    returnButtonLink={checkoutShippingLink}
  />
</form>

<script is:inline>
  const id = document.getElementById.bind(document),
    queryAll = document.querySelectorAll.bind(document),
    addClass = (element, className) => element.classList.add(className),
    removeClass = (element, className) => element.classList.remove(className),
    getInputValue = (parent, name) =>
      parent.querySelector(`input[name=${name}]`).value;

  const shippingAddress = id("shipping-address"),
    paymentCardInputSelector = queryAll(".payment-card-input-selector"),
    paymentInfoElements = queryAll(".payment-info"),
    submitBtn = id("submit-btn"),
    submitBtnPaymentType = submitBtn.querySelector(".payment-type"),
    paymentError = id("payment-error");

  const { redirect_status } = Object.fromEntries(
    new URLSearchParams(location.search),
  );

  redirect_status === "failed" && paymentError.classList.remove("hidden");

  const toggleDisabled = (elements, condition) =>
    elements.forEach((element) => (element.disabled = !!condition));

  const selectTextAndNumberInputs = (parent) =>
    parent.querySelectorAll("input[type='text'], input[type='number'], select");

  window.hideAllPaymentInfo = () => {
    paymentInfoElements.forEach((paymentInfo) =>
      addClass(paymentInfo, "!hidden"),
    );

    submitBtnPaymentType.innerHTML = "";
    submitBtn.setAttribute("disabled", true);
  };

  window.togglePaymentCardVisibility = (selectedCountry) => {
    paymentCardInputSelector.forEach((cardSelector) => {
      cardSelector.checked = false;

      const countryName = cardSelector
        ?.getAttribute("data-country")
        ?.toLowerCase();

      if (!countryName) return;

      countryName.includes(selectedCountry)
        ? removeClass(cardSelector.parentElement, "hidden")
        : addClass(cardSelector.parentElement, "hidden");
    });
  };

  function handlePaymentCardInputChange(event) {
    if (!event.target.classList.contains("payment-card-input-selector")) return;

    const inputValue = event.target.value.toLowerCase();
    submitBtnPaymentType.innerHTML = ` ${inputValue}`;
    submitBtn.removeAttribute("disabled", true);

    redirect_status === "failed" && paymentError.classList.add("hidden");

    paymentInfoElements.forEach((paymentInfo) => {
      const includesValue = paymentInfo
        .getAttribute("data-name")
        .toLowerCase()
        .includes(inputValue);

      toggleDisabled(selectTextAndNumberInputs(paymentInfo), !includesValue);

      includesValue
        ? removeClass(paymentInfo, "!hidden")
        : addClass(paymentInfo, "!hidden");

      const paymentInputName =
        includesValue && paymentInfo.querySelector("input[name*=name]");

      if (paymentInputName && paymentInputName.value !== null) {
        const fullName = `${getInputValue(
          shippingAddress,
          "billing_first_name",
        )} ${getInputValue(shippingAddress, "billing_last_name")}`;

        paymentInputName.setAttribute("value", fullName?.trim());
      }
    });
  }

  document.addEventListener("change", handlePaymentCardInputChange);

  window.togglePaymentCardVisibility(window.checkoutInfo.country.toLowerCase());
</script>
