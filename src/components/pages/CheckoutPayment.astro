---
import CMS from "@store/CMS";
import DynamicHTML from "@components/DynamicHTML.astro";
import OrderSummary from "@components/OrderSummary.astro";
import AdvancedNotification from "@components/AdvancedNotification.astro";

import localizeCMSImage from "@utils/localizeCMSImage";
import shouldDisplayExperimentals from "@utils/shouldDisplayExperimentals";

const { page, recurData } = Astro.props,
  { locale, payment_methods, Accepted_cards_icon } = page,
  userRecurData = CMS.get("userAccountRecurringElement", locale);

const checkoutFlowData = CMS.get("checkoutFlow").data.attributes,
  steps = checkoutFlowData.steps.split("\n"),
  shortenedSteps = checkoutFlowData.shortened_steps.split("\n");

const checkoutShippingLink = CMS.get("checkoutShipping", locale).Meta.URL_slug,
  checkoutInfo = CMS.get("checkoutInformation", locale),
  checkoutInfoLink = `/${locale}/${checkoutInfo.Meta.URL_slug}/`,
  checkoutKindnessLink = `/${locale}/${
    CMS.get("checkoutKindness", locale).Meta.URL_slug
  }/`;

const methods = payment_methods.data?.map(({ attributes }) => attributes),
  accepted_cards_icon = Accepted_cards_icon.data?.map(
    ({ attributes }) => attributes,
  );
---

<style lang="scss">
  .input-field-api {
    @apply border border-primary rounded-full text-black
      py-[clamp(8px,calc(0.25vw+6.4px),10px)] px-[clamp(15px,calc(0.625vw+11px),20px)];
  }

  .input-field-api-focus {
    @apply ring ring-primary-light outline-none;
  }
</style>

<script
  define:vars={{
    checkoutInfoLink,
    checkoutKindnessLink,
  }}
>
  if (Object.keys(window.checkoutInfo).length === 0) {
    location.href = checkoutInfoLink;
  }

  window.checkoutKindnessLink = checkoutKindnessLink;
</script>

<form
  method="POST"
  id="payment-info-form"
  class="section-gap grid w-full xl:w-2/3"
  action={shouldDisplayExperimentals
    ? "https://dev.pay.scripts.dilmahtea.me"
    : "https://pay.scripts.dilmahtea.me"}
>
  <DynamicHTML
    htmlFn={() => {
      const { origin, pathname } = location;

      const product_desc = Object.keys(window.cart)
        .map((id) => {
          const productData = window.cart[id],
            names = JSON.parse(productData.names),
            name = names[window.preferredLocale] || names["en"];

          return `${productData.quantity}x ${name}`;
        })
        .join(", ");

      const paymentInfo = {
        ...window.checkoutInfo,
        product_desc,
        cart: JSON.stringify(window.cart),
        tax: window.cart.tax.split(",").join("."),
        price: window.cart.total.split(",").join("."),
        payment_type: "ecommerce",
        locale: window.preferredLocale,
        origin_url: origin + pathname,
        success_url: origin + window.checkoutKindnessLink,
      };

      delete paymentInfo.delivery_address;

      return Object.keys(paymentInfo)
        .map(
          (name) =>
            `<input type="hidden" name="${name}" value='${paymentInfo[name]}' />`,
        )
        .join("");
    }}
  />

  <div id="payment-error" class="hidden">
    <AdvancedNotification
      Title={page.text_payment_error}
      Type="Error"
      Bordered={true}
      Rounded={true}
    />
  </div>

  <section
    role="list"
    aria-label={userRecurData.Input_label_email}
    class="tiled-div-pad division-in-gap grid bg-secondary-light rounded-[10px]"
  >
    <div
      role="listitem"
      aria-label={page.Aria_label_email_address_text}
      class="division-in-element-gap"
    >
      <div class="input-label text-black">
        {userRecurData.Input_label_email}
      </div>

      <div class="division-in-element-gap flex flex-wrap items-center">
        <div class="input-text-large-static grow">
          <DynamicHTML htmlFn={() => window.checkoutInfo.email} />
        </div>

        <a
          aria-label={`${userRecurData.Button_change_text} ${userRecurData.Input_label_email}`}
          href={checkoutInfoLink + "?change=email"}
          class="button-link-primary-large"
        >
          {userRecurData.Button_change_text}
        </a>
      </div>
    </div>

    <div class="w-full h-px bg-primary-lightest"></div>

    <div
      role="listitem"
      aria-label={page.Aria_label_email_address_text}
      class="division-in-element-gap"
    >
      <div class="input-label text-black">
        {userRecurData.Label_delivery_address}
      </div>

      <div class="division-in-element-gap flex flex-wrap items-center">
        <div class="input-text-large-static grow">
          <DynamicHTML htmlFn={() => window.checkoutInfo.delivery_address} />
        </div>

        <a
          aria-label={`${userRecurData.Button_change_text} ${userRecurData.Label_delivery_address}`}
          href={checkoutInfoLink + "?change=email"}
          class="button-link-primary-large"
        >
          {userRecurData.Button_change_text}
        </a>
      </div>
    </div>

    <div class="w-full h-px bg-primary-lightest"></div>

    <div
      role="listitem"
      aria-label={page.Aria_label_email_address_text}
      class="division-in-element-gap"
    >
      <div class="input-label text-black">
        {userRecurData.Label_shipping_method}
      </div>

      <div class="division-in-element-gap flex flex-wrap items-center">
        <div class="input-text-large-static grow">
          <DynamicHTML htmlFn={() => window.checkoutInfo.shipping_method} />
        </div>

        <a
          aria-label={`${userRecurData.Button_change_text} ${userRecurData.Label_shipping_method}`}
          href={checkoutShippingLink}
          class="button-link-primary-large"
        >
          {userRecurData.Button_change_text}
        </a>
      </div>
    </div>
  </section>

  <section class="division-gap grid">
    <h2 class="recoleta text-h2 text-primary">{page.Block_title}</h2>

    <div role="list" class="division-in-element-gap flex flex-col">
      <div class="flex">
        <label role="listitem" class="division-in-element-gap radio-input">
          <input
            type="radio"
            name="billing_address"
            value=""
            id="same-as-shipping"
            checked
          />

          <div class="radio-input-text">
            {page.Radio_button_text_same_as_shipping_address}
          </div>
        </label>
      </div>

      <div class="flex">
        <label role="listitem" class="division-in-element-gap radio-input">
          <input
            type="radio"
            name="billing_address"
            value=""
            id="different-than-shipping"
          />

          <div class="text-b5 text-black-light flex">
            {page.Radio_button_text_use_different_billing_address}
          </div>
        </label>
      </div>
    </div>

    <div id="shipping-address" class="division-gap grid hidden">
      <!-- address tags goes here -->

      <div
        role="form"
        aria-label={page.text_shipping_address}
        class="form-grid"
      >
        <label>
          <span>{recurData.text_first_name}</span>

          <input
            type="text"
            name="billing_first_name"
            value=""
            placeholder={recurData.first_name_placeholder}
            required
          />
        </label>

        <label>
          <span>{recurData.text_last_name}</span>

          <input
            type="text"
            name="billing_last_name"
            placeholder={recurData.last_name_placeholder}
            required
          />
        </label>

        <label>
          <span>{recurData.text_street}</span>

          <input
            type="text"
            name="billing_street"
            placeholder={recurData.street_placeholder}
            required
          />
        </label>

        <label>
          <span>{recurData.text_city}</span>

          <input
            type="text"
            name="billing_city"
            placeholder={recurData.city_placeholder}
            required
          />
        </label>

        <label>
          <span>{recurData.text_postal_code}</span>

          <input
            type="text"
            name="billing_postal_code"
            placeholder={recurData.postal_code_placeholder}
            required
          />
        </label>

        <label>
          <span>{recurData.text_country}</span>

          <select id="country-select" name="billing_country" required>
            <option value="" selected disabled hidden>
              {recurData.country_placeholder}
            </option>

            {
              recurData.countries.data.map(
                ({ attributes: { name, localizations } }) => (
                  <option
                    value={localizations?.data[0]?.attributes?.name || name}
                  >
                    {name}
                  </option>
                ),
              )
            }
          </select>
        </label>
      </div>
    </div>
  </section>

  <section class="division-gap grid">
    <h2 class="recoleta text-h2 text-primary">{page.Block2_title}</h2>

    <div role="list" class="payment-card-container flex flex-wrap form-gap">
      {
        methods.map(({ method, icon, supported_countries }) => {
          const country = supported_countries.data.map(
            ({ attributes: { name } }) => name,
          );

          return (
            <div class:list={[country.length > 0 && "hidden"]}>
              <input
                type="radio"
                name="payment_method_name"
                id={method}
                value={method}
                data-country={country}
                class="payment-card-input-selector peer hidden"
              />

              <label for={method} class="radio-button-card">
                {async () => (
                  <img
                    class="payment-icon"
                    alt={icon.data?.attributes.alternativeText}
                    src={await localizeCMSImage(icon.data?.attributes.url)}
                  />
                )}

                <span>
                  {method?.charAt(0)?.toUpperCase() + method?.slice(1)}
                </span>
              </label>
            </div>
          );
        })
      }
    </div>

    <div data-name="card-info" class="payment-info division-gap grid !hidden">
      <div class="division-in-gap">
        <div class="text-b3 font-bold text-black">Card details</div>

        <div class="division-in-gap flex flex-wrap">
          <div class="text-b5 text-black-light">Accepted cards</div>

          <div class="division-in-element-gap flex flex-wrap items-center">
            {
              accepted_cards_icon?.map(
                ({ url, alternativeText }) =>
                  async () => (
                    <img
                      class="h-[20px] bg-white rounded"
                      alt={alternativeText}
                      src={await localizeCMSImage(url)}
                    />
                  ),
              )
            }
          </div>
        </div>
      </div>

      <div>
        <div role="form" class="form-grid" id="card-info">
          <div class="grid division-in-element-gap">
            <div class="input-label">{page.Card_label_number}</div>

            <div id="card-number"></div>
          </div>

          <div class="hidden sm:block h-0 select-none"></div>

          <div class="grid division-in-element-gap">
            <div class="input-label">{page.Card_label_date}</div>

            <div id="card-expiry"></div>
          </div>

          <div class="grid division-in-element-gap">
            <div class="input-label">{page.Card_label_cvv}</div>

            <div id="card-cvc"></div>
          </div>

          <input type="hidden" id="stripeToken" name="stripeToken" />

          <div class="text-b5 text-error hidden" id="card-error">
            {page.text_card_error_message}
          </div>
        </div>

        <input
          type="hidden"
          id="stripe-publishable-key"
          data-key={shouldDisplayExperimentals
            ? import.meta.env.DEV_STRIPE_PUBLISHABLE_KEY
            : import.meta.env.PROD_STRIPE_PUBLISHABLE_KEY}
          disabled
        />
      </div>
    </div>

    <div data-name="ideal-info" class="payment-info division-gap grid !hidden">
      <div role="form" class="form-grid">
        <div class="grid division-in-element-gap">
          <div class="input-label">{page.Ideal_label_select_bank}</div>

          <div id="ideal-bank"></div>
        </div>
      </div>
    </div>

    <div class="checkout-button-container">
      <a href={checkoutShippingLink} class="button-link-primary-large">
        <span class="sm:hidden">
          {
            `${
              userRecurData.Button_return_to_text
            } ${shortenedSteps[1]?.toLowerCase()}`
          }
        </span>
        <span class="hidden sm:block">
          {`${userRecurData.Button_return_to_text} ${steps[1]?.toLowerCase()}`}
        </span>
      </a>

      <button
        id="submit-btn"
        type="submit"
        class="w-full sm:w-1/3 button-disabled-large"
        disabled
      >
        <span>
          {page.Button_text_pay_with}
          <span class="payment-type"></span>
        </span>
      </button>
    </div>
  </section>
</form>

<section class="hidden xl:block xl:w-1/3">
  <OrderSummary page={page} />
</section>

<script is:inline>
  const id = document.getElementById.bind(document),
    queryAll = document.querySelectorAll.bind(document),
    addClass = (element, className) => element.classList.add(className),
    removeClass = (element, className) => element.classList.remove(className),
    getInputValue = (parent, name) =>
      parent.querySelector(`input[name=${name}]`).value,
    addChangeListener = (element, functionName) =>
      element.addEventListener("change", functionName);

  const sameAsShipping = id("same-as-shipping"),
    differentThanShipping = id("different-than-shipping"),
    shippingAddress = id("shipping-address"),
    countrySelect = id("country-select"),
    paymentCardInputSelector = queryAll(".payment-card-input-selector"),
    paymentInfoElements = queryAll(".payment-info"),
    submitBtn = id("submit-btn"),
    submitBtnPaymentType = submitBtn.querySelector(".payment-type"),
    paymentError = id("payment-error");

  const { redirect_status } = Object.fromEntries(
    new URLSearchParams(location.search),
  );

  redirect_status === "failed" && paymentError.classList.remove("hidden");

  const toggleDisabled = (elements, condition) =>
    elements.forEach((element) => (element.disabled = !!condition));

  const selectTextAndNumberInputs = (parent) =>
    parent.querySelectorAll("input[type='text'], input[type='number'], select");

  function toggleShippingAddress() {
    const isSameShipping = sameAsShipping.checked;

    isSameShipping
      ? addClass(shippingAddress, "hidden")
      : removeClass(shippingAddress, "hidden");
  }

  function hideAllPaymentInfo() {
    paymentInfoElements.forEach((paymentInfo) =>
      addClass(paymentInfo, "!hidden"),
    );

    submitBtnPaymentType.innerHTML = "";
    removeClass(submitBtn, "button-primary-large");
    addClass(submitBtn, "button-disabled-large");
    submitBtn.setAttribute("disabled", true);
  }

  function togglePaymentCardVisibility() {
    const selectedCountry = countrySelect.value.toLowerCase();

    paymentCardInputSelector.forEach((cardSelector) => {
      cardSelector.checked = false;
      const countryName = cardSelector
        ?.getAttribute("data-country")
        ?.toLowerCase();

      if (!countryName) return;

      countryName.includes(selectedCountry)
        ? removeClass(cardSelector.parentElement, "hidden")
        : addClass(cardSelector.parentElement, "hidden");
    });
  }

  function handlePaymentCardInputChange(event) {
    if (!event.target.classList.contains("payment-card-input-selector")) return;

    const inputValue = event.target.value.toLowerCase();
    submitBtnPaymentType.innerHTML = ` ${inputValue}`;
    removeClass(submitBtn, "button-disabled-large");
    addClass(submitBtn, "button-primary-large");
    submitBtn.removeAttribute("disabled", true);

    redirect_status === "failed" && paymentError.classList.add("hidden");

    paymentInfoElements.forEach((paymentInfo) => {
      const includesValue = paymentInfo
        .getAttribute("data-name")
        .toLowerCase()
        .includes(inputValue);

      toggleDisabled(selectTextAndNumberInputs(paymentInfo), !includesValue);

      includesValue
        ? removeClass(paymentInfo, "!hidden")
        : addClass(paymentInfo, "!hidden");

      const paymentInputName =
        includesValue && paymentInfo.querySelector("input[name*=name]");

      if (paymentInputName && paymentInputName.value !== null) {
        const fullName = `${getInputValue(
          shippingAddress,
          "billing_first_name",
        )} ${getInputValue(shippingAddress, "billing_last_name")}`;

        paymentInputName.setAttribute("value", fullName?.trim());
      }
    });
  }

  const contactInfo = JSON.parse(localStorage.getItem("checkout-info"));

  const setInputValue = (name, setValue) =>
    shippingAddress
      ?.querySelector(`input[name="${name}"]`)
      ?.setAttribute("value", setValue);

  const setBillingInfo = () => {
    const isSameShipping = sameAsShipping.checked;
    ["first_name", "last_name", "street", "city", "postal_code"].forEach(
      (field) =>
        setInputValue(
          `billing_${field}`,
          isSameShipping ? contactInfo[field] : "",
        ),
    );

    countrySelect.querySelectorAll("option").forEach((option) => {
      const isOptionSame =
        option.value.toLowerCase() === contactInfo.country.toLowerCase();

      isOptionSame &&
        option[isSameShipping ? "setAttribute" : "removeAttribute"](
          "selected",
          true,
        );
    });

    togglePaymentCardVisibility();
    hideAllPaymentInfo();
  };

  setBillingInfo();
  addChangeListener(sameAsShipping, () => {
    toggleShippingAddress();
    setBillingInfo();
  });
  addChangeListener(differentThanShipping, () => {
    toggleShippingAddress();
    setBillingInfo();
  });
  addChangeListener(countrySelect, () => {
    togglePaymentCardVisibility();
    hideAllPaymentInfo();
  });
  document.addEventListener("change", handlePaymentCardInputChange);
</script>

{/* for stripe payments */}
<script>
  import { loadStripe } from "@stripe/stripe-js";

  // Check if the element with ID "payment-info-form" exists before executing the scripts
  if (document.getElementById("payment-info-form")) {
    const id = document.getElementById.bind(document),
      form = id("payment-info-form"),
      card = id("card"),
      ideal = id("ideal"),
      cardError = id("card-error"),
      stripePublishableKey = id("stripe-publishable-key");

    const STRIPE_PUBLISHABLE_KEY =
      stripePublishableKey?.getAttribute("data-key");

    const stripe = await loadStripe(STRIPE_PUBLISHABLE_KEY),
      elements = stripe.elements({ locale: window.preferredLocale as any });

    const elementStyles = {
      style: {
        base: {
          fontSize: `${Math.min(
            Math.max(16, 0.25 * window.innerWidth + 14.4),
            18,
          )}px`, //text-b5
        },
      },
      classes: {
        base: "input-field-api",
        focus: "input-field-api-focus",
      },
    };

    // Variables for Stripe Elements
    let cardNumberElement = null;
    let cardExpiryElement = null;
    let cardCvcElement = null;
    let idealBankElement = null;

    document.addEventListener("change", () => {
      const isCard = card.checked,
        isIdeal = ideal.checked;

      // Clear existing Stripe Elements
      clearStripeElements();

      if (isCard) {
        // Create Stripe Elements for card number, expiry, and CVC if they don't exist
        if (!cardNumberElement) {
          cardNumberElement = elements.create("cardNumber", elementStyles);
          cardNumberElement.mount("#card-number");
        }
        if (!cardExpiryElement) {
          cardExpiryElement = elements.create("cardExpiry", elementStyles);
          cardExpiryElement.mount("#card-expiry");
        }
        if (!cardCvcElement) {
          cardCvcElement = elements.create("cardCvc", elementStyles);
          cardCvcElement.mount("#card-cvc");
        }
      } else if (isIdeal) {
        // Create idealBank Element if it doesn't exist
        if (!idealBankElement) {
          idealBankElement = elements.create("idealBank", elementStyles);
          idealBankElement.mount("#ideal-bank");
        }
      }

      if (isCard) {
        // Attach form submission event listener for card payments
        form.addEventListener("submit", onSubmitCard);
      } else {
        form.removeEventListener("submit", onSubmitCard);
      }
    });

    function onSubmitCard(event) {
      event.preventDefault();
      createToken(cardNumberElement);
    }

    async function createToken(element) {
      try {
        const { token, error } = await stripe.createToken(element);
        if (error) {
          cardError.classList.remove("hidden");
        } else {
          id("stripeToken").value = token.id;
          form.submit();
        }
      } catch (err) {
        cardError.classList.remove("hidden");
      }
    }

    function clearStripeElements() {
      if (cardNumberElement) {
        cardNumberElement.destroy();
        cardNumberElement = null;
      }
      if (cardExpiryElement) {
        cardExpiryElement.destroy();
        cardExpiryElement = null;
      }
      if (cardCvcElement) {
        cardCvcElement.destroy();
        cardCvcElement = null;
      }
      if (idealBankElement) {
        idealBankElement.destroy();
        idealBankElement = null;
      }
    }
  }
</script>
