---
import { Img, Picture } from "astro-imagetools/components";

import CMS from "@store/CMS";
import RecurringImages from "@store/RecurringImages";

import localizeCMSImage from "@utils/localizeCMSImage";
import getUserAccountPagesLink from "@utils/getUserAccountPagesLink";

import Dashboard from "@solid/Dashboard.astro";

import Markdown from "@components/Markdown.astro";
import ClipPathSVG from "@components/ClipPathSVG.astro";

const {
  success_notification,
  warning_notification,
  error_notification,
  green_right_arrow,
} = RecurringImages;

const { page, recurData, ariaLabelRecurData } = Astro.props;

const {
    Personal_information: {
      Name: block_section1_name,
      Label_username,
      Label_phone,
      Label_email,
      Label_delivery_address,
      Label_billing_address,
      Social_media_title,
      Social_media,
      user_info_update_success_notification,
      display_name_update_success_notification_label,
      email_update_success_notification_label,
      phone_number_update_success_notification_label,
    },
    kindnessCauses,
    Block3_title,
    Block2,
    Support_visibility,
    Support,
  } = page,
  { locale } = page,
  { STRAPI_URL } = import.meta.env;

const userAccountRecurData = CMS.get("userAccountRecurringElement", locale),
  userAccountAddress = CMS.get("userAccountAddress", locale);

const {
  Facebook_icon: fb_icon,
  Google_icon: g_icon,
  Twitter_icon: twitter_icon,
  Empty_order_blob: { data: empty_blob },
  Empty_order_button_text,
  Empty_order_button_link,
  Empty_order_text,
  Button_edit_text,
  Button_update_text,
  Button_remove_text,
  Button_add_new_address_text,
  Button_save_text,
  Button_cancel_text,
  Button_track_package,
  Button_track_package_text,
  Button_buy_again_text,
  Button_sold_out_text,
  Button_view_all_orders_text,
  text_connected,
  text_not_connected,
  text_more_address,
  Address_tag: address_tag,
  Label_order,
  text_content,
  text_estimated_delivery,
  text_estimated_shipment,
  text_delivered,
  text_show_more_products_in_this_order,
  text_hide_more_products_in_this_order,
} = userAccountRecurData;

const {
  Meta: { URL_slug: userAccountAddress_url },
} = userAccountAddress;

const headingName = recurData.text_chapter;

const verificationHref = getUserAccountPagesLink("verification", locale);
---

<style lang="scss" is:global>
  @use "src/styles/poly-fluid" as *;

  .dashboard-sec-title {
    @apply bg-primary leading-[110%] text-secondary-light rounded-[10px];

    font-size: clamp(2rem, 3vw + 0.55rem, 2.625rem);
    padding: 10px clamp(15px, 2.08vw + 0.01rem, 30px);

    @media (max-width: 767.98px) {
      padding: 15px;
    }
  }

  .dashboard-sec {
    @apply bg-secondary-light rounded-[10px] mt-[25px] text-black;

    padding: clamp(15px, 2.08vw + 0.01rem, 25px)
      clamp(15px, 2.2vw + 0.1rem, 35px);

    @media (max-width: 767.98px) {
      padding: 15px;
    }

    .information-label {
      @apply text-sm md:text-base font-medium leading-[150%] text-black-light;
    }

    .information-text {
      @apply w-full pl-1.5 leading-[150%] text-black opacity-100 sm:font-medium bg-secondary-light outline-none;

      &:not(:disabled) {
        @apply mb-[-2px] border-b-2 border-primary-light;
      }

      &.errored {
        @apply border-error;
      }

      font-size: clamp(1.125rem, 1.5vw + 0.3rem, 1.5rem);
    }

    .information-btn {
      @apply leading-[150%] font-semibold text-primary;

      font-size: clamp(1rem, 1.4vw + 0.3rem, 1.375rem);
    }

    h2 {
      @apply text-[clamp(1.25rem,1.5vw+0.15rem,1.5rem)] font-bold text-primary;
    }

    .order-item {
      @apply grid gap-[25px] sm:gap-[30px];

      &:not(:last-child) {
        @apply border-b border-primary-light;
      }

      .order-img {
        width: poly-fluid-clamp(
          (
            640px: 50px,
            1440px: 65px,
          )
        );
      }

      .order-item-label {
        @apply flex items-center gap-2 text-lg font-bold leading-[150%] text-black;
      }

      .order-item-date {
        @apply text-sm sm:text-base text-black-light;
      }

      .order-item-title {
        @apply font-bold text-[clamp(1.25rem,1.5vw+0.15rem,1.5rem)];
      }

      .order-item-info {
        @apply flex flex-wrap gap-1 sm:gap-2 text-sm sm:text-base text-black-light;
      }

      .order-item-quantity {
        @apply text-sm sm:text-base font-semibold text-black-light;
      }

      .order-item-cart-btn {
        @apply flex gap-1 sm:gap-2 w-fit py-[5px] sm:py-2.5 px-3 sm:px-5
          text-sm sm:text-base font-semibold sm:font-bold text-white bg-primary rounded-full;

        &:disabled,
        &[disabled] {
          @apply bg-black/60 text-secondary-light cursor-not-allowed;
        }
      }

      .show-more-toggle-btn {
        @apply flex gap-1 sm:gap-2 items-center font-bold text-primary cursor-pointer;
      }
    }
  }
</style>

<style lang="scss">
  #cause-form {
    @apply grid gap-[15px] mt-[15px] overflow-hidden;

    label {
      @apply flex gap-5 items-start;
    }

    .cause-form-text {
      @apply text-lg font-medium leading-[150%] mt-[7px];
    }

    input[type="radio"] {
      &[name="kindness_cause"] {
        cursor: pointer;
      }

      @apply min-w-[25px] min-h-[25px] accent-primary after:content-[''];

      &:after {
        @apply relative inline-block top-0 left-0 min-w-[25px] min-h-[25px] 
            rounded-full bg-secondary-light border-2 border-primary;
      }
      &:checked:after {
        @apply relative inline-block top-[1.5px] left-[1.5px] min-w-[22px] min-h-[22px] 
            rounded-full bg-primary border-[6px] border-secondary-light;
      }
    }
  }

  #kindness-cause-grid {
    @apply grid items-center gap-2.5 md:gap-[25px] w-full;

    @media (min-width: 520px) {
      @apply grid-cols-2 md:grid-cols-1;
    }

    .kindness-cause-clip-path {
      clip-path: url(#kindness-cause-card-curve-sm);

      @media (min-width: 767px) {
        clip-path: url(#kindness-cause-card-curve);
      }
    }

    .kindness-cause-img-container {
      @apply w-full h-full aspect-[6/5];

      picture,
      img {
        @media (min-width: 767px) {
          height: 100% !important;
        }
      }
    }
  }
</style>

<ClipPathSVG
  id="kindness-cause-card-curve"
  path="M0.547,0.01 c0.072,0.003,0.13,0,0.167,0 c0.315,0,0.282,0.03,0.282,0.467 s0.052,0.518,-0.264,0.518 c-0.105,0,-0.154,0,-0.174,-0.001 l-0.011,0.001 h-0.001 c-0.199,0.01,-0.401,0.008,-0.47,-0.037 C-0.013,0.898,0.003,0.642,0.003,0.487 c0,-0.216,-0.034,-0.411,0.14,-0.459 C0.305,-0.018,0.435,0.005,0.547,0.01"
/>

<ClipPathSVG
  id="kindness-cause-card-curve-sm"
  path="M0.99,0.554 V0.735 c0,0.331,-0.079,0.243,-0.519,0.258 S0.004,1,0.004,0.718 c0,-0.037,0.004,-0.093,0.001,-0.164 C-0.005,0.353,-0.003,0.148,0.042,0.078 C0.102,-0.013,0.358,0.003,0.513,0.003 c0.216,0,0.41,-0.034,0.459,0.141 C1,0.309,0.995,0.441,0.99,0.554"
/>

<ClipPathSVG
  id="orders-blob-curve"
  path="M0.517,0.008 C0.36,0.008,0.1,-0.008,0.04,0.082 S0.002,0.495,0.018,0.737 S0.182,1,0.528,1 c0.286,0,0.375,-0.063,0.447,-0.282 c0.031,-0.094,0.047,-0.323,-0.029,-0.591 C0.898,-0.045,0.734,0.008,0.517,0.008"
/>

<div class="wrapper py-[50px] w-full flex flex-col-reverse md:flex-row">
  <Dashboard
    {page}
    {verificationHref}
    {userAccountRecurData}
    recurringImages={{
      success_notification,
      error_notification,
    }}
  >
    <Fragment slot="kindnessCausesHTML">
      {
        Block2.Block2_text && (
          <div class="hero-text text-black block prose max-w-none">
            <Markdown>{Block2.Block2_text}</Markdown>
          </div>
        )
      }

      <form id="cause-form">
        <label>
          <input type="radio" disabled />

          <div>
            <div class="flex flex-wrap items-center justify-between gap-[7px]">
              <h3 class="text-lg font-bold leading-[150%]">
                {Block2.Label_my_selected_cause}
              </h3>

              <div
                class="cause-form-txt text-black-light w-full prose max-w-none"
              >
                <Markdown>{Block2.My_selected_cause_text}</Markdown>
              </div>
            </div>

            {
              kindnessCauses.length > 0 && (
                <div id="kindness-cause-grid">
                  {kindnessCauses.map(
                    ({ cause, description, featured_blob }) => (
                      <div class="w-full h-full">
                        <input
                          type="radio"
                          name="kindness_cause"
                          id={cause}
                          value={cause}
                          class="peer hidden"
                        />

                        <label
                          for={cause}
                          class:list={[
                            "kindness-cause-clip-path inline-block w-full h-full",
                            "p-[3px] md:p-[5px] peer-checked:bg-primary select-none cursor-pointer",
                          ]}
                        >
                          <div class="kindness-cause-clip-path w-full h-full p-[3px] md:p-[5px] bg-secondary-light">
                            <div
                              class:list={[
                                "kindness-cause-clip-path w-full h-full bg-secondary",
                                "grid md:grid-cols-[140px_1fr] lg:grid-cols-[180px_1fr] items-center sm:justify-center",
                              ]}
                            >
                              <div class="kindness-cause-img-container">
                                <Picture
                                  layout="fullWidth"
                                  sizes="(min-width: 640px) 320px, 90vw)"
                                  alt={
                                    featured_blob.data.attributes
                                      .alternativeText
                                  }
                                  attributes={{
                                    img: {
                                      style: "aspect-ratio: 6 / 5;",
                                    },
                                  }}
                                  src={
                                    STRAPI_URL +
                                    featured_blob.data.attributes.url
                                  }
                                />
                              </div>

                              <div
                                class:list={[
                                  "w-full h-full flex flex-col justify-center",
                                  "px-[clamp(15px,calc(4.43vw-13px),32px)] pt-2.5 lg:px-[15px] py-[15px]",
                                ]}
                              >
                                <div
                                  class:list={[
                                    "recoleta font-bold text-primary",
                                    "text-[clamp(18px,calc(0.75vw+13.2px),24px)] leading-[110%]",
                                  ]}
                                >
                                  {cause}
                                </div>
                                <div
                                  class:list={[
                                    "prose max-w-none text-black-light mt-2.5",
                                    "text-[clamp(14px,calc(0.25vw+12.4px),16px)]",
                                  ]}
                                >
                                  {" "}
                                  {description}
                                </div>
                              </div>
                            </div>
                          </div>
                        </label>
                      </div>
                    ),
                  )}
                </div>
              )
            }
          </div>
        </label>

        <label>
          <input type="radio" name="kindness_cause" value="null" />

          <div>
            <h3 class="text-lg font-bold leading-[150%] cursor-pointer">
              {Block2.Label_let_dilmah_pick_cause}
            </h3>

            <div class="cause-form-txt text-black-light prose max-w-none">
              <Markdown>{Block2.Let_dilmah_pick_cause_text}</Markdown>
            </div>
          </div>
        </label>
      </form>
    </Fragment>

    <div
      slot="noOrdersHTML"
      class="dashboard-sec grid gap-5 justify-center text-center"
    >
      <div class="w-full max-h-[200px]">
        {
          async () => (
            <img
              class="w-full h-full"
              src={await localizeCMSImage(empty_blob?.attributes.url)}
              alt={empty_blob?.attributes.alternativeText}
            />
          )
        }
      </div>

      <div
        class:list={[
          "recoleta prose leading-[110%] text-black",
          "text-[clamp(1.125rem,1.5vw+0.15rem,1.5rem)]",
        ]}
      >
        <Markdown>{Empty_order_text}</Markdown>
      </div>

      <a
        href={Empty_order_button_link}
        class:list={[
          "px-[35px] sm:px-[50px] py-3 w-full sm:min-w-[230px] font-bold",
          "leading-[150%] text-white bg-primary rounded-full",
        ]}
      >
        {Empty_order_button_text}
      </a>
    </div>
  </Dashboard>
</div>

{
  Support_visibility && Support && (
    <div class="z-[999] fixed bottom-[clamp(15px,3vw+5px,50px)] right-[clamp(15px,3vw+5px,50px)]">
      <a href={Support.Button_link}>
        <div class="flex items-center gap-4 p-5 md:py-5 md:px-[34px] rounded-full bg-[#3C994E]">
          <div class="w-[45px] h-[45px]">
            <img
              class="w-full h-full object-contain"
              src={await localizeCMSImage(
                Support.Button_icon.data.attributes.url,
              )}
              alt={Support.Button_icon?.data?.attributes?.alternativeText}
            />
          </div>
          <div class="hidden md:block text-3xl text-white">
            {Support.Button_text}
          </div>
        </div>
      </a>
    </div>
  )
}
