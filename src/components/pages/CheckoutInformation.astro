---
import CMS from "@store/CMS";
import Markdown from "@components/Markdown.astro";
import OrderSummary from "@components/OrderSummary.astro";

const { page } = Astro.props,
  { locale } = page,
  checkoutCartLink = CMS.get("cart", locale).Meta.URL_slug,
  checkoutShippingLink = CMS.get("checkoutShipping", locale).Meta.URL_slug;
---

<style lang="scss">
  @use "src/styles/checkout" as *;
</style>

<section class="w-full xl:w-2/3">
  <form
    role="main"
    aria-label={page.Aria_label_form_text}
    id="checkout-info-form"
    class="section-gap flex flex-col"
    action={"/" + locale + "/" + checkoutShippingLink + "/"}
  >
    <div
      role="form"
      aria-label={page.text_contact_info}
      class="division-gap grid"
    >
      <h2 class="recoleta text-h2 text-primary">{page.text_customer}</h2>

      <div
        id="guest-intro-text"
        class="prose-text prose max-w-none text-b5 text-black-light"
      >
        <Markdown>{page.Guest_intro_text}</Markdown>
      </div>

      <div class="form-grid">
        <label>
          <span>{page.text_email_address}</span>

          <input
            type="email"
            name="email"
            placeholder={page.email_address_placeholder}
            required
          />
        </label>
      </div>

      <div
        id="sign-in-text"
        class="prose-text prose max-w-none text-b5 text-black-light"
      >
        <Markdown>{page.Sign_in_text}</Markdown>
      </div>
    </div>

    <div class="w-full h-px bg-primary-light"></div>

    <div
      role="form"
      aria-label={page.text_shipping_address}
      class="division-gap grid"
    >
      <h2 class="recoleta text-h2 text-primary">
        {page.text_shipping_address}
      </h2>

      <div class="form-grid">
        <label>
          <span>{page.text_first_name}</span>

          <input
            type="text"
            name="first_name"
            placeholder={page.first_name_placeholder}
            required
          />
        </label>

        <label>
          <span>{page.text_last_name}</span>

          <input
            type="text"
            name="last_name"
            placeholder={page.last_name_placeholder}
            required
          />
        </label>

        <label>
          <span>{page.text_street}</span>

          <input
            type="text"
            name="street"
            placeholder={page.street_placeholder}
            required
          />
        </label>

        <label>
          <span>{page.text_city}</span>

          <input
            type="text"
            name="city"
            placeholder={page.city_placeholder}
            required
          />
        </label>

        <label>
          <span>{page.text_postal_code}</span>

          <input
            type="text"
            name="postal_code"
            placeholder={page.postal_code_placeholder}
            required
          />
        </label>

        <label>
          <span>{page.text_country}</span>

          <select name="country" required>
            <option value="" selected disabled hidden>
              {page.country_placeholder}
            </option>

            {
              page.countries.data.map(
                ({ attributes: { name, localizations } }) => (
                  <option
                    value={localizations?.data[0]?.attributes?.name || name}
                  >
                    {name}
                  </option>
                ),
              )
            }
          </select>
        </label>
      </div>
    </div>

    <div class="block lg:hidden">
      <OrderSummary page={page} />
    </div>

    <div class="checkout-button-container">
      <a href={checkoutCartLink} class="button-link-large">
        {page.text_return_to_cart}
      </a>

      <button class="w-full sm:w-1/3 button-primary-large">
        {page.text_continue_to_shipping}
      </button>
    </div>
  </form>
</section>

<section class="hidden xl:block xl:w-1/3">
  <OrderSummary page={page} />
</section>

<script is:inline>
  const guestIntroText = document.getElementById("guest-intro-text"),
    signInText = document.getElementById("sign-in-text");

  if (window.cookies.isAuthenticated === "true") {
    guestIntroText.remove();
    signInText.remove();
  }
</script>

<script>
  const inputToBeChanged = new URLSearchParams(location.search).get("change"),
    returnToCartBtn = document.getElementById("return-to-cart-btn"),
    checkoutInfoForm = document.getElementById(
      "checkout-info-form",
    ) as HTMLFormElement;

  checkoutInfoForm?.addEventListener("submit", (event) => {
    event.preventDefault();

    const formData = Object.fromEntries(new FormData(checkoutInfoForm)),
      { street, city, country } = formData,
      contactInfo = {
        ...formData,
        delivery_address: [street, city, country].join(", "),
        kindness_cause: window.checkoutInfo.kindness_cause,
      };

    localStorage.setItem("checkout-info", JSON.stringify(contactInfo));

    location.href = checkoutInfoForm.action;
  });

  returnToCartBtn?.addEventListener("click", (event) => {
    event.preventDefault();

    window.openCart();
  });

  if (inputToBeChanged) {
    const inputElement = document.querySelector(
      `input[name=${inputToBeChanged}]`,
    ) as HTMLInputElement;

    inputElement.scrollIntoView({ block: "center" });
    inputElement.focus();
  }
</script>

