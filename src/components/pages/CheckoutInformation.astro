---
import CMS from "@store/CMS";
import Markdown from "@components/Markdown.astro";
import ClipPathSVG from "@components/ClipPathSVG.astro";
import OrderSummary from "@components/OrderSummary.astro";

const { page } = Astro.props,
  { locale } = page,
  checkoutCartLink = CMS.get("cart", locale).Meta.URL_slug,
  checkoutShippingLink = CMS.get("checkoutShipping", locale).Meta.URL_slug;
---

<style lang="scss">
  @use "src/styles/poly-fluid" as *;

  h2 {
    @apply font-bold text-primary leading-[110%];

    font-size: poly-fluid-clamp(
      (
        375px: 28px,
        1440px: 32px,
      )
    );
  }

  form {
    padding: poly-fluid-clamp(
      (
        375px: 25px 25px,
        1440px: 32px 56px,
      )
    );
  }

  .form-grid-container {
    @apply flex flex-col;

    gap: poly-fluid-clamp(
      (
        375px: 10px,
        1440px: 25px,
      )
    );

    .prose-text {
      font-size: poly-fluid-clamp(
        (
          375px: 16px,
          1440px: 20px,
        )
      );
    }

    .form-grid {
      @apply w-full grid gap-y-2.5;

      @media (min-width: 640px) {
        @apply grid-cols-2;

        gap: poly-fluid-clamp(
          (
            480px: 10px 40px,
            1440px: 25px 50px,
          )
        );
      }

      label {
        @apply flex flex-col gap-1.5;

        span {
          @apply font-bold text-black-light sm:text-[1.125rem];
        }

        input,
        select {
          @apply focus:ring focus:ring-emerald-800 focus:ring-opacity-20 focus:outline-none;
          @apply h-12 bg-secondary py-3 px-4 border border-primary rounded-full text-black sm:text-[1.125rem];
        }
      }
    }
  }
</style>

<section class="w-full lg:w-[66.67%]">
  <form
    role="main"
    aria-label={page.Aria_label_form_text}
    id="checkout-info-form"
    class="flex flex-col gap-[25px]"
    action={"/" + locale + "/" + checkoutShippingLink + "/"}
  >
    <div
      role="form"
      aria-label={page.text_contact_info}
      class="form-grid-container"
    >
      <h2 class="recoleta">{page.text_customer}</h2>

      <div
        id="guest-intro-text"
        class="prose-text prose max-w-none leading-[150%] text-black-light"
      >
        <Markdown>{page.Guest_intro_text}</Markdown>
      </div>

      <div class="form-grid">
        <label>
          <span>{page.text_email_address}</span>

          <input
            type="email"
            name="email"
            placeholder={page.email_address_placeholder}
            required
          />
        </label>
      </div>

      <div
        id="sign-in-text"
        class="prose-text prose max-w-none leading-[150%] text-black-light"
      >
        <Markdown>{page.Sign_in_text}</Markdown>
      </div>
    </div>

    <div class="w-full h-px bg-primary-light"></div>

    <div
      role="form"
      aria-label={page.text_shipping_address}
      class="form-grid-container"
    >
      <h2 class="recoleta">{page.text_shipping_address}</h2>

      <div class="flex flex-wrap gap-2.5 sm:gap-[15px]">
        <div>
          <input
            type="radio"
            name="shipping_address"
            id={`address1`}
            value={`value`}
            checked
            class="peer hidden"
          />

          <label
            for={`address1`}
            class:list={[
              "inline-block py-2 px-5 border-2 border-secondary-light",
              "text-dark-green font-medium bg-secondary-light rounded-full",
              "peer-checked:bg-dark-green peer-checked:text-secondary-light",
              "peer-checked:text-dark-green peer-checked:font-bold cursor-pointer select-none",
            ]}
          >
            Home
          </label>
        </div>

        <div>
          <input
            type="radio"
            name="shipping_address"
            id={`address2`}
            value={`value`}
            class="peer hidden"
          />

          <label
            for={`address2`}
            class:list={[
              "inline-block py-2 px-5 border-2 border-secondary-light",
              "text-dark-green font-medium bg-secondary-light rounded-full",
              "peer-checked:bg-dark-green peer-checked:text-secondary-light",
              "peer-checked:text-dark-green peer-checked:font-bold cursor-pointer select-none",
            ]}
          >
            Parents
          </label>
        </div>

        <div>
          <input
            type="radio"
            name="shipping_address"
            id={`address3`}
            value={`value`}
            class="peer hidden"
          />

          <label
            for={`address3`}
            class:list={[
              "inline-block py-2 px-5 border-2 border-secondary-light",
              "text-dark-green font-medium bg-secondary-light rounded-full",
              "peer-checked:bg-dark-green peer-checked:text-secondary-light",
              "peer-checked:text-dark-green peer-checked:font-bold cursor-pointer select-none",
            ]}
          >
            Family
          </label>
        </div>

        <div class="more-address hidden">
          <input
            type="radio"
            name="shipping_address"
            id={`address4`}
            value={`value`}
            class="peer hidden"
          />

          <label
            for={`address4`}
            class:list={[
              "py-2 px-5 border-2 border-secondary-light",
              "inline-block text-dark-green font-medium bg-secondary-light rounded-full",
              "peer-checked:bg-dark-green peer-checked:text-secondary-light select-none",
              "peer-checked:text-dark-green peer-checked:font-bold cursor-pointer",
            ]}
          >
            Address Line 1
          </label>
        </div>

        <div class="more-address hidden">
          <input
            type="radio"
            name="shipping_address"
            id={`address5`}
            value={`value`}
            class="peer hidden"
          />

          <label
            for={`address5`}
            class:list={[
              "py-2 px-5 border-2 border-secondary-light",
              "inline-block text-dark-green font-medium bg-secondary-light rounded-full",
              "peer-checked:bg-dark-green peer-checked:text-secondary-light select-none",
              "peer-checked:text-dark-green peer-checked:font-bold cursor-pointer",
            ]}
          >
            Address Line 2
          </label>
        </div>

        <div class="more-address hidden">
          <input
            type="radio"
            name="shipping_address"
            id={`address6`}
            value={`value`}
            class="peer hidden"
          />

          <label
            for={`address6`}
            class:list={[
              "py-2 px-5 border-2 border-secondary-light",
              "inline-block text-dark-green font-medium bg-secondary-light rounded-full",
              "peer-checked:bg-dark-green peer-checked:text-secondary-light select-none",
              "peer-checked:text-dark-green peer-checked:font-bold cursor-pointer",
            ]}
          >
            Address Line 3
          </label>
        </div>

        <div
          id="address-toggle-button"
          class="flex items-center gap-1 text-primary font-bold cursor-pointer"
        >
          <svg
            id="address-arrow-left"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 8 14"
            class="hidden w-3 h-3 fill-primary"
          >
            <path
              d="M7.7,13.7a1.1,1.1,0,0,0,.3-.8,1.1,1.1,0,0,0-.3-.7L2.5,7,7.7,1.8A1.1,1.1,0,0,0,8,1,1.1,1.1,0,0,0,7.7.3,1.1,1.1,0,0,0,7,0a1.1,1.1,0,0,0-.8.3L.3,6.2A1.1,1.1,0,0,0,0,7a.9.9,0,0,0,.3.7l5.9,6A1.1,1.1,0,0,0,7,14a1.1,1.1,0,0,0,.7-.3Z"
            ></path>
          </svg>

          <div>
            <div id="hide-address-text" class="hidden">Hide 3 addresses</div>
            <div id="show-address-text">Show more 3 addresses</div>
          </div>

          <svg
            id="address-arrow-right"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 8 14"
            class="w-3 h-3 fill-primary"
          >
            <path
              d="M.3,13.7a1.1,1.1,0,0,1-.3-.8,1.1,1.1,0,0,1,.3-.7L5.5,7,.3,1.8A1.1,1.1,0,0,1,0,1,1.1,1.1,0,0,1,.3.3,1.1,1.1,0,0,1,1,0a1.1,1.1,0,0,1,.8.3L7.7,6.2A1.1,1.1,0,0,1,8,7a.9.9,0,0,1-.3.7l-5.9,6A1.1,1.1,0,0,1,1,14a1.1,1.1,0,0,1-.7-.3Z"
            ></path>
          </svg>
        </div>
      </div>

      <div class="form-grid">
        <label>
          <span>{page.text_first_name}</span>

          <input
            type="text"
            name="first_name"
            placeholder={page.first_name_placeholder}
            required
          />
        </label>

        <label>
          <span>{page.text_last_name}</span>

          <input
            type="text"
            name="last_name"
            placeholder={page.last_name_placeholder}
            required
          />
        </label>

        <label>
          <span>{page.text_street}</span>

          <input
            type="text"
            name="street"
            placeholder={page.street_placeholder}
            required
          />
        </label>

        <label>
          <span>{page.text_city}</span>

          <input
            type="text"
            name="city"
            placeholder={page.city_placeholder}
            required
          />
        </label>

        <label>
          <span>{page.text_postal_code}</span>

          <input
            type="text"
            name="postal_code"
            placeholder={page.postal_code_placeholder}
            required
          />
        </label>

        <label>
          <span>{page.text_country}</span>

          <select name="country" required>
            <option value="" selected disabled hidden>
              {page.country_placeholder}
            </option>

            {
              page.countries.data.map(
                ({ attributes: { name, localizations } }) => (
                  <option
                    value={localizations?.data[0]?.attributes?.name || name}
                  >
                    {name}
                  </option>
                ),
              )
            }
          </select>
        </label>
      </div>
    </div>

    <div class="block lg:hidden -mb-6">
      <OrderSummary page={page} />
    </div>

    <div
      class="flex flex-col sm:flex-row items-center justify-center sm:justify-start gap-9 sm:gap-12"
    >
      <button
        class="w-full sm:w-auto py-4 px-8 sm:px-20 bg-primary text-white font-bold rounded-full"
      >
        {page.text_continue_to_shipping}
      </button>

      <a href={checkoutCartLink} class="text-primary font-bold">
        {page.text_return_to_cart}
      </a>
    </div>
  </form>
</section>

<section
  class="hidden lg:block lg:w-[36.67%] lg:border lg:border-l-primary-light"
>
  <OrderSummary page={page} />
</section>

<script is:inline>
  const id = document.getElementById.bind(document);

  const addressToggleBtn = id("address-toggle-button"),
    hideAddressTxt = id("hide-address-text"),
    showAddressTxt = id("show-address-text"),
    addressArrowLeft = id("address-arrow-left"),
    addressArrowRight = id("address-arrow-right"),
    selectorsMoreAddress = document.getElementsByClassName("more-address");

  function toggleAddress() {
    const moreAddressArray = Array.from(selectorsMoreAddress);

    moreAddressArray.forEach((item) => {
      item.classList.toggle("hidden");
    });
    hideAddressTxt.classList.toggle("hidden");
    showAddressTxt.classList.toggle("hidden");
    addressArrowLeft.classList.toggle("hidden");
    addressArrowRight.classList.toggle("hidden");
  }

  addressToggleBtn?.addEventListener("click", toggleAddress);
</script>

<script is:inline>
  const guestIntroText = document.getElementById("guest-intro-text"),
    signInText = document.getElementById("sign-in-text");

  if (window.cookies.isAuthenticated === "true") {
    guestIntroText.remove();
    signInText.remove();
  }
</script>

<script>
  const inputToBeChanged = new URLSearchParams(location.search).get("change"),
    returnToCartBtn = document.getElementById("return-to-cart-btn"),
    checkoutInfoForm = document.getElementById(
      "checkout-info-form",
    ) as HTMLFormElement;

  checkoutInfoForm?.addEventListener("submit", (event) => {
    event.preventDefault();

    const formData = Object.fromEntries(new FormData(checkoutInfoForm)),
      { street, city, country } = formData,
      contactInfo = {
        ...formData,
        delivery_address: [street, city, country].join(", "),
        kindness_cause: window.checkoutInfo.kindness_cause,
      };

    localStorage.setItem("checkout-info", JSON.stringify(contactInfo));

    location.href = checkoutInfoForm.action;
  });

  returnToCartBtn?.addEventListener("click", (event) => {
    event.preventDefault();

    window.openCart();
  });

  if (inputToBeChanged) {
    const inputElement = document.querySelector(
      `input[name=${inputToBeChanged}]`,
    ) as HTMLInputElement;

    inputElement.scrollIntoView({ block: "center" });
    inputElement.focus();
  }
</script>
