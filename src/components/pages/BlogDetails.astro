---
import CupIcon from "@images/cup.svg";
import RightArrow from "@images/rightArrow.svg";

import ClippedImg from "../ClippedImg.astro";
import ClipPathSVG from "../ClipPathSVG.astro";
import Markdown from "@astrojs/markdown-component";
import HeroBackground from "../HeroBackground.astro";
import UpdateHeroTopMargin from "../scripts/UpdateHeroTopMargin.astro";

const url = `${import.meta.env.CloudImg_URL}`;

const { page, recurData } = Astro.props;

const allBlogs = page.allBlogs
  .filter((val) => val?.props?.page?.locale == page.locale)
  .map((val) => val.props.page);

// @ts-ignore
allBlogs.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

const recentBlogs = allBlogs.filter(
  (val) => val.Meta.URL_slug != page.Meta.URL_slug
);
---

<!-- Hero Section -->
<div class="hero overflow-hidden relative">
  <UpdateHeroTopMargin />

  <HeroBackground />

  <!-- Text content -->

  <div class="relative h-full wrapper z-30 HeroTxtContainer">
    <div
      class="sm:w-8/12 md:w-7/12 HeroTxtContent BlogDetails_HeroTxtContent"
      role="banner"
    >
      <div class="flex flex-wrap items-start">
        <div>
          <div class="flex flex-wrap gap-x-2.5 blogDetails_heroAuthContainer">
            <div class="flex relative">
              {
                page.authors.data.map((author, index) => (
                  <div
                    class:list={[
                      "blogDetails_authImg",
                      index > 0 && "relative -ml-5",
                    ]}
                  >
                    <img
                      src={
                        url +
                        author.attributes.Profile_picture.data.attributes
                          .provider_metadata.public_id +
                        `/authBlob`
                      }
                      alt={
                        author.attributes.Profile_picture.data.attributes
                          .alternativeText
                      }
                    />
                  </div>
                ))
              }
            </div>

            <div class="grid content-between">
              <div class="flex flex-wrap font-bold blogDetails_heroAuth">
                {
                  page.authors.data.map((author, index) => (
                    <a href="#">
                      {`${index > 0 ? ", " : " "}` +
                        author.attributes.givenName}
                    </a>
                  ))
                }
              </div>

              <ul class="flex flex-wrap items-center">
                <li class="blogHome_HdItem">
                  {
                    new Date(page.createdAt).toLocaleString("en-US", {
                      day: "numeric",
                      month: "long",
                    })
                  }
                </li>

                {
                  /*
                    <li class="blogHome_cardItem">5 min read</li>
                    <li class="flex items-center blogHome_cardItem">
                      <a href="#"><div class="blogHome_cardItemBtn">Manufacturing</div></a>
                    </li>
                  */
                }
              </ul>
            </div>
          </div>

          <h1 class="blogDetails_heroTitle">
            <a href="#">{page.Title}</a>

            <span class="icon relative top-0">
              <span class="relative headingInlineIcon">
                <img class="w-full h-full" src={CupIcon} alt="cup-icon" />
              </span>
            </span>
          </h1>

          <a href="#">
            <div class="prose max-w-none blogDetails_heroTxt">
              <Markdown>{page.Intro_text}</Markdown>
            </div>
          </a>
        </div>
      </div>
    </div>
  </div>

  <!-- Blob Image  Desktop view-->

  <div
    class="h-full hidden sm:block absolute z-20 heroCurve2Container BlogHeroCurveContainer"
  >
    <ClippedImg
      id="heroImgFrame2"
      src={url +
      page.Intro_blob.data.attributes.provider_metadata.public_id +
      `/small`}
      className="relative"
      style="right: -15%; object-fit:cover;"
      path="M1,0 S0.345,0.001,0.098,0.001 C-0.013,0.158,-0.007,0.342,0.009,0.606 C0.025,0.888,0.144,1,0.536,1 c0.3,0,0.379,-0.095,0.464,-0.147"
    />
  </div>
</div>

<!-- Blob Image Mobile view -->

<div class="block sm:hidden relative -mt-20 z-20 w-full heroCurve3Container">
  <ClippedImg
    id="heroImgFrame3"
    src={url +
    page.Intro_blob.data.attributes.provider_metadata.public_id +
    `/small`}
    path="M1 .074v.904S.906 1 .774 1C.706 1 .637.996.569.993.487.989.405.984.324.986a4.576 4.576 0 0 0-.117.005C.115.996.032 1.001 0 .986V.074C.062.024.147 0 .282 0c.075 0 .165.023.244.043.062.016.118.03.154.03.026 0 .06-.007.097-.014C.861.044.959.025 1 .074"
  />
</div>

<!-- Blog Section -->
<div class="blogContentContainer" role="main">
  <div
    class="block md:hidden sticky overflow-hiden self-start"
    id="blogContent_StickyContainerMd"
  >
    <div
      id="blog_StickyDropdownContainer"
      class="wrapper text-sm lg:text-base font-bold relative noselect"
    >
      <div
        id="blogStickyBtn"
        class="flex items-center justify-between gap-x-1.5 md:gap-x-3 font-bold focus:outline-none"
      >
        <div id="blog_StickyDropdown" class="flex">
          <div>
            <img
              class="blog_StickyItemHeaderImgMd"
              src="/images/bookGreen.svg"
              alt="arrow"
            />
          </div>
          <div id="blog_StickyDropdownHeaderTop">{recurData.text_chapter}</div>
          <div id="blog_StickyDropdownHeader">{recurData.text_chapter}</div>
          <ul id="blog_StickyItemContainerMd"></ul>
        </div>
        <div class="w-3">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 11.6 6.7">
            <path
              class="cls-1"
              d="M.3.3A.6.6 0 0 1 .9 0a.9.9 0 0 1 .6.3l4.3 4.3L10.2.3a.6.6 0 0 1 .6-.3l.6.3a.8.8 0 0 1 .2.6.7.7 0 0 1-.2.6l-5 4.9a.6.6 0 0 1-.6.3.9.9 0 0 1-.6-.3L.3 1.5A.9.9 0 0 1 0 .9.6.6 0 0 1 .3.3Z"
              fill="#2B4B50"></path>
          </svg>
        </div>
      </div>
      <div id="blog_StickyDropdownItem"></div>
    </div>
    <div id="sticky_p_bar"></div>
  </div>
  <div class="wrapper w-full flex flex-wrap">
    <div class="md:w-8/12 order-2 md:order-1">
      <ClipPathSVG
        id="content-images-curve"
        path="M.516.008C.36.008.1-.008.04.082S.002.495.017.736.182 1 .528 1C.813 1 .902.936.974.717 1.005.624 1.021.395.945.128.897-.045.734.008.516.008"
      />

      <style is:inline>
        #detailedBlog img {
          display: block;
          margin: 0 auto;
          clip-path: url(#content-images-curve);
        }
      </style>

      <div
        class="prose max-w-none basicInfoSecTxt detailedBlog"
        id="detailedBlog"
      >
        <Markdown>{page.Block_text}</Markdown>
      </div>
    </div>
    <div
      class="md:w-4/12 order-1 md:order-2 blogContent_StickyContainer md:sticky top-0 overflow-hiden self-start"
      id="blogContent_StickyContainer"
    >
      <h3 id="blog_StickyHeader">{recurData.text_chapter}</h3>
      <div id="blog_StickyItemContainer"></div>
    </div>
  </div>
</div>

<div class="wrapper">
  <h2 class={recentBlogs.length < 1 ? "hidden" : "blogDetails_recentTitle"}>
    {recurData.text_explore_the_world_of_kindness}
  </h2>

  <ClipPathSVG
    id="blogDetails_Card"
    path="M.99 1H.005C-.005.636-.003.266.042.141.102-.024.358.005.513.005c.216 0 .411-.061.459.255C1 .557.995.795.99 1"
  />

  <div
    class="w-full grid sm:grid-cols-2 lg:grid-cols-3 gap-6 lg:gap-10 mx-auto justify-items-center sm:justify-items-start blogDetails_CardsContainer"
    role="list"
    aria-label="Kindness Items"
  >
    {
      recentBlogs.slice(0, 3).map((blog, idx) => (
        <div
          class="blogDetails_Card"
          role="listitem"
          aria-label="Kindness Item"
        >
          <div class="relative">
            <div>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                preserveAspectRatio="none"
                viewBox="0 0 423.3 559.8"
                class="blogDetails_cardBg"
              >
                <path
                  d="M419.2 306.4c-1.2 40.4 0 72.6 0 93.6 0 176.6-12.5 158-197.8 158S2.1 587.1 2.1 410c0-58.7.1-86 .3-97.5-.1-1.2-.2-3.1-.3-6.1v-.3C-2.2 194.8-1.3 81.5 17.9 43.2 43.3-7.3 151.7 1.5 217.2 1.5c91.3 0 173.8-18.8 194.3 78.1 19.3 91 9.6 163.8 7.7 226.8Z"
                  fill="#273E3F"
                />
              </svg>
            </div>
            <div class="absolute inset-0 z-30">
              <div class="w-full">
                <a href={`/` + blog.Meta.URL_slug}>
                  <img
                    src={
                      url +
                      blog.Intro_blob.data.attributes.provider_metadata
                        .public_id +
                      `/small`
                    }
                    class="w-full h-full"
                    style="clip-path: url(#blogDetails_Card);"
                  />
                </a>
              </div>

              <div class="blogDetails_CardConentConatiner">
                <div class="flex flex-wrap font-bold blogDetails_cardAuth">
                  {blog.authors.data.map((author, idx) => (
                    <a href="#">
                      {`${idx > 0 ? ", " : " "}` + author.attributes.givenName}
                    </a>
                  ))}
                </div>
                <ul class="flex flex-wrap items-center blogHome_cardItemContainer">
                  <li class="blogHome_cardItem">
                    {new Date(blog.createdAt).toLocaleString("en-US", {
                      day: "numeric",
                      month: "long",
                    })}
                  </li>

                  {/*
                    <li class="blogHome_cardItem">5 min read</li>
                    <li class="flex items-center blogHome_cardItem">
                      <a href="#"><div class="blogHome_cardItemBtn">Manufacturing</div></a>
                    </li>
                  */}
                </ul>
                <div class="blogDetails_CardTitle">
                  <a href={`/` + blog.Meta.URL_slug}>{blog.Title}</a>
                  <span class="icon relative top-0">
                    <span class="relative blogDetails_CardTitleIcon">
                      <img
                        class="w-full h-full"
                        src={RightArrow}
                        alt="cup-icon"
                      />
                    </span>
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>
      ))
    }
  </div>
</div>

<script>
  // creating blog chapters
  const db = document.getElementById("detailedBlog");
  const tags = db.querySelectorAll("h2");

  for (const tag of tags) {
    // chapters in desktop screen
    var div = document.getElementById("blog_StickyItemContainer");
    var aTag = document.createElement("a");
    aTag.setAttribute("href", "#" + tag.id);
    aTag.innerHTML =
      `<img class="blog_StickyItemImg opacity-0" src="/images/rightArrowGreen.svg" alt="arrow">` +
      tag.innerHTML;
    div.appendChild(aTag);

    // sticky active chapter heading in mobile screen
    var divMd = document.getElementById("blog_StickyItemContainerMd");
    var liTagMd = document.createElement("li");
    liTagMd.setAttribute("class", "truncate");
    liTagMd.innerHTML = tag.innerHTML;
    divMd.appendChild(liTagMd);

    // sticky button chapters in mobile screen
    var dropdownDiv = document.getElementById("blog_StickyDropdownItem");
    var dropdownATag = document.createElement("a");
    dropdownATag.setAttribute("href", "#" + tag.id);
    dropdownATag.setAttribute(
      "class",
      "flex items-center pt-6 font-normal color-default-80"
    );
    dropdownATag.innerHTML =
      `<img class="blog_StickyItemImgMd opacity-0" src="/images/rightArrowGreen.svg" alt="arrow">` +
      tag.innerHTML;
    dropdownDiv.appendChild(dropdownATag);
  }

  // highlight active blog section header desktop screen
  const stickyItemCon = document.getElementById("blog_StickyItemContainer");
  const blogStickyAtag = stickyItemCon.querySelectorAll("a");
  const blogStickyImg = stickyItemCon.querySelectorAll(".blog_StickyItemImg");

  const dropdownStickyItemCon = document.getElementById(
    "blog_StickyDropdownItem"
  );
  const dropdownStickyAtag = dropdownStickyItemCon.querySelectorAll("a");
  const dropdownStickyImg = dropdownStickyItemCon.querySelectorAll(
    ".blog_StickyItemImgMd"
  );

  document.addEventListener("scroll", (e) => {
    for (var i = 0; i < tags.length; i++) {
      var scrolled = document.scrollingElement.scrollTop;
      var position = tags[i].offsetTop;

      if (i > 0) {
        if (scrolled > position - 300) {
          blogStickyAtag[i].classList.add("font-bold");
          blogStickyAtag[i - 1].classList.remove("font-bold");
          blogStickyImg[i].classList.remove("opacity-0");
          blogStickyImg[i - 1].classList.add("opacity-0");

          dropdownStickyAtag[i].classList.add("font-medium", "color-default");
          dropdownStickyAtag[i - 1].classList.remove(
            "font-medium",
            "color-default"
          );
          dropdownStickyImg[i].classList.remove("opacity-0");
          dropdownStickyImg[i - 1].classList.add("opacity-0");
        } else {
          blogStickyAtag[i].classList.remove("font-bold");
          blogStickyImg[i].classList.add("opacity-0");

          dropdownStickyAtag[i].classList.remove(
            "font-medium",
            "color-default"
          );
          dropdownStickyImg[i].classList.add("opacity-0");
        }
      } else {
        if (scrolled > position - 300) {
          blogStickyAtag[i].classList.add("font-bold");
          blogStickyImg[i].classList.remove("opacity-0");

          dropdownStickyAtag[i].classList.add("font-medium", "color-default");
          dropdownStickyImg[i].classList.remove("opacity-0");
        } else {
          blogStickyAtag[i].classList.remove("font-bold");
          blogStickyImg[i].classList.add("opacity-0");

          dropdownStickyAtag[i].classList.remove(
            "font-medium",
            "color-default"
          );
          dropdownStickyImg[i].classList.add("opacity-0");
        }
      }
    }
  });

  const mqMd = window.matchMedia("(max-width: 767.98px)");
  if (mqMd.matches) {
    // show active blog section header name top on sticky in mobile screen
    document.addEventListener("scroll", (e) => {
      const stickyItemConMd = document.getElementById(
        "blog_StickyItemContainerMd"
      );
      const blogStickyMdAtag = stickyItemConMd.querySelectorAll("li");
      const dropdownContainer = document.getElementById(
        "blog_StickyDropdownContainer"
      );
      const dropdownHeader = document.getElementById(
        "blog_StickyDropdownHeader"
      );
      var scrolled = document.scrollingElement.scrollTop;
      const db = document.getElementById("detailedBlog");
      const stickyProgress = document.getElementById("sticky_p_bar");
      const dbPosition = db.offsetTop;

      if (scrolled > dbPosition + 1) {
        dropdownContainer.style.display = "block";
        stickyProgress.style.display = "block";
      } else {
        dropdownContainer.style.display = "none";
        stickyProgress.style.display = "none";
      }

      for (var i = 0; i < tags.length; i++) {
        var position = tags[i].offsetTop;
        if (i > 0) {
          if (scrolled > position - 40) {
            blogStickyMdAtag[i].style.display = "inline-flex";
            blogStickyMdAtag[i - 1].style.display = "none";
          } else {
            blogStickyMdAtag[i].style.display = "none";
          }
        } else {
          if (scrolled > position - 40) {
            blogStickyMdAtag[i].style.display = "inline-flex";
          } else {
            blogStickyMdAtag[i].style.display = "none";
          }
        }
      }
    });

    // sticky chapters heading toggle by "Chapters" when toggling stcky button
    document.addEventListener("scroll", (e) => {
      var scrolled = document.scrollingElement.scrollTop;
      const db = document.getElementById(`detailedBlog`);
      const dbPosition = db.offsetTop;
      const dropdownHeader = document.getElementById(
        "blog_StickyDropdownHeader"
      );
      const dropdownHeaderTop = document.getElementById(
        "blog_StickyDropdownHeaderTop"
      );
      const dropdownHeaderItem = document.getElementById(
        "blog_StickyItemContainerMd"
      );
      const firstTag = db.querySelector("h2");

      if (scrolled > dbPosition - 40) {
        if (dropdownHeader.style.display == "block") {
          dropdownHeaderTop.style.display = "none";
        } else if (scrolled > firstTag.offsetTop - 40) {
          dropdownHeaderTop.style.display = "none";
        } else {
          dropdownHeaderTop.style.display = "block";
        }
      } else {
        dropdownHeaderTop.style.display = "block";
      }
    });
  }
  const mqSm = window.matchMedia("(max-width: 639.98px)");
  if (mqSm.matches) {
    // show active blog section header name top on sticky in mobile screen
    document.addEventListener("scroll", (e) => {
      const stickyItemConMd = document.getElementById(
        "blog_StickyItemContainerMd"
      );
      const blogStickyMdAtag = stickyItemConMd.querySelectorAll("li");
      const dropdownContainer = document.getElementById(
        "blog_StickyDropdownContainer"
      );
      const dropdownHeader = document.getElementById(
        "blog_StickyDropdownHeader"
      );
      var scrolled = document.scrollingElement.scrollTop;
      const db = document.getElementById("detailedBlog");
      const stickyProgress = document.getElementById("sticky_p_bar");
      const dbPosition = db.offsetTop;

      if (scrolled > dbPosition - 50) {
        dropdownContainer.style.display = "block";
        stickyProgress.style.display = "block";
      } else {
        dropdownContainer.style.display = "none";
        stickyProgress.style.display = "none";
      }
      for (var i = 0; i < tags.length; i++) {
        var position = tags[i].offsetTop;

        if (i > 0) {
          if (scrolled > position - 120) {
            blogStickyMdAtag[i].style.display = "inline-flex";
            blogStickyMdAtag[i - 1].style.display = "none";
          } else {
            blogStickyMdAtag[i].style.display = "none";
          }
        } else {
          if (scrolled > position - 120) {
            blogStickyMdAtag[i].style.display = "inline-flex";
          } else {
            blogStickyMdAtag[i].style.display = "none";
          }
        }
      }
    });

    // sticky chapters heading toggle by "Chapters" when toggling stcky button
    document.addEventListener("scroll", (e) => {
      var scrolled = document.scrollingElement.scrollTop;
      const db = document.getElementById(`detailedBlog`);
      const dbPosition = db.offsetTop;
      const dropdownHeader = document.getElementById(
        "blog_StickyDropdownHeader"
      );
      const dropdownHeaderTop = document.getElementById(
        "blog_StickyDropdownHeaderTop"
      );
      const dropdownHeaderItem = document.getElementById(
        "blog_StickyItemContainerMd"
      );

      const firstTag = db.querySelector("h2");

      if (scrolled > dbPosition - 120) {
        if (dropdownHeader.style.display == "block") {
          dropdownHeaderTop.style.display = "none";
        } else if (scrolled > firstTag.offsetTop - 120) {
          dropdownHeaderTop.style.display = "none";
        } else {
          dropdownHeaderTop.style.display = "block";
        }
      } else {
        dropdownHeaderTop.style.display = "block";
      }
    });
  }

  //sticky chapters button toggle
  document.getElementById("blogStickyBtn").addEventListener(
    "click",
    function () {
      const dropdownItem = document.getElementById("blog_StickyDropdownItem");
      const dropdownHeader = document.getElementById(
        "blog_StickyDropdownHeader"
      );
      const dropdownHeaderItem = document.getElementById(
        "blog_StickyItemContainerMd"
      );
      const dropdpwnIcon = document.getElementById("StickyDropdpwnIcon");

      if (dropdownHeader.style.display == "none") {
        if (dropdownItem.style.display == "block") {
          dropdownItem.style.display = "none";
          dropdownHeader.style.display = "block";
          dropdownHeaderItem.style.display = "grid";
          dropdpwnIcon.style.transform = "rotate(0deg)";
        } else {
          dropdownItem.style.display = "block";
          dropdownHeaderItem.style.display = "none";
          dropdownHeader.style.display = "block";
          dropdpwnIcon.style.transform = "rotate(180deg)";
        }
      } else {
        if (dropdownItem.style.display == "block") {
          dropdownItem.style.display = "none";
          dropdownHeader.style.display = "none";
          dropdownHeaderItem.style.display = "grid";
          dropdpwnIcon.style.transform = "rotate(0deg)";
        } else {
          dropdownItem.style.display = "block";
          dropdownHeaderItem.style.display = "none";
          dropdownHeader.style.display = "block";
          dropdpwnIcon.style.transform = "rotate(180deg)";
        }
      }
    },
    false
  );

  // blog reading progress bar
  document.addEventListener("scroll", (e) => {
    var winScroll =
      document.body.scrollTop || document.documentElement.scrollTop;
    var height =
      document.documentElement.scrollHeight -
      document.documentElement.clientHeight;

    const contentOffssetTop = db.offsetTop,
      contentHeight = db.offsetHeight;

    var scrolled = (winScroll / height) * 100;
    let ScrollBarWidth;
    const diff = winScroll - contentOffssetTop;
    if (diff <= 0) {
      ScrollBarWidth = 0;
    } else {
      //check if we hav reached div bottom
      if (winScroll + 100 <= contentOffssetTop + contentHeight) {
        ScrollBarWidth = (diff / contentHeight) * 100;
      } else {
        ScrollBarWidth = 100;
      }
    }
    document.getElementById("sticky_p_bar").style.width = ScrollBarWidth + "%";
  });
</script>
