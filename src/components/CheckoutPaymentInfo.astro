---
import CMS from "@store/CMS";
import LoadingSpinner from "@solid/LoadingSpinner";
import localizeCMSImage from "@utils/localizeCMSImage";
import AdvancedNotification from "@components/AdvancedNotification.astro";

declare interface Props {
  page: Record<string, any>;
  title: string;
  returnButtonLink: string;
  returnButtonText: string;
  returnButtonTextSm: string;
  recurData: Record<string, any>;
  payment_methods: Record<string, any>;
}

const {
  page,
  title,
  returnButtonLink,
  returnButtonText,
  returnButtonTextSm,
  recurData,
  payment_methods,
} = Astro.props;

const methods = payment_methods.data?.map(({ attributes }) => attributes),
  accepted_cards_icon = recurData.Accepted_cards_icon.data?.map(
    ({ attributes }) => attributes,
  );

const isCrowdfundingPayment = page.type === "crowdfundingPayment";

const countries = CMS.get("countries"),
  countryCodesMap = Object.fromEntries(
    countries.data.map(({ attributes }) => [attributes.name, attributes.code]),
  );
---

<style lang="scss">
  .input-field-api {
    @apply border border-primary rounded-full text-black
      py-[clamp(8px,calc(0.25vw+6.4px),10px)] px-[clamp(15px,calc(0.625vw+11px),20px)];
  }

  .input-field-api-focus {
    @apply ring ring-primary-lightest outline-none;
  }

  button[type="submit"] {
    svg.animate-spin {
      display: none;
    }

    &.processing {
      svg.animate-spin {
        @apply inline-block mr-0.5;
      }
    }
  }
</style>

<section id="checkout-payment-container" class="division-gap grid">
  <h2 class="recoleta text-h2 text-primary">{title}</h2>

  <div role="list" class="payment-card-container flex flex-wrap form-gap">
    {
      methods.map(({ method, icon, supported_countries }) => {
        const country = supported_countries.data.map(
          ({ attributes: { name } }) => name,
        );

        return (
          <div class:list={[country.length > 0 && "hidden"]}>
            <input
              type="radio"
              name="payment_method_name"
              id={`payment_method_name-${method}`}
              value={method}
              data-country={country}
              class="payment-card-input-selector peer hidden"
            />

            <label
              for={`payment_method_name-${method}`}
              class="radio-button-card"
            >
              {async () => (
                <img
                  class="payment-icon"
                  alt={icon.data?.attributes.alternativeText}
                  src={await localizeCMSImage(icon.data?.attributes.url)}
                />
              )}

              <span>{method?.charAt(0)?.toUpperCase() + method?.slice(1)}</span>
            </label>
          </div>
        );
      })
    }
  </div>

  <div data-name="card-info" class="payment-info division-gap grid !hidden">
    <div class="division-in-gap">
      <div class="text-b3 font-bold text-black">
        {recurData.text_card_details}
      </div>

      <div class="division-in-gap flex flex-wrap">
        <div class="text-b5 text-black-light">
          {recurData.text_accepted_cards}
        </div>

        <div class="division-in-element-gap flex flex-wrap items-center">
          {
            accepted_cards_icon?.map(({ url, alternativeText }) => async () => (
              <img
                class="h-[20px] bg-white rounded"
                alt={alternativeText}
                src={await localizeCMSImage(url)}
              />
            ))
          }
        </div>
      </div>
    </div>

    <div>
      <div role="form" class="form-grid" id="card-info">
        <div class="grid division-in-element-gap">
          <div class="input-label">{recurData.text_card_number}</div>

          <div id="card-number"></div>
        </div>

        <div class="hidden sm:block h-0 select-none"></div>

        <div class="grid division-in-element-gap">
          <div class="input-label">{recurData.text_card_date}</div>

          <div id="card-expiry"></div>
        </div>

        <div class="grid division-in-element-gap">
          <div class="input-label">{recurData.text_card_cvv}</div>

          <div id="card-cvc"></div>
        </div>
      </div>

      <input
        type="hidden"
        id="stripe-publishable-key"
        data-key={import.meta.env.STRIPE_PUBLISHABLE_KEY}
        disabled
      />
    </div>
  </div>

  <div data-name="ideal-info" class="payment-info division-gap grid !hidden">
    <div role="form" class="form-grid">
      <div class="grid division-in-element-gap">
        <div class="input-label">{recurData.text_select_bank}</div>

        <div id="ideal-bank"></div>
      </div>
    </div>
  </div>

  <div class="checkout-button-container">
    <a href={returnButtonLink} class="button-link-primary-large">
      <span class="sm:hidden">
        {returnButtonText}
      </span>
      <span class="hidden sm:block">
        {returnButtonTextSm || returnButtonText}
      </span>
    </a>

    {
      isCrowdfundingPayment ? (
        <div
          id="submit-btn"
          class="w-full sm:max-w-[250px] button-disabled-large"
        >
          <span>{recurData.text_pay_with}</span>
        </div>
      ) : (
        <button
          type="submit"
          class="w-full sm:max-w-[250px] button-primary-large"
          disabled
        >
          <LoadingSpinner />

          <span class="button-content">{recurData.text_pay}</span>
        </button>
      )
    }
  </div>

  <div id="payment-error-bottom" class="hidden">
    <AdvancedNotification
      Title={recurData.error_payment}
      Type="Error"
      Bordered={true}
      Rounded={true}
    />
  </div>
</section>

<script is:inline define:vars={{ countryCodesMap }}>
  window.countryCodesMap = countryCodesMap;
</script>

<script>
  import { loadStripe } from "@stripe/stripe-js/pure";

  import subset from "@utils/shared/subset";
  import getCustomer from "@utils/client/getCustomer";

  const id = document.getElementById.bind(document),
    checkoutPaymentContainer = document.getElementById(
      "checkout-payment-container",
    );

  if (checkoutPaymentContainer) {
    const form = id("payment-info-form"),
      stripePublishableKey = id("stripe-publishable-key");

    const paymentErrorBottom = id("payment-error-bottom"),
      paymentErrorBottomContent = paymentErrorBottom.querySelector(
        ".notification-content",
      );

    const formSubmitBtn = form.querySelector("button[type=submit"),
      paymentCardInputs = document.querySelectorAll(
        ".payment-card-input-selector",
      ),
      elementsToDisable = [formSubmitBtn, ...Array.from(paymentCardInputs)];

    const STRIPE_PUBLISHABLE_KEY =
      stripePublishableKey?.getAttribute("data-key");

    const stripe = await loadStripe(STRIPE_PUBLISHABLE_KEY, {
        locale: window.preferredLocale as any,
      }),
      elements = stripe.elements({ locale: window.preferredLocale as any });

    const elementStyles = {
      style: {
        base: {
          fontSize: `${Math.min(
            Math.max(16, 0.25 * window.innerWidth + 14.4),
            18,
          )}px`, //text-b5
        },
      },
      classes: {
        base: "input-field-api",
        focus: "input-field-api-focus",
      },
    };

    // Variables for Stripe Elements
    let cardNumberElement = null;
    let cardExpiryElement = null;
    let cardCvcElement = null;
    let idealBankElement = null;

    checkoutPaymentContainer.addEventListener("change", () => {
      const selectedPaymentMethod = document.querySelector(
        'input[name="payment_method_name"]:checked',
      ) as HTMLInputElement;

      // Clear existing Stripe Elements
      clearStripeElements();

      switch (selectedPaymentMethod.value) {
        case "card":
          // Create Stripe Elements for card number, expiry, and CVC if they don't exist
          if (!cardNumberElement) {
            cardNumberElement = elements.create("cardNumber", elementStyles);
            cardNumberElement.mount("#card-number");
          }
          if (!cardExpiryElement) {
            cardExpiryElement = elements.create("cardExpiry", elementStyles);
            cardExpiryElement.mount("#card-expiry");
          }
          if (!cardCvcElement) {
            cardCvcElement = elements.create("cardCvc", elementStyles);
            cardCvcElement.mount("#card-cvc");
          }

          break;

        case "ideal":
          // Create idealBank Element if it doesn't exist
          if (!idealBankElement) {
            idealBankElement = elements.create("idealBank", elementStyles);
            idealBankElement.mount("#ideal-bank");
          }
      }
    });

    form.addEventListener("submit", async (event) => {
      event.preventDefault();

      elementsToDisable.forEach((element) => {
        element.disabled = true;
      });

      formSubmitBtn.classList.add("processing");
      paymentErrorBottom.classList.add("hidden");

      // @ts-ignore
      const formData = Object.fromEntries(new FormData(form));

      const customer = getCustomer(formData),
        billing_details = subset(customer, ["name", "email", "address"]);

      formData.customer = JSON.stringify(customer);

      let paymentError;

      const { value: selectedPaymentMethod } = document.querySelector(
        'input[name="payment_method_name"]:checked',
      ) as HTMLInputElement;

      // @ts-ignore
      const { error, paymentMethod } = await stripe.createPaymentMethod({
        type: selectedPaymentMethod,
        ...(selectedPaymentMethod === "card" && { card: cardNumberElement }),
        ...(selectedPaymentMethod === "ideal" && { ideal: idealBankElement }),
        ...(selectedPaymentMethod === "sofort" && {
          sofort: { country: customer.address.country },
        }),
        billing_details,
      });

      if (error) {
        paymentError = error;
      } else {
        const response = await fetch(
          window.shouldDisplayExperimentals
            ? "https://dev.pay.scripts.dilmahtea.me"
            : "https://pay.scripts.dilmahtea.me",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(formData),
          },
        ).then((res) => res.json<any>());

        const { client_secret, successURL } = response;

        if (response.success) {
          const { error } = await stripe.confirmPayment({
            clientSecret: client_secret,
            confirmParams: {
              return_url: successURL,
              payment_method: paymentMethod.id,
            },
          });

          paymentError = error;
        } else {
          paymentError = response;
        }
      }

      if (paymentError) {
        paymentErrorBottomContent.textContent = paymentError.message;

        paymentErrorBottom.classList.remove("hidden");
      }

      elementsToDisable.forEach((element) => {
        element.disabled = false;
      });

      formSubmitBtn.classList.remove("processing");
    });

    function clearStripeElements() {
      if (cardNumberElement) {
        cardNumberElement.destroy();
        cardNumberElement = null;
      }
      if (cardExpiryElement) {
        cardExpiryElement.destroy();
        cardExpiryElement = null;
      }
      if (cardCvcElement) {
        cardCvcElement.destroy();
        cardCvcElement = null;
      }
      if (idealBankElement) {
        idealBankElement.destroy();
        idealBankElement = null;
      }
    }
  }
</script>
