---
import localizeCMSImage from "@utils/localizeCMSImage";

declare interface Props {
  title: string;
  returnButtonLink: string;
  returnButtonText: string;
  returnButtonTextSm: string;
  recurData: Record<string, any>;
  payment_methods: Record<string, any>;
}

const {
  title,
  returnButtonLink,
  returnButtonText,
  returnButtonTextSm,
  recurData,
  payment_methods,
} = Astro.props;

const methods = payment_methods.data?.map(({ attributes }) => attributes),
  accepted_cards_icon = recurData.Accepted_cards_icon.data?.map(
    ({ attributes }) => attributes,
  );
---

<style lang="scss">
  .input-field-api {
    @apply border border-primary rounded-full text-black
      py-[clamp(8px,calc(0.25vw+6.4px),10px)] px-[clamp(15px,calc(0.625vw+11px),20px)];
  }

  .input-field-api-focus {
    @apply ring ring-primary-lightest outline-none;
  }
</style>

<section id="checkout-payment-container" class="division-gap grid">
  <h2 class="recoleta text-h2 text-primary">{title}</h2>

  <div role="list" class="payment-card-container flex flex-wrap form-gap">
    {
      methods.map(({ method, icon, supported_countries }) => {
        const country = supported_countries.data.map(
          ({ attributes: { name } }) => name,
        );

        return (
          <div class:list={[country.length > 0 && "hidden"]}>
            <input
              type="radio"
              name="payment_method_name"
              id={method}
              value={method}
              data-country={country}
              class="payment-card-input-selector peer hidden"
            />

            <label for={method} class="radio-button-card">
              {async () => (
                <img
                  class="payment-icon"
                  alt={icon.data?.attributes.alternativeText}
                  src={await localizeCMSImage(icon.data?.attributes.url)}
                />
              )}

              <span>{method?.charAt(0)?.toUpperCase() + method?.slice(1)}</span>
            </label>
          </div>
        );
      })
    }
  </div>

  <div data-name="card-info" class="payment-info division-gap grid !hidden">
    <div class="division-in-gap">
      <div class="text-b3 font-bold text-black">
        {recurData.text_card_details}
      </div>

      <div class="division-in-gap flex flex-wrap">
        <div class="text-b5 text-black-light">
          {recurData.text_accepted_cards}
        </div>

        <div class="division-in-element-gap flex flex-wrap items-center">
          {
            accepted_cards_icon?.map(({ url, alternativeText }) => async () => (
              <img
                class="h-[20px] bg-white rounded"
                alt={alternativeText}
                src={await localizeCMSImage(url)}
              />
            ))
          }
        </div>
      </div>
    </div>

    <div>
      <div role="form" class="form-grid" id="card-info">
        <div class="grid division-in-element-gap">
          <div class="input-label">{recurData.text_card_number}</div>

          <div id="card-number"></div>
        </div>

        <div class="hidden sm:block h-0 select-none"></div>

        <div class="grid division-in-element-gap">
          <div class="input-label">{recurData.text_card_date}</div>

          <div id="card-expiry"></div>
        </div>

        <div class="grid division-in-element-gap">
          <div class="input-label">{recurData.text_card_cvv}</div>

          <div id="card-cvc"></div>
        </div>

        <input type="hidden" id="stripeToken" name="stripeToken" />

        <div class="text-b5 text-error hidden" id="card-error">
          {recurData.error_invalid_card}
        </div>
      </div>

      <input
        type="hidden"
        id="stripe-publishable-key"
        data-key={import.meta.env.STRIPE_PUBLISHABLE_KEY}
        disabled
      />
    </div>
  </div>

  <div data-name="ideal-info" class="payment-info division-gap grid !hidden">
    <div role="form" class="form-grid">
      <div class="grid division-in-element-gap">
        <div class="input-label">{recurData.text_select_bank}</div>

        <div id="ideal-bank"></div>
      </div>
    </div>
  </div>

  <div class="checkout-button-container">
    <a href={returnButtonLink} class="button-link-primary-large">
      <span class="sm:hidden">
        {returnButtonText}
      </span>
      <span class="hidden sm:block">
        {returnButtonTextSm || returnButtonText}
      </span>
    </a>

    <button
      id="submit-btn"
      type="submit"
      class="w-full sm:max-w-[250px] button-primary-large"
      disabled
    >
      <span>
        {recurData.text_pay_with}
        <span class="payment-type"></span>
      </span>
    </button>
  </div>
</section>

<script>
  import { loadStripe } from "@stripe/stripe-js";

  // Check if the element with ID "payment-info-form" exists before executing the scripts
  if (document.getElementById("checkout-payment-container")) {
    const id = document.getElementById.bind(document),
      form = id("payment-info-form"),
      card = id("card"),
      ideal = id("ideal"),
      cardError = id("card-error"),
      stripePublishableKey = id("stripe-publishable-key");

    const STRIPE_PUBLISHABLE_KEY =
      stripePublishableKey?.getAttribute("data-key");

    const stripe = await loadStripe(STRIPE_PUBLISHABLE_KEY),
      elements = stripe.elements({ locale: window.preferredLocale as any });

    const elementStyles = {
      style: {
        base: {
          fontSize: `${Math.min(
            Math.max(16, 0.25 * window.innerWidth + 14.4),
            18,
          )}px`, //text-b5
        },
      },
      classes: {
        base: "input-field-api",
        focus: "input-field-api-focus",
      },
    };

    // Variables for Stripe Elements
    let cardNumberElement = null;
    let cardExpiryElement = null;
    let cardCvcElement = null;
    let idealBankElement = null;

    document.addEventListener("change", () => {
      const isCard = card.checked,
        isIdeal = ideal.checked;

      // Clear existing Stripe Elements
      clearStripeElements();

      if (isCard) {
        // Create Stripe Elements for card number, expiry, and CVC if they don't exist
        if (!cardNumberElement) {
          cardNumberElement = elements.create("cardNumber", elementStyles);
          cardNumberElement.mount("#card-number");
        }
        if (!cardExpiryElement) {
          cardExpiryElement = elements.create("cardExpiry", elementStyles);
          cardExpiryElement.mount("#card-expiry");
        }
        if (!cardCvcElement) {
          cardCvcElement = elements.create("cardCvc", elementStyles);
          cardCvcElement.mount("#card-cvc");
        }
      } else if (isIdeal) {
        // Create idealBank Element if it doesn't exist
        if (!idealBankElement) {
          idealBankElement = elements.create("idealBank", elementStyles);
          idealBankElement.mount("#ideal-bank");
        }
      }

      if (isCard) {
        // Attach form submission event listener for card payments
        form.addEventListener("submit", onSubmitCard);
      } else {
        form.removeEventListener("submit", onSubmitCard);
      }
    });

    function onSubmitCard(event) {
      event.preventDefault();
      createToken(cardNumberElement);
    }

    async function createToken(element) {
      try {
        const { token, error } = await stripe.createToken(element);
        if (error) {
          cardError.classList.remove("hidden");
        } else {
          id("stripeToken").value = token.id;
          form.submit();
        }
      } catch (err) {
        cardError.classList.remove("hidden");
      }
    }

    function clearStripeElements() {
      if (cardNumberElement) {
        cardNumberElement.destroy();
        cardNumberElement = null;
      }
      if (cardExpiryElement) {
        cardExpiryElement.destroy();
        cardExpiryElement = null;
      }
      if (cardCvcElement) {
        cardCvcElement.destroy();
        cardCvcElement = null;
      }
      if (idealBankElement) {
        idealBankElement.destroy();
        idealBankElement = null;
      }
    }
  }
</script>
