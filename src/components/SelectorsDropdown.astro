---
import { parseHTML } from "linkedom";

const { selectorType, ariaLabel } = Astro.props;

const defaultSlotHTML = await Astro.slots.render("default");

const { document } = parseHTML(defaultSlotHTML),
  listItems = [...document.querySelectorAll("a")];

const firstListItemHTML = listItems[0].outerHTML,
  dropdownOpenAreaInnerHTML = listItems
    .slice(1)
    .map((a) => a.outerHTML)
    .join("");

const dropdownInnerHTML = `${firstListItemHTML}<div>${dropdownOpenAreaInnerHTML}</div>`;
---

<style lang="scss" is:global>
  .selectors-dropdown[data-selector-type="lang"]
    > a
    > span
    > span
    > span:not(:first-child) {
    display: none;
  }

  .selectors-dropdown {
    > a {
      @apply font-medium border-2 border-primary rounded-full;

      > span {
        @apply py-2.5 px-[15px];
      }
    }

    > div {
      @apply absolute mt-[5px] w-full overflow-y-auto
        rounded-t-[25px] rounded-b-[25px];

      > a {
        display: none;

        > span {
          @apply hover:font-semibold hover:bg-primary-light;

          border-radius: inherit;

          > svg:last-of-type {
            display: none;
          }
        }
      }
    }

    &.dropdown-open {
      z-index: 1;

      > div {
        @apply border-2 border-primary;

        > a {
          display: block;
        }
      }
    }
  }
</style>

<section
  role="listbox"
  aria-label={ariaLabel}
  set:html={dropdownInnerHTML}
  data-selector-type={selectorType}
  class:list={[
    "selectors-dropdown relative",
    "text-primary text-sm lg:text-base select-none drop-shadow-lg",
  ]}
/>

<script>
  const dropdowns = [...document.querySelectorAll(".selectors-dropdown")];

  const updateDropdownOpenAreaHeight = () => {
    dropdowns.forEach((dropdown) => {
      if (dropdown.classList.contains("dropdown-open")) {
        const dropdownOpenArea = [...dropdown.children][1] as HTMLDivElement,
          dropdownOpenAreaMaxHeight =
            window.innerHeight - dropdownOpenArea.getBoundingClientRect().y - 8;

        dropdownOpenArea.style.maxHeight = dropdownOpenAreaMaxHeight + "px";
      }
    });
  };

  document.addEventListener("click", (event) => {
    const target = event.target as HTMLElement;

    dropdowns.forEach((dropdown) => {
      if (dropdown.contains(target)) {
        dropdown.classList.toggle("dropdown-open");

        updateDropdownOpenAreaHeight();
      } else {
        dropdown.classList.remove("dropdown-open");
      }
    });
  });

  dropdowns.forEach((dropdown) => {
    dropdown.addEventListener("keyup", (event) => {
      const { key } = event as KeyboardEvent;

      // alias enter keypress to click event
      if (key === "Enter") {
        (event.target as HTMLElement).click();
      }
    });
  });

  window.addEventListener("resize", updateDropdownOpenAreaHeight);
</script>
