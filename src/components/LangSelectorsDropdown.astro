---
import CMS from "@store/CMS";
import getLocalesData from "@utils/getLocalesData";

const { docLocale, availableLocales } = Astro.props,
  { locales, languages, localeNamesData } = getLocalesData(),
  docLang = languages[locales.indexOf(docLocale)],
  availableLanguages = [];

const ariaLabelRecurData = CMS.get("ariaLabelRecurringElement", docLocale);

// get available alternate locales
locales.forEach((locale, index) => {
  if (locale !== docLocale && [...availableLocales].includes(locale)) {
    availableLanguages.push(languages[index]);
  }
});

// get local names of available languages
const localizedAvailableLanguages = availableLanguages.map(
  (language) => localeNamesData[docLang][language]
);

const langSelectorsData = localizedAvailableLanguages.map(
  (localizedLanguage, i) => {
    const language = availableLanguages[i],
      lang = locales[languages.indexOf(language)],
      localLanguageName = localeNamesData[language][language];

    return {
      lang,
      localizedLanguage,
      localLanguageName,
    };
  }
);

// sort lang selectors alphabetically
langSelectorsData.sort(
  (
    { localizedLanguage: nextLanguage },
    { localizedLanguage: currentLanguage }
  ) => nextLanguage.localeCompare(currentLanguage, "en-US")
);
---

<style lang="scss">
  .lang-selector-dropdown {
    .lang-selector-button {
      border-radius: 25px;
    }

    .lang-selector-dropdown-menu {
      border-radius: 0 0 25px 25px;
    }

    &.dropdown-open {
      .lang-selector-button {
        border-radius: 25px 25px 0 0;
      }

      .lang-selector-dropdown-menu {
        display: block;
      }
    }
  }
</style>

<div
  role="menu"
  tabindex="0"
  aria-label={ariaLabelRecurData.Navbar_language_selectors_text}
  class:list={[
    "lang-selector-dropdown relative",
    "text-primary text-sm lg:text-base select-none",
  ]}
>
  <div
    role="button"
    class:list={[
      "lang-selector-button flex items-center justify-between gap-x-1.5 md:gap-x-3",
      "w-full sm:max-w-[40vw] bg-lightgray cursor-pointer focus:outline-none",
      "font-medium leading-[120%] py-2.5 px-[15px] border-2 border-primary",
    ]}
  >
    <div class="text-[15px]">{docLang}</div>

    <svg class="w-3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 11.6 6.7">
      <path
        d="M.3.3A.6.6,0,0,1,.9,0a.9.9,0,0,1,.6.3L5.8,4.6,10.2.3a.6.6,0,0,1,.6-.3l.6.3a.8.8,0,0,1,.2.6.7.7,0,0,1-.2.6l-5,4.9a.6.6,0,0,1-.6.3.9.9,0,0,1-.6-.3L.3,1.5A.9.9,0,0,1,0,.9.6.6,0,0,1,.3.3Z"
        fill="#2B4B50"></path>
    </svg>
  </div>

  <ul
    class:list={[
      "lang-selector-dropdown-menu absolute hidden overflow-hidden",
      "w-full rounded border-2 border-t-0 border-primary drop-shadow-lg",
    ]}
  >
    {
      langSelectorsData.map(
        ({ lang, localizedLanguage, localLanguageName }) => (
          <li class="block bg-lightgray">
            <button
              lang={lang}
              class:list={[
                lang,
                "lang-selector flex flex-wrap items-center gap-x-1.5 md:gap-x-3",
                "text-primary w-full p-4 hover:bg-lightgray2/60 cursor-pointer",
              ]}
            >
              <span class="flex gap-[5px] items-center leading-[120%]">
                <span class="text-[15px] font-medium">{localizedLanguage}</span>
                <span class="w-1 h-1 rounded-full bg-primary" />
                <span class="text-xs">{localLanguageName}</span>
              </span>
            </button>
          </li>
        )
      )
    }
  </ul>
</div>

<script>
  const dropdowns = document.querySelectorAll(".lang-selector-dropdown");

  // toggle language selectors dropdown
  document.addEventListener("click", (event) => {
    const target = event.target as HTMLElement;

    dropdowns.forEach((dropdown) => {
      dropdown.classList[dropdown.contains(target) ? "toggle" : "remove"](
        "dropdown-open"
      );
    });
  });

  dropdowns.forEach((dropdown) => {
    dropdown.addEventListener("keyup", (event) => {
      const { key } = event as KeyboardEvent;

      if (key === "Enter") {
        dropdown.classList.toggle("dropdown-open");
      }
    });
  });

  document.querySelectorAll(".lang-selector").forEach((langSelector) => {
    // change & redirect to preferred locale
    langSelector.addEventListener("click", () => {
      // @ts-ignore
      const { lang: newLocale } = langSelector;

      localStorage.setItem(`locale`, newLocale);

      const localeRegex = new RegExp(
        // @ts-ignore
        `^/(${availableLocales.map((locale) => locale).join("|")})/`
        /* availableLocales is defined in SetPreferredLocale.astro (Layout.astro for 404) */
      );

      let [, locale] = location.pathname.match(localeRegex) ?? [];

      location.href =
        `/${newLocale}/` + location.pathname.slice(locale ? 4 : 0);
    });
  });
</script>
