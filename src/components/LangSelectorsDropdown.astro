---
import getLocalesData from "src/utils/getLocalesData";

const { docLocale, availableLocales } = Astro.props,
  { locales, languages, localeNamesData } = getLocalesData(),
  docLang = languages[locales.indexOf(docLocale)],
  availableLanguages = [];

locales.forEach((locale, index) => {
  if (locale !== docLocale && [...availableLocales].includes(locale)) {
    availableLanguages.push(languages[index]);
  }
});

const localizedAvailableLanguages = availableLanguages.map(
  (language) => localeNamesData[docLang][language]
);

localizedAvailableLanguages.sort((nextLanguage, currentLanguage) =>
  nextLanguage.localeCompare(currentLanguage, "en-US")
);
---

<style lang="scss">
  @use "src/styles/colors";

  .lang-selector {
    @apply font-bold w-full;

    background-color: colors.$light-gray;
  }

  #lang-selector-dropdown {
    color: colors.$primary-color;

    @apply scale-[0.775] sm:scale-[0.85] md:scale-[0.925] lg:scale-[1];

    #lang-selector-dropdown-menu {
      @apply hidden w-full;

      border-radius: 0 0 25px 25px;
      border-top: 1px solid colors.$primary-color;
    }

    #lang-selector-button {
      border-radius: 25px;
      background-color: colors.$light-gray;

      @apply p-3.5 w-44 max-w-[40vw] cursor-pointer;
    }

    &.dropdown-open {
      #lang-selector-dropdown-menu {
        display: block;
      }

      #lang-selector-button {
        border-radius: 25px 25px 0 0;
      }
    }
  }
</style>

<div
  id="lang-selector-dropdown"
  class="text-sm lg:text-base font-bold relative select-none"
>
  <div
    role="button"
    id="lang-selector-button"
    class="flex items-center justify-between gap-x-1.5 md:gap-x-3 font-bold focus:outline-none"
  >
    <div class="font-bold">{docLang}</div>

    <div class="w-3">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 11.6 6.7">
        <path
          class="cls-1"
          d="M.3.3A.6.6,0,0,1,.9,0a.9.9,0,0,1,.6.3L5.8,4.6,10.2.3a.6.6,0,0,1,.6-.3l.6.3a.8.8,0,0,1,.2.6.7.7,0,0,1-.2.6l-5,4.9a.6.6,0,0,1-.6.3.9.9,0,0,1-.6-.3L.3,1.5A.9.9,0,0,1,0,.9.6.6,0,0,1,.3.3Z"
          fill="#2B4B50"></path>
      </svg>
    </div>
  </div>

  <ul
    id="lang-selector-dropdown-menu"
    class="absolute rounded hidden overflow-hidden"
  >
    {
      localizedAvailableLanguages.map((localizedLanguage, i) => {
        const language = availableLanguages[i],
          lang = locales[languages.indexOf(language)],
          localLanguageName = localeNamesData[language][language];

        return (
          <li class="block">
            <button
              lang={lang}
              style="cursor: pointer;"
              class:list={[
                lang,
                "lang-selector p-4 hover:bg-gray-300 flex flex-wrap items-center gap-x-1.5 md:gap-x-3",
              ]}
            >
              <span class="lang">
                {localizedLanguage} / {localLanguageName}
              </span>
            </button>
          </li>
        );
      })
    }
  </ul>
</div>

<script>
  const dropdown = document.querySelector("#lang-selector-dropdown");

  // toggle language selectors dropdown
  document.addEventListener("click", ({ target }) => {
    // @ts-ignore
    dropdown.classList[dropdown.contains(target) ? "toggle" : "remove"](
      "dropdown-open"
    );
  });

  document.querySelectorAll(".lang-selector").forEach((langSelector) => {
    // change & redirect to preferred locale
    langSelector.addEventListener("click", () => {
      // @ts-ignore
      const { lang: newLocale } = langSelector;

      localStorage.setItem(`locale`, newLocale);

      const localeRegex = new RegExp(
        // @ts-ignore
        `^/(${availableLocales.map((locale) => locale).join("|")})/`
        /* availableLocales is defined in SetPreferredLocale.astro (Layout.astro for 404) */
      );

      let [, locale] = location.pathname.match(localeRegex) ?? [];

      location.href =
        `/${newLocale}/` + location.pathname.slice(locale ? 4 : 0);
    });
  });
</script>
