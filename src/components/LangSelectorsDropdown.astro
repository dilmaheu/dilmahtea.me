---
import CMS from "@store/CMS";
import getLocalesData from "@utils/getLocalesData";

const { docLocale, availableLocales } = Astro.props,
  { locales, languages, localeNamesData } = getLocalesData(),
  docLang = languages[locales.indexOf(docLocale)],
  availableLanguages = [];

const ariaLabelRecurData = CMS.get("ariaLabelRecurringElement", docLocale);

// get available alternate locales
locales.forEach((locale, index) => {
  if (availableLocales.includes(locale)) {
    availableLanguages.push(languages[index]);
  }
});

// get local names of available languages
const localizedAvailableLanguages = availableLanguages.map(
  (language) => localeNamesData[docLang][language]
);

const langSelectorsData = localizedAvailableLanguages.map(
  (localizedLanguage, i) => {
    const language = availableLanguages[i],
      lang = locales[languages.indexOf(language)],
      localLanguageName = localeNamesData[language][language];

    return {
      lang,
      localizedLanguage,
      localLanguageName,
    };
  }
);

// sort lang selectors alphabetically
langSelectorsData.sort(
  (
    { localizedLanguage: nextLanguage },
    { localizedLanguage: currentLanguage }
  ) => nextLanguage.localeCompare(currentLanguage, "en-US")
);

// move current locale to the top of the list
const currentLangIndex = langSelectorsData.findIndex(
  ({ lang }) => lang === docLocale
);

langSelectorsData.unshift(langSelectorsData.splice(currentLangIndex, 1)[0]);
---

<style lang="scss">
  .lang-selector-dropdown {
    li {
      &:first-child {
        @apply font-medium border-y-2 rounded-full;

        > span {
          @apply py-2.5 px-[15px];

          span span:not(:first-child) {
            display: none;
          }
        }
      }

      &:not(:first-child) {
        display: none;

        > span {
          @apply hover:font-semibold hover:bg-primary-light;

          border-radius: inherit;

          svg {
            display: none;
          }
        }
      }

      &:nth-child(2) {
        @apply border-t-2 rounded-t-[25px];
      }

      &:last-child {
        @apply border-b-2 rounded-b-[25px];
      }
    }

    &.dropdown-open {
      li {
        display: block;

        &:first-child {
          @apply mb-[5px];
        }
      }
    }
  }
</style>

<ul
  tabindex="0"
  role="listbox"
  data-name="lang"
  aria-label={ariaLabelRecurData.Navbar_language_selectors_text}
  class:list={[
    // set a fixed height to make the dropdown overflow when opened
    // ensure that fixed height is greater than the offset height of the first child in both mobile and desktop view
    "lang-selector-dropdown relative h-11",
    "text-primary text-sm lg:text-base select-none drop-shadow-lg",
  ]}
>
  {
    langSelectorsData.map(
      ({ lang, localizedLanguage, localLanguageName }, i) => (
        <li
          role="option"
          tabindex="0"
          aria-selected={i === 0 && true}
          data-value={lang}
          class="lang-selector block bg-secondary text-black-light border-2 border-y-0 border-primary cursor-pointer"
        >
          <span class="w-full p-4 flex items-center justify-between">
            <span class="flex gap-[5px] items-center leading-[120%]">
              <span class="text-[15px] ">{localizedLanguage}</span>
              <span class="w-1 h-1 rounded-full bg-primary" />
              <span class="text-xs">{localLanguageName}</span>
            </span>

            <svg
              class="w-3"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 11.6 6.7"
            >
              <path
                d="M.3.3A.6.6,0,0,1,.9,0a.9.9,0,0,1,.6.3L5.8,4.6,10.2.3a.6.6,0,0,1,.6-.3l.6.3a.8.8,0,0,1,.2.6.7.7,0,0,1-.2.6l-5,4.9a.6.6,0,0,1-.6.3.9.9,0,0,1-.6-.3L.3,1.5A.9.9,0,0,1,0,.9.6.6,0,0,1,.3.3Z"
                fill="#2B4B50"
              />
            </svg>
          </span>
        </li>
      )
    )
  }
</ul>

<script>
  const dropdowns = [...document.querySelectorAll(".lang-selector-dropdown")],
    langSelectors = Array.from(
      document.querySelectorAll<HTMLUListElement>(".lang-selector")
    );

  // toggle language selectors dropdown
  document.addEventListener("click", (event) => {
    const target = event.target as HTMLElement;

    dropdowns.forEach((dropdown) => {
      if (dropdown.contains(target)) {
        dropdown.classList.toggle("dropdown-open");
      } else {
        dropdown.classList.remove("dropdown-open");
      }
    });
  });

  dropdowns.forEach((dropdown) => {
    dropdown.addEventListener("keyup", (event) => {
      const { key } = event as KeyboardEvent;

      // alias enter keypress to click event
      if (key === "Enter") {
        (event.target as HTMLElement).click();
      }
    });
  });

  langSelectors.forEach((langSelector) => {
    langSelector.addEventListener("click", () => {
      if (langSelector.parentElement.firstElementChild === langSelector) return;

      const { value: newLocale } = langSelector.dataset;

      const currentLangSelectors = Array.from(
        langSelector.parentElement
          .children as HTMLCollectionOf<HTMLUListElement>
      );

      currentLangSelectors.forEach((langSelector) => {
        langSelector.ariaSelected = String(
          langSelector.dataset.value === newLocale
        );
      });

      // sort lang selectors alphabetically
      currentLangSelectors.sort((nextOption, currentOption) => {
        const nextLanguage = nextOption.querySelector<HTMLSpanElement>(
            "span span:first-child"
          ).innerText,
          currentLanguage = currentOption.querySelector<HTMLSpanElement>(
            "span span:first-child"
          ).innerText;

        return nextLanguage.localeCompare(currentLanguage, "en-US");
      });

      // move selected lang selector to the top
      const selectedLangSelectorIndex = currentLangSelectors.findIndex(
        ({ ariaSelected }) => ariaSelected === "true"
      );

      currentLangSelectors.unshift(
        currentLangSelectors.splice(selectedLangSelectorIndex, 1)[0]
      );

      // move lang selector elements to their new position
      currentLangSelectors.forEach((langSelector, i) => {
        langSelector.parentElement.insertBefore(
          langSelector,
          langSelector.parentElement.children[i]
        );
      });

      // find & replace the other lang selectors dropdown
      dropdowns.find(
        (dropdown) => dropdown !== langSelector.parentElement
      ).innerHTML = langSelector.parentElement.innerHTML;
    });
  });
</script>
