---
import CMS from "@store/CMS";
import getLocalesData from "@utils/getLocalesData";
import SelectorsDropdown from "./SelectorsDropdown.astro";
import SelectorsDropdownItem from "./SelectorsDropdownItem.astro";

declare interface Props {
  docLocale: string;
  availableLocales: string[];
}

const { docLocale, availableLocales } = Astro.props,
  { locales, languages, localeNamesData } = getLocalesData(),
  docLang = languages[locales.indexOf(docLocale)],
  availableLanguages = [];

const ariaLabelRecurData = CMS.get("ariaLabelRecurringElement", docLocale);

// get available alternate locales
locales.forEach((locale, index) => {
  if (availableLocales.includes(locale)) {
    availableLanguages.push(languages[index]);
  }
});

// get local names of available languages
const localizedAvailableLanguages = availableLanguages.map(
  (language) => localeNamesData[docLang][language],
);

const langSelectorsData = localizedAvailableLanguages.map(
  (localizedLanguage, i) => {
    const language = availableLanguages[i],
      lang = locales[languages.indexOf(language)],
      localLanguageName = localeNamesData[language][language];

    return {
      lang,
      localizedLanguage,
      localLanguageName,
    };
  },
);

// sort lang selectors alphabetically
langSelectorsData.sort(
  (
    { localizedLanguage: nextLanguage },
    { localizedLanguage: currentLanguage },
  ) => nextLanguage.localeCompare(currentLanguage, "en-US"),
);

// move current locale to the top of the list
const currentLangIndex = langSelectorsData.findIndex(
  ({ lang }) => lang === docLocale,
);

langSelectorsData.unshift(langSelectorsData.splice(currentLangIndex, 1)[0]);
---

<SelectorsDropdown
  selectorType="lang"
  ariaLabel={ariaLabelRecurData.Navbar_language_selectors_text}
>
  {
    langSelectorsData.map(
      ({ lang, localizedLanguage, localLanguageName }, i) => (
        <SelectorsDropdownItem
          data-value={lang}
          aria-selected={i === 0 && true}
        >
          <span class="flex gap-[5px] items-center leading-[120%]">
            <span class="text-[15px] ">{localizedLanguage}</span>
            <span class="w-1 h-1 rounded-full bg-primary" />
            <span class="text-xs">{localLanguageName}</span>
          </span>
        </SelectorsDropdownItem>
      ),
    )
  }
</SelectorsDropdown>
