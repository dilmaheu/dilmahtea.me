---
import getLocalesData from "src/utils/getLocalesData";

const { docLocale, availableLocales } = Astro.props,
  { locales, languages, localeNamesData } = getLocalesData(),
  docLang = languages[locales.indexOf(docLocale)],
  availableLanguages = [];

locales.forEach((locale, index) => {
  if (locale !== docLocale && [...availableLocales].includes(locale)) {
    availableLanguages.push(languages[index]);
  }
});

const localizedAvailableLanguages = availableLanguages.map(
  (language) => localeNamesData[docLang][language]
);

localizedAvailableLanguages.sort((nextLanguage, currentLanguage) =>
  nextLanguage.localeCompare(currentLanguage, "en-US")
);
---

<style>
  .lang-selector {
    font-family: Roboto;
    font-weight: 700;
    width: 100%;
  }
</style>

<div
  id="dropdown"
  class="dropdown text-sm lg:text-base font-bold relative noselect"
>
  <div
    id="langBtn"
    class="flex items-center justify-between gap-x-1.5 md:gap-x-3 font-bold focus:outline-none langBtn"
  >
    <div class="font-bold">{docLang}</div>

    <div class="w-3">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 11.6 6.7">
        <path
          class="cls-1"
          d="M.3.3A.6.6,0,0,1,.9,0a.9.9,0,0,1,.6.3L5.8,4.6,10.2.3a.6.6,0,0,1,.6-.3l.6.3a.8.8,0,0,1,.2.6.7.7,0,0,1-.2.6l-5,4.9a.6.6,0,0,1-.6.3.9.9,0,0,1-.6-.3L.3,1.5A.9.9,0,0,1,0,.9.6.6,0,0,1,.3.3Z"
          fill="#2B4B50"></path>
      </svg>
    </div>
  </div>

  <ul
    id="dropdownMenu"
    class="absolute rounded hidden overflow-hidden dropdown-menu"
  >
    {
      localizedAvailableLanguages.map((localizedLanguage, i) => {
        const language = availableLanguages[i],
          lang = locales[languages.indexOf(language)],
          localLanguageName = localeNamesData[language][language];

        return (
          <li class="block">
            <button
              lang={lang}
              style="cursor: pointer;"
              class:list={[
                lang,
                "lang-selector hover:bg-gray-300 flex flex-wrap gap-x-1.5 md:gap-x-3 items-center dropdownItem",
              ]}
            >
              <span class="lang">
                {localizedLanguage} / {localLanguageName}
              </span>
            </button>
          </li>
        );
      })
    }
  </ul>
</div>
