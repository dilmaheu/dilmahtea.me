---
import RecurringImages from "@store/RecurringImages";
import shouldDisplayExperimentals from "@utils/shouldDisplayExperimentals";

const { favicon } = RecurringImages;

declare interface Props {
  meta: any;
  locale: string;
  metaImageID: string;
  availableLocales: string[];
}

const { meta, locale, metaImageID, availableLocales } = Astro.props as Props,
  {
    noindex,
    nofollow,
    HTML_Title: title,
    URL_slug: slugURL,
    Canonical_link: canonicalURL,
    Meta_description: description,
  } = meta,
  domain = Astro.site.origin,
  { CF_IMAGE_DELIVERY_ENDPOINT: imgSrcPrefix } = import.meta.env,
  alternateLocales = availableLocales.filter((lcl) => lcl !== locale),
  documentHref = `${domain}/${locale}/${slugURL === "/" ? "" : slugURL + `/`}`,
  canonicalHref = 
    `${domain}/en/${(canonicalURL !== undefined ? (canonicalURL === "/" ? "" : canonicalURL) : slugURL  + `/`)}`;
---

<meta charset="UTF-8" />
<title>{title}</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="keywords" content="" />
<meta name="description" content={description} />
<meta name="author" content="Dilmah" />
<meta
  name="robots"
  content={[noindex && "noindex", nofollow && "nofollow"]
    .filter(Boolean)
    .join(", ") || "all"}
/>

{/* Sitemap */}
<link
  rel="sitemap"
  title="Sitemap"
  href="/sitemap-0.xml"
  type="application/xml"
/>

{/* RSS */}
{/* <link rel="alternate" type="application/rss+xml" href="" /> */}

{/* Favicon */}
<link rel="icon" href={favicon.src} />

{/* SEO */}
<link rel="canonical" href={canonicalHref} hreflang="en" />

{
  alternateLocales.map((alternateLocale) => (
    <link
      rel="alternate"
      hreflang={alternateLocale}
      href={`${domain}/${alternateLocale}/${slugURL === "/" ? "" : slugURL + `/`}`}
    />
  ))
}

{/* OpenGraph */}
<meta property="og:title" content={title} />
<meta property="og:type" content="website" />
<meta property="og:locale" content={locale} />
<meta property="og:url" content={documentHref} />
<meta property="og:site_name" content="Dilmah" />
<meta property="og:description" content={description} />
<meta property="og:image" content={imgSrcPrefix + metaImageID + `/opengraph`} />

{/* Twitter */}
<meta name="twitter:title" content={title} />
<meta property="twitter:url" content={documentHref} />
<meta property="twitter:domain" content="dilmahtea.me" />
<meta name="twitter:description" content={description} />
<meta name="twitter:card" content="summary_large_image" />
<meta
  name="twitter:image"
  content={imgSrcPrefix + metaImageID + `/twittercard`}
/>

{
  !shouldDisplayExperimentals() && (
    // Plausible Analytics Tracking Code
    <script
      defer
      src="/rpcq/script.js"
      data-api="/rpcq/event"
      data-domain="dilmahtea.me"
    />
  )
}

{/* OpenReplay Tracking Code for Dilmahtea.me */}
<script>
  var initOpts = {
    projectKey: "IjHJ0NTxwL2YHDk9TDnR",
    defaultInputMode: 0,
    obscureTextNumbers: false,
    obscureTextEmails: true,
  };
  var startOpts = { userID: "" };
  (function (A, s, a, y, e, r) {
    // @ts-ignore
    r = window.OpenReplay = [e, r, y, [s - 1, e]];
    // @ts-ignore
    s = document.createElement("script");
    // @ts-ignore
    s.src = A;
    // @ts-ignore
    s.async = !a;
    // @ts-ignore
    document.getElementsByTagName("head")[0].appendChild(s);
    r.start = function (v) {
      r.push([0]);
    };
    r.stop = function (v) {
      r.push([1]);
    };
    r.setUserID = function (id) {
      r.push([2, id]);
    };
    r.setUserAnonymousID = function (id) {
      r.push([3, id]);
    };
    r.setMetadata = function (k, v) {
      r.push([4, k, v]);
    };
    r.event = function (k, p, i) {
      r.push([5, k, p, i]);
    };
    r.issue = function (k, p) {
      r.push([6, k, p]);
    };
    r.isActive = function () {
      return false;
    };
    r.getSessionToken = function () {};
  })("//static.openreplay.com/latest/openreplay.js", 1, 0, initOpts, startOpts);
</script>
