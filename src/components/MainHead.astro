---
import favicon from "@images/favicon.svg";
import shouldDisplayExperimentals from "@utils/shouldDisplayExperimentals";

export interface Props {
  title: string;
  description: string;
  noIndex: string;
  noFollow: string;
  image?: string;
  locale: string;
  canonicalURL?: string;
  slugURL: string | URL;
  availableLocales: (string | null)[];
}

const {
  title,
  description,
  noIndex,
  noFollow,
  image,
  locale,
  canonicalURL,
  slugURL,
  availableLocales,
} = Astro.props as Props;
const url = `${import.meta.env.CF_IMAGE_DELIVERY_ENDPOINT}`;
const domain = Astro.site.origin;

const alternateLocales = availableLocales.filter((lcl) => lcl !== locale),
  documentHref = `${domain}/${locale}/${slugURL === "/" ? "" : slugURL}/`,
  canonicalHref = `${domain}/en/${canonicalURL === "/" ? "" : canonicalURL}/`;
---

<meta charset="UTF-8" />
<title>{title}</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="keywords" content="" />
<meta name="description" content={description} />
<meta name="author" content="Dilmah" />
<meta
  name="robots"
  content={noIndex.length == 7 && noFollow.length == 8
    ? "noindex, nofollow"
    : noIndex.length == 7
    ? "noindex"
    : noFollow.length == 8
    ? "nofollow"
    : "all"}
/>

{/* Sitemap */}
<link
  rel="sitemap"
  type="application/xml"
  title="Sitemap"
  href="/sitemap-0.xml"
/>

{/* RSS */}
{/* <link rel="alternate" type="application/rss+xml" href="" /> */}

{/* Favicon */}
<link rel="icon" href={favicon} />

{/* SEO */}
<link rel="canonical" href={canonicalHref} />
<link href={documentHref} hreflang={locale} />

{
  alternateLocales.map((alternateLocale) => (
    <link
      rel="alternate"
      hreflang={alternateLocale}
      href={`${domain}/${alternateLocale}/${slugURL === "/" ? "" : slugURL}/`}
    />
  ))
}

{/* OpenGraph */}
<meta property="og:locale" content={locale} />
<meta property="og:type" content="website" />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:url" content={documentHref} />
<meta property="og:site_name" content="Dilmah" />
<meta property="og:image" content={url + image + `/opengraph`} />

{/* Twitter */}
<meta name="twitter:card" content={image ? "summary_large_image" : "summary"} />
<meta property="twitter:domain" content="dilmahtea.me" />
<meta property="twitter:url" content={documentHref} />
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={url + image + `/twittercard`} />

{
  !shouldDisplayExperimentals() && (
    // Plausible Analytics Tracking Code
    <script
      defer
      data-domain="dilmahtea.me"
      data-api="/rpcq/event"
      src="/rpcq/script.js"
    />
  )
}

{/* OpenReplay Tracking Code for Dilmahtea.me */}
<script>
  var initOpts = {
    projectKey: "IjHJ0NTxwL2YHDk9TDnR",
    defaultInputMode: 0,
    obscureTextNumbers: false,
    obscureTextEmails: true,
  };
  var startOpts = { userID: "" };
  (function (A, s, a, y, e, r) {
    // @ts-ignore
    r = window.OpenReplay = [e, r, y, [s - 1, e]];
    // @ts-ignore
    s = document.createElement("script");
    // @ts-ignore
    s.src = A;
    // @ts-ignore
    s.async = !a;
    // @ts-ignore
    document.getElementsByTagName("head")[0].appendChild(s);
    r.start = function (v) {
      r.push([0]);
    };
    r.stop = function (v) {
      r.push([1]);
    };
    r.setUserID = function (id) {
      r.push([2, id]);
    };
    r.setUserAnonymousID = function (id) {
      r.push([3, id]);
    };
    r.setMetadata = function (k, v) {
      r.push([4, k, v]);
    };
    r.event = function (k, p, i) {
      r.push([5, k, p, i]);
    };
    r.issue = function (k, p) {
      r.push([6, k, p]);
    };
    r.isActive = function () {
      return false;
    };
    r.getSessionToken = function () {};
  })("//static.openreplay.com/latest/openreplay.js", 1, 0, initOpts, startOpts);
</script>
