---
import RecurringImages from "@store/RecurringImages";
import shouldDisplayExperimentals from "@utils/shouldDisplayExperimentals";

const { favicon } = RecurringImages;

declare interface Props {
  page: Record<string, any>;
  meta: Record<string, any>;
  locale: string;
  metaImageSrc: string;
  alternateURLs: { [locale: string]: string };
}

const { page, meta, locale, metaImageSrc, alternateURLs } =
  Astro.props as Props;

const {
  noindex,
  nofollow,
  HTML_Title: title,
  URL_slug: slugURL,
  Canonical_link: canonicalURL,
  Meta_description: description,
} = meta;

const { origin, hostname } = Astro.site,
  { updatedAt: lastModifiedDate } = page;

const documentHref = origin + Astro.url.pathname,
  canonicalHref = canonicalURL
    ? documentHref.replace(slugURL, canonicalURL)
    : documentHref;

const openGraphImage =
    origin + (await importRemoteImage(metaImageSrc + "?w=1200&h=627")),
  twitterImage =
    origin + (await importRemoteImage(metaImageSrc + "?w=800&h=418"));
---

<meta charset="UTF-8" />
<title>{title}</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="keywords" content="" />
<meta name="description" content={description} />
<meta name="author" content="Dilmah" />
<meta
  name="robots"
  content={[noindex && "noindex", nofollow && "nofollow"]
    .filter(Boolean)
    .join(", ") || "all"}
/>

{/* Sitemap */}
<link
  rel="sitemap"
  title="Sitemap"
  href="/sitemap.xml"
  type="application/xml"
/>

{/* RSS */}
{/* <link rel="alternate" type="application/rss+xml" href="" /> */}

{/* Favicon */}
<link rel="icon" href={favicon.src} />

{/* SEO */}
<link rel="canonical" href={canonicalHref} hreflang={locale} />
{
  Object.entries(alternateURLs).map(([alternateLocale, alternateURL]) => (
    <link
      rel="alternate"
      hreflang={alternateLocale}
      href={origin + alternateURL}
    />
  ))
}

{/* Last Modified Meta Tag */}
<meta http-equiv="last-modified" content={lastModifiedDate} />

{/* OpenGraph */}
<meta property="og:title" content={title} />
<meta property="og:type" content="website" />
<meta property="og:locale" content={locale} />
<meta property="og:url" content={documentHref} />
<meta property="og:site_name" content="Dilmah" />
<meta property="og:description" content={description} />
<meta property="og:image" content={openGraphImage} />

{/* Twitter */}
<meta name="twitter:title" content={title} />
<meta property="twitter:url" content={documentHref} />
<meta property="twitter:domain" content={hostname} />
<meta name="twitter:description" content={description} />
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:image" content={twitterImage} />

{
  !shouldDisplayExperimentals && (
    // Plausible Analytics Tracking Code
    <script
      defer
      src="/rpcq/script.js"
      data-api="/rpcq/event"
      data-domain={hostname}
    />
  )
}

{/* OpenReplay Tracking Code for Dilmahtea.me */}
<script>
  window.addEventListener("load", () => {
    var initOpts = {
      projectKey: "IjHJ0NTxwL2YHDk9TDnR",
      defaultInputMode: 0,
      obscureTextNumbers: false,
      obscureTextEmails: true,
    };
    var startOpts = { userID: "" };
    (function (A, s, a, y, e, r) {
      // @ts-ignore
      r = window.OpenReplay = [e, r, y, [s - 1, e]];
      // @ts-ignore
      s = document.createElement("script");
      // @ts-ignore
      s.src = A;
      // @ts-ignore
      s.async = !a;
      // @ts-ignore
      document.getElementsByTagName("head")[0].appendChild(s);
      r.start = function (v) {
        r.push([0]);
      };
      r.stop = function (v) {
        r.push([1]);
      };
      r.setUserID = function (id) {
        r.push([2, id]);
      };
      r.setUserAnonymousID = function (id) {
        r.push([3, id]);
      };
      r.setMetadata = function (k, v) {
        r.push([4, k, v]);
      };
      r.event = function (k, p, i) {
        r.push([5, k, p, i]);
      };
      r.issue = function (k, p) {
        r.push([6, k, p]);
      };
      r.isActive = function () {
        return false;
      };
      r.getSessionToken = function () {};
    })(
      "//static.openreplay.com/latest/openreplay.js",
      1,
      0,
      initOpts,
      startOpts
    );
  });
</script>
