---
const { locales, docLang, languages, localeNamesData, availableLanguages } =
  Astro.props;

const localizedAvailableLanguages = availableLanguages.map(
  (language) => localeNamesData[docLang][language]
);

localizedAvailableLanguages.sort((nextLanguage, currentLanguage) =>
  nextLanguage.localeCompare(currentLanguage, "en-US")
);
---

<style>
  .lang-selector {
    font-family: Roboto;
    font-weight: 700;
    width: 100%;
  }
</style>

{
  localizedAvailableLanguages.map((localizedLanguage, i) => {
    const language = availableLanguages[i],
      lang = locales[languages.indexOf(language)],
      localLanguageName = localeNamesData[language][language];

    return (
      <li class="block">
        <button
          lang={lang}
          style="cursor: pointer;"
          class:list={[
            lang,
            "lang-selector hover:bg-gray-300 flex flex-wrap gap-x-1.5 md:gap-x-3 items-center dropdownItem",
          ]}
        >
          <span class="lang">
            {localizedLanguage} / {localLanguageName}
          </span>
        </button>
      </li>
    );
  })
}
