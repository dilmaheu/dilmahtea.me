---
import Markdown from "@astrojs/markdown-component";
import { Picture } from "astro-imagetools/components";

import ClipPathSVG from "@components/ClipPathSVG.astro";
import HeadingLinks from "@components/HeadingLinks.astro";
import ClippedImg from "@components/ClippedImg.astro";
import ClippedPicture from "@components/ClippedPicture.astro";
import HeroBackground from "@components/HeroBackground.astro";

import RecurringImages from "@store/RecurringImages";
import UpdateHeroTopMargin from "@scripts/UpdateHeroTopMargin.astro";

const { white_cup, green_book, white_right_arrow } = RecurringImages;

const { page, posts, recurData, headingName } = Astro.props,
  { CF_IMAGE_DELIVERY_ENDPOINT: imgSrcPrefix } = import.meta.env;

// display relevant recipes instead of recent posts for RecipeDetails pages
const recentPosts =
  page.blogs?.data?.map(({ attributes }) => attributes) ||
  page.Relevant_recipes?.data?.map(({ attributes }) => attributes) ||
  posts.filter(({ Meta }) => Meta.URL_slug !== page.Meta.URL_slug);
---

<style lang="scss" is:global>
  #post-details {
    img {
      @apply block mx-auto;

      width: 100%;
      object-fit: cover;
      aspect-ratio: 8 / 5;
      clip-path: url(#content-images-curve);
    }

    // picture {
    //   display: block !important;
    //   margin: 0 auto !important;
    //   max-width: fit-content !important;
    //   clip-path: url(#content-images-curve);
    // }

    p a {
      @apply font-bold sm:font-semibold px-1 no-underline bg-bottom bg-no-repeat transition-all;

      background-size: 100% 45%;
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' style='border-radius:9999px' preserveAspectRatio='none' viewBox='0 0 1 1' fill='%23b3cccc'%3E%3Cpath d='M0 0h1v1H0z'/%3E%3C/svg%3E");

      &:hover {
        filter: brightness(0.95);
      }
    }
  }
</style>

<style lang="scss">
  @use "src/styles/colors";

  #sticky-header {
    box-shadow: 0 4px 5px gray;
  }

  #sticky-heading-links {
    border-color: colors.$sticky-dropdown-border-top;
  }

  #reading-progress-bar {
    border-top-right-radius: 0.127rem;
    border-bottom-right-radius: 0.157rem;
  }

  #headings-header {
    font-size: clamp(1.5rem, 2.2vw + 0.15rem, 2rem);
  }

  #heading-links {
    font-size: clamp(1rem, 1.2vw + 0.2rem, 1.5rem);
  }

  .recent-posts-title {
    font-size: clamp(2rem, 3vw + 0.55rem, 2.625rem);
  }

  .recent-post-card {
    @apply w-full max-w-[380px] sm:max-w-none;
  }

  .recent-post-card-content-container {
    padding: clamp(20px, 6.4vw, 40px) clamp(24px, 3.8vw + 11.75px, 36px);

    @media (min-width: 640px) {
      padding: clamp(30px, 7.8125vw - 20px, 60px)
        clamp(28px, 4.6875vw - 2px, 46px);
    }

    @media (min-width: 1024px) {
      padding: clamp(30px, 8vw - 51.75px, 60px) clamp(28px, 4.8vw - 21px, 46px);
    }
  }

  .recent-post-card-author {
    font-size: clamp(0.875rem, 1.5vw + 0.1rem, 1rem);
    line-height: 150%;
  }

  .recent-post-card-title {
    @apply leading-[130%] sm:leading-[120%];

    font-size: clamp(1.5rem, 1.8vw + 0.1rem, 1.75rem);
  }

  .recent-post-card-title-icon {
    height: clamp(0.625rem, 1.5vw + 0.1rem, 1rem);
  }

  .recent-posts-img-container{
    width: 100%;
    max-height: 310px;
    aspect-ratio: 4.23 / 3.1;
  }
</style>

{/* Hero Section */}
<section class="hero overflow-hidden relative">
  <UpdateHeroTopMargin />

  <HeroBackground />

  {/* Text Content */}
  <div class="wrapper hero-text-container h-full relative z-30">
    <div role="banner" class="flex flex-wrap items-center sm:w-7/12 h-full">
      <div class="mt-[30px] sm:mt-4 lg:mt-0">
        {
          page.authors && (
            <div class="flex flex-wrap gap-x-2.5">
              <div class="flex relative">
                {page.authors.data.map((author, index) => (
                  <div
                    class:list={[
                      index > 0 && "relative -ml-5",
                      "w-12 h-12 rounded-full object-cover overflow-hidden",
                    ]}
                  >
                    <img
                      class="w-full h-full"
                      alt={
                        author.attributes.Profile_picture.data.attributes
                          .alternativeText
                      }
                      src={
                        imgSrcPrefix +
                        author.attributes.Profile_picture.data.attributes
                          .provider_metadata.public_id +
                        `/authBlob`
                      }
                    />

                    {/* <Picture
                        layout="fill"
                        alt={
                          author.attributes.Profile_picture.data.attributes
                            .alternativeText
                        }
                        src={
                          imgSrcPrefix +
                          author.attributes.Profile_picture.data.attributes
                            .provider_metadata.public_id +
                          `/authBlob`
                        }
                      /> */}
                  </div>
                ))}
              </div>

              <div class="grid content-between">
                <div class="post-author flex flex-wrap font-bold">
                  {page.authors.data.map((author, index) => (
                    <a href="#">
                      {`${index > 0 ? ", " : " "}` +
                        author.attributes.givenName}
                    </a>
                  ))}
                </div>

                <div class="post-publish-date">
                  {new Date(page.createdAt).toLocaleString("en-US", {
                    day: "numeric",
                    month: "long",
                  })}
                </div>
              </div>
            </div>
          )
        }

        <h1 class="hero-title pt-2.5 md:pt-3 lg:pt-[15px]">
          <a href="#">{page.Title || page.Estate_name}</a>

          {
            page.Title && (
              <span class="icon heading-inline-icon">
                <img class="w-full h-full" {...white_cup} />
              </span>
            )
          }
        </h1>

        <div class="hero-text pt-2.5 block prose text-lightgray max-w-none">
          <Markdown>{page.Intro_text}</Markdown>
        </div>

        {/* Recipe Header */}
        <slot name="recipe-header" />

        {/* tea-details header section */}
        <slot name="tea-details-header" />
      </div>
    </div>
  </div>

  {/* Blob Image - Desktop View */}
  <div class="hero-img-curve-container h-full hidden sm:block absolute z-20">
    <ClippedImg
      id="hero-img-curve"
      src={imgSrcPrefix +
        page.Intro_blob.data.attributes.provider_metadata.public_id +
        `/small`}
      alt={page.Intro_blob.data.attributes.alternativeText}
      path="M1,0 S0.345,0.001,0.098,0.001 C-0.013,0.158,-0.007,0.342,0.009,0.606 C0.025,0.888,0.144,1,0.536,1 c0.3,0,0.379,-0.095,0.464,-0.147"
    />

    {
      /* (
        <ClippedPicture
          id="hero-img-curve"
          pictureStyle="position: relative;"
          src={
            imgSrcPrefix +
            page.Intro_blob.data.attributes.provider_metadata.public_id +
            `/small`
          }
          path="M1,0 S0.345,0.001,0.098,0.001 C-0.013,0.158,-0.007,0.342,0.009,0.606 C0.025,0.888,0.144,1,0.536,1 c0.3,0,0.379,-0.095,0.464,-0.147"
        />
      ) */
    }
  </div>
</section>

{/* Blob Image - Mobile View */}
<div class="hero-img-sm-container block sm:hidden w-full relative z-20 -mt-20">
  <ClippedImg
    id="hero-img-curve-sm"
    src={imgSrcPrefix +
      page.Intro_blob.data.attributes.provider_metadata.public_id +
      `/small`}
    alt={page.Intro_blob.data.attributes.alternativeText}
    path="M1 .074v.904S.906 1 .774 1C.706 1 .637.996.569.993.487.989.405.984.324.986a4.576 4.576 0 0 0-.117.005C.115.996.032 1.001 0 .986V.074C.062.024.147 0 .282 0c.075 0 .165.023.244.043.062.016.118.03.154.03.026 0 .06-.007.097-.014C.861.044.959.025 1 .074"
  />

  {
    /* (
      <ClippedPicture
        id="hero-img-curve-sm"
        src={
          imgSrcPrefix +
          page.Intro_blob.data.attributes.provider_metadata.public_id +
          `/small`
        }
        path="M1 .074v.904S.906 1 .774 1C.706 1 .637.996.569.993.487.989.405.984.324.986a4.576 4.576 0 0 0-.117.005C.115.996.032 1.001 0 .986V.074C.062.024.147 0 .282 0c.075 0 .165.023.244.043.062.016.118.03.154.03.026 0 .06-.007.097-.014C.861.044.959.025 1 .074"
      />
    ) */
  }
</div>

{/* howto header section */}
<slot name="howto-header" />

{/* Blog Section */}
<section class="py-[50px]" role="main">
  <div
    id="sticky-header"
    class="self-start hidden md:hidden w-full sticky top-0 z-[998] text-primary bg-lightgray overflow-hidden"
  >
    <div class="wrapper relative select-none">
      <div
        id="sticky-dropdown-toggle"
        class:list={[
          "py-[15px] font-bold cursor-pointer focus:outline-none",
          "flex items-center justify-between gap-x-1.5 md:gap-x-3",
        ]}
      >
        <div class="flex items-center">
          <div class="w-7 h-full mr-[13px]">
            <img class="w-full h-full" {...green_book} />
          </div>

          <div id="sticky-header-heading" class="font-medium">
            {headingName}
          </div>
        </div>

        <svg
          class="w-3"
          viewBox="0 0 11.6 6.7"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M.3.3A.6.6 0 0 1 .9 0a.9.9 0 0 1 .6.3l4.3 4.3L10.2.3a.6.6 0 0 1 .6-.3l.6.3a.8.8 0 0 1 .2.6.7.7 0 0 1-.2.6l-5 4.9a.6.6 0 0 1-.6.3.9.9 0 0 1-.6-.3L.3 1.5A.9.9 0 0 1 0 .9.6.6 0 0 1 .3.3Z"
            fill="#2B4B50"></path>
        </svg>
      </div>

      <div
        id="sticky-heading-links"
        class="hidden pt-[15px] pb-[25px] max-h-[70vh] border-t border-solid overflow-y-auto"
      >
        <HeadingLinks type="mobile">
          {/* html source to extract heading links from */}
          <slot name="post-details" />
        </HeadingLinks>

        {/* Jump to Recipe Small Button */}
        <slot name="jump-to-recipe-sm" />

        {/* Cart Adding Form (Sm) */}
        <slot name="cart-adding-form-sm" />
      </div>
    </div>

    <div id="reading-progress-bar" class="py-[2.5px] bg-primary duration-150">
    </div>
  </div>

  <div class="wrapper w-full flex flex-col-reverse md:flex-row">
    <ClipPathSVG
      id="content-images-curve"
      path="M.516.008C.36.008.1-.008.04.082S.002.495.017.736.182 1 .528 1C.813 1 .902.936.974.717 1.005.624 1.021.395.945.128.897-.045.734.008.516.008"
    />

    <div id="post-details" class="md:w-2/3">
      {/* post content */}
      <slot name="post-details" />
    </div>

    <div
      id="headings"
      class:list={[
        "pl-[clamp(24px,3.8vw+0.16px,50px)] lg:pl-[clamp(70px,11.3125vw-46px,128px)]",
        "self-start md:sticky top-0 mb-[75px] w-full md:w-1/3 text-primary overflow-hidden",
      ]}
    >
      <h3 id="headings-header" class="pb-2.5 lg:pb-5 xl:pb-[30px] font-bold">
        {headingName}
      </h3>

      {/* Jump to Recipe Button */}
      <slot name="jump-to-recipe" />

      <div id="heading-links" class="grid leading-[130%] lg:leading-[150%]">
        <HeadingLinks>
          {/* html source to extract heading links from */}
          <slot name="post-details" />
        </HeadingLinks>

        {/* Cart Adding Form (Sm) */}
        <slot name="cart-adding-form-sm" />
      </div>
    </div>
  </div>
</section>

{/* estate map */}
<slot name="estate-map" />

{/* product kindness impact  */}
<slot name="product-kindness-impact" />

{
  recentPosts.length > 0 && (
    <section class="wrapper">
      <h2 class="recent-posts-title alice leading-[110%] text-dark pb-[25px] sm:pb-[30px]">
        {page.Relevant_recipes != null
          ? recurData.recipe_discover
          : recurData.text_explore_the_world_of_kindness}
      </h2>

      <ClipPathSVG
        id="recent-post-card-curve"
        path="M0.99,0.554 V0.735 c0,0.331,-0.079,0.243,-0.519,0.258 S0.004,1,0.004,0.718 c0,-0.037,0.004,-0.093,0.001,-0.164 C-0.005,0.353,-0.003,0.148,0.042,0.078 C0.102,-0.013,0.358,0.003,0.513,0.003 c0.216,0,0.41,-0.034,0.459,0.141 C1,0.309,0.995,0.441,0.99,0.554"
      />

      <div
        role="list"
        aria-label="Kindness Items"
        class:list={[
          "w-full mx-auto mb-[50px] grid sm:grid-cols-2 lg:grid-cols-3",
          "justify-items-center sm:justify-items-start gap-8 lg:gap-[clamp(24px,3.125vw-8px,32px)]",
        ]}
      >
        {recentPosts.slice(0, 3).map((post) => (
          <div
            class="bg-primary recent-post-card"
            role="listitem"
            aria-label="Kindness Item"
            style="clip-path: url(#recent-post-card-curve)"
          >
            <a class="block w-full" href={`/` + post.Meta.URL_slug}>
              <div class="recent-posts-img-container">
                <img
                  src={
                    imgSrcPrefix +
                    post.Intro_blob.data.attributes.provider_metadata
                      .public_id +
                    `/small`
                  }
                  alt={post.Intro_blob.data.attributes.alternativeText}
                  class="w-full h-full object-cover"
                />
              </div>

              {/* <Picture
                  alt=""
                  layout="fill"
                  src={
                    imgSrcPrefix +
                    post.Intro_blob.data.attributes.provider_metadata
                      .public_id +
                    `/small`
                  }
                  attributes={{
                    picture: {
                      style: "clip-path: url(#recent-post-card-curve);",
                    },
                  }}
                /> */}
            </a>

            <div class="recent-post-card-content-container grid content-between">
              <div>
                {post.authors && (
                  <div>
                    <div class="recent-post-card-author flex flex-wrap font-bold">
                      {post.authors.data.map(({ attributes }, index) => (
                        <a href="#">
                          {`${index > 0 ? ", " : " "}` + attributes.givenName}
                        </a>
                      ))}
                    </div>

                    <div class="post-publish-date">
                      {new Date(post.createdAt).toLocaleString("en-US", {
                        day: "numeric",
                        month: "long",
                      })}
                    </div>
                  </div>
                )}

                <div class="recent-post-card-title alice mt-[15px]">
                  <a href={`/` + post.Meta.URL_slug}>
                    {post.Title}
                  </a>

                  <span class="icon recent-post-card-title-icon">
                    <img
                      class="recent-post-card-title-icon"
                      {...white_right_arrow}
                    />
                  </span>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </section>
  )
}

<script defer>
  {
    const query = document.querySelector.bind(document),
      queryAll = document.querySelectorAll.bind(document),
      navbar = query("#navigation"),
      postDetails = query("#post-details"),
      chapters = [...queryAll("#post-details .chapter")],
      [firstChapter] = chapters,
      stickyHeader = query("#sticky-header"),
      stickyHeaderHeading = query("#sticky-header-heading"),
      stickyDropdownToggle = query("#sticky-dropdown-toggle"),
      headingLinks = queryAll("#heading-links a"),
      stickyheadingLinksContainer = query("#sticky-heading-links"),
      stickyheadingLinks = queryAll("#sticky-heading-links a"),
      readingProgressBar = query("#reading-progress-bar");

    const isOnScreen = (element) => {
      const { top, bottom } = element.getBoundingClientRect(),
        // consider an element on screen only if it's at least 50px on screen
        safeAreaHeight = 50;

      if (top < window.innerHeight - safeAreaHeight && bottom > 0) return true;

      return false;
    };

    const styleActiveChapter = () => {
      // find active chapter
      const { length, [length - 1]: activeChapter = chapters[0] } =
          chapters.filter((chapter) => isOnScreen(chapter)),
        chapterIndex = chapters.indexOf(activeChapter),
        activeChapterHeading = activeChapter.querySelector("h2");

      [...headingLinks, ...stickyheadingLinks].forEach((link) =>
        link.classList.remove("active")
      );

      // highlight active chapter link
      headingLinks[chapterIndex].classList.add("active");
      stickyheadingLinks[chapterIndex].classList.add("active");

      const { height: navbarHeight } = navbar.getBoundingClientRect(),
        displayStickyHeader =
          window.innerWidth < 640 &&
          firstChapter.getBoundingClientRect().y -
            navbar.getBoundingClientRect().height <
            0;

      if (displayStickyHeader) {
        stickyHeader.style.top = navbarHeight + "px";

        stickyHeaderHeading.textContent = activeChapterHeading.textContent;

        const containerRect = postDetails.getBoundingClientRect(),
          readPixels = Math.abs(containerRect.y - window.innerHeight),
          detailedBlogHeight = containerRect.height,
          minProgress =
            ((window.innerHeight - navbarHeight) / detailedBlogHeight) * 100,
          progress = (readPixels / detailedBlogHeight) * 100,
          correctedProgress =
            ((progress - minProgress) / (100 - minProgress)) * 100;

        // update progress meter
        readingProgressBar.style.width = `${correctedProgress}%`;
      }

      // display sticky header
      stickyHeader.classList[displayStickyHeader ? "remove" : "add"]("hidden");
    };

    styleActiveChapter();

    document.addEventListener("scroll", styleActiveChapter);

    stickyDropdownToggle.addEventListener("click", () => {
      stickyheadingLinksContainer.classList.toggle("hidden");
    });

    // collapse dropdown when an item is clicked
    stickyheadingLinks.forEach((link) => {
      link.addEventListener("click", (event) => {
        event.preventDefault();

        location.href = link.href;

        stickyheadingLinksContainer.classList.add("hidden");

        window.scrollTo({
          top: scrollY - readingProgressBar.getBoundingClientRect().bottom,
        });
      });
    });
  }
</script>
