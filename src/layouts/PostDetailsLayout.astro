---
import { parseHTML } from "linkedom";

import Chapters from "@components/Chapters.astro";
import HeroContent from "@components/HeroContent.astro";
import ClipPathSVG from "@components/ClipPathSVG.astro";
import RelevantPosts from "@components/RelevantPosts.astro";

import ChaptersFunctionality from "@scripts/ChaptersFunctionality.astro";

const {
  page,
  posts,
  recurData,
  ariaLabelRecurData,
  headingName,
  plainTitle,
  type,
  headerBackground,
  headerBackgroundSm,
} = Astro.props;

const relatedPosts =
  page?.related_products?.data?.map(({ attributes }) => attributes) ||
  page?.blogs?.data?.map(({ attributes }) => attributes) ||
  page?.Relevant_recipes?.data?.map(({ attributes }) => attributes) ||
  page?.Relevant_blogs?.data?.map(({ attributes }) => attributes) ||
  posts?.filter(({ Meta }) => Meta.URL_slug !== page.Meta.URL_slug);

const relatedPostsHeading =
  page.Relevant_items_title ||
  (page.Relevant_recipes && recurData.recipe_discover) ||
  recurData.text_explore_the_world_of_kindness;

const relatedPostsText = page.Relevant_items_text;

const contentHTML = await Astro.slots.render("post-details"),
  { document: contentDocument } = parseHTML(contentHTML),
  headings = contentDocument.querySelectorAll("h2");
---

<ClipPathSVG
  id="content-images-curve"
  path="M.516.008C.36.008.1-.008.04.082S.002.495.017.736.182 1 .528 1C.813 1 .902.936.974.717 1.005.624 1.021.395.945.128.897-.045.734.008.516.008"
/>

{/* Hero Section */}
<HeroContent {page} {plainTitle} {headerBackground} {headerBackgroundSm}>
  {/* Recipe Header */}
  <slot name="recipe-header" />

  {/* tea-details header section */}
  <slot name="tea-details-header" />

  {/* tea variants header section */}
  <slot name="tea-variants-header" />
</HeroContent>

<div class="grid section-gap section-in-v-pad">
  {/* howto header section */}
  <slot name="howto-header" />

  {/* product page sections */}
  <slot name="product-page-sections" />

  {/* Blog Section */}
  <section
    role={type || "main"}
    aria-label={ariaLabelRecurData.Post_details_text}
  >
    {
      headings.length > 0 && (
        <Chapters fixedTop={true} headingName={headingName} headings={headings}>
          <slot name="jump-to-recipe-sm" slot="top-slot" />
        </Chapters>
      )
    }

    <div
      class="wrapper w-full flex flex-col-reverse md:flex-row justify-between gap-[50px]"
    >
      <div id="post-details" class="md:w-2/3 2xl:w-1/2 md:min-w-[400px]">
        <div class="prose-text xl:w-5/6 2xl:w-full">
          {/* post content */}
          <slot name="post-details" />
        </div>
      </div>

      {
        headings.length > 0 && (
          <Chapters
            headingName={headingName}
            headings={headings}
            desktopOnly={page.type === "howToDetails" && true}
          >
            {/* Jump to Recipe Button */}
            <slot name="jump-to-recipe" slot="top-slot" />

            {/* Cart Adding Form (Sm) */}
            <slot name="cart-adding-form-sm" />

            {/* Cart Adding Form Fixed (Sm) */}
            <slot name="cart-adding-form-fixed-sm" />
          </Chapters>
        )
      }
    </div>
  </section>

  {/* product infos */}
  <slot name="product-info" />

  {/* estate map */}
  <slot name="estate-map" />

  {/* product kindness impact  */}
  <slot name="product-kindness-impact" />

  {/* Relevant Posts Section */}
  <RelevantPosts
    {page}
    posts={relatedPosts}
    text={relatedPostsText}
    heading={relatedPostsHeading}
  />
</div>

<slot name="wake-lock-script" />

{headings.length > 0 && <ChaptersFunctionality />}
