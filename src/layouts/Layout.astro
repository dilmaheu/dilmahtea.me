---
import "../styles/global.css";
import "../styles/styles.css";

import Navbar from "../components/Navbar.astro";
import Footer from "../components/Footer.astro";
import MainHead from "../components/MainHead.astro";
import LocalizeLinks from "../components/LocalizeLinks.astro";
import TopNotification from "../components/TopNotification.astro";
import getLangNotAvailableNotification from "../utils/getLangNotAvailableNotification";
import NotificationAnimations from "../components/scripts/NotificationAnimations.astro";
import TranslationNotFoundNotificationsObserver from "../components/scripts/TranslationNotFoundNotificationsObserver.astro";

/**
 * This file is used as a re-usable component that is the layout
 * It features the head, navbar and footer
 */

interface Props {
  locale: string;
  meta: any;
  recurData: any;
  metaImage: string;
  availableLocales: string[];
}

const { meta, locale, recurData, availableLocales, metaImage } =
  Astro.props as Props;
let { noindex, nofollow } = meta;
const title = meta.HTML_Title;
const description = meta.Meta_description;
const image = metaImage;
const canonicalURL = meta.Canonical_link;
const slugURL = meta.URL_slug;

let noIndex = "";
if (noindex === true) {
  noIndex = "noindex";
}
let noFollow = "";
if (nofollow === true) {
  noFollow = "nofollow";
}

const footerText = recurData.Footer_text.replaceAll(
  "<current_year>",
  `${new Date().getFullYear()}`
);

const { Type: notificationType, localizedNotifications } =
  getLangNotAvailableNotification();
---

<html lang={locale}>
  <head>
    {
      import.meta.env.DEV && (
        /* the below content-security-policy header is only for use on the development server */ <meta
          http-equiv="Content-Security-Policy"
          content="default-src 'none'; style-src 'unsafe-inline'; script-src 'self' 'unsafe-inline' https://static.openreplay.com; img-src 'self' data: https://dilmahtea.me https://imagedelivery.net; font-src 'self'; worker-src blob:; connect-src 'self' wss: https://api.openreplay.com;"
        />
      )
    }

    {
      // prettier-ignore
      slugURL !== "404" && (
        <script is:inline define:vars={{ availableLocales }}>
          const preferredLocale = document.documentElement.lang;

          localStorage.setItem("locale", preferredLocale);

          window.preferredLocale = preferredLocale;
          window.availableLocales = availableLocales;
        </script>
      )
    }

    <NotificationAnimations />

    <TranslationNotFoundNotificationsObserver />

    <MainHead
      {title}
      {description}
      {noIndex}
      {noFollow}
      {image}
      {locale}
      {canonicalURL}
      {slugURL}
      {availableLocales}
    />

    <style lang="scss">
      .translation-not-found-notification {
        top: 0;
        z-index: 1000;
        position: sticky;
      }
    </style>
  </head>

  <LocalizeLinks locale={locale}>
    <body>
      <div class="translation-not-found-notification">
        <TopNotification
          type={notificationType}
          notification={localizedNotifications}
        >
          <div class="text-center">
            <notification></notification>
          </div>
        </TopNotification>
      </div>

      <script is:inline>
        if (
          window.requestedLocale /* requestedLocale is declared in TranslationNotFoundRedirect.astro */
        ) {
          const translationNotFoundNotification =
            document.currentScript.previousElementSibling.firstElementChild;

          translationNotFoundNotification.style.display = "flex";

          // removeTopNotification is declared in NotificationAnimations.astro */
          window.removeTopNotification(translationNotFoundNotification);
        }
      </script>

      <div>
        <Navbar
          docLocale={locale}
          footerText={footerText}
          availableLocales={availableLocales}
        />

        <main>
          <slot />
        </main>

        <Footer footerText={footerText} />
      </div>

      <script>
        // Language button toggle
        document.querySelector("#langBtn").addEventListener(
          "click",
          function () {
            const langBtn = document.getElementById("langBtn"),
              dropdownMenu = document.getElementById("dropdownMenu");

            if (dropdownMenu.style.display == "block") {
              dropdownMenu.style.display = "none";
              langBtn.style.borderRadius = "25px";
            } else {
              dropdownMenu.style.display = "block";
              langBtn.style.borderRadius = "25px 25px 0 0";
            }
          },
          false
        );

        document.querySelectorAll(".lang-selector").forEach((langSelector) => {
          langSelector.addEventListener("click", () => {
            // @ts-ignore
            const { lang: newLocale } = langSelector;

            localStorage.setItem(`locale`, newLocale);

            const localeRegex = new RegExp(
              // @ts-ignore
              `^/(${availableLocales.map((locale) => locale).join("|")})/`
              // availableLocales is defined in SetPreferredLocale.astro
            );

            let [, locale] = location.pathname.match(localeRegex) ?? [];

            location.href =
              `/${newLocale}/` + location.pathname.slice(locale ? 4 : 0);
          });
        });
      </script>


    </body>
  </LocalizeLinks>
</html>
