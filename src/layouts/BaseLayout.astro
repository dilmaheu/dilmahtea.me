---
import "@styles/styles.scss";

import MainHead from "@components/MainHead.astro";
import Notification from "@components/Notification.astro";
import LocalizeLinks from "@components/LocalizeLinks.astro";

import CartStore from "@scripts/CartStore.astro";
import SetPreferredLocale from "@scripts/SetPreferredLocale.astro";
import NotificationsObserver from "@scripts/NotificationsObserver.astro";
import NotificationAnimations from "@scripts/NotificationAnimations.astro";

import getLangNotAvailableNotification from "@utils/getLangNotAvailableNotification";

interface Props {
  page: Record<string, any>;
  meta: Record<string, any>;
  locale: string;
  metaImageSrc: string;
  availableLocales: string[];
}

const { page, meta, locale, availableLocales, metaImageSrc } =
  Astro.props as Props;

const { Type: notificationType, localizedNotifications } =
  getLangNotAvailableNotification();
---

<html lang={locale}>
  <head>
    <MainHead
      page={page}
      meta={meta}
      locale={locale}
      metaImageSrc={metaImageSrc}
      availableLocales={availableLocales}
    />

    {
      import.meta.env.DEV && (
        /* content-security-policy header for the development server */ <meta
          http-equiv="Content-Security-Policy"
          content="default-src 'none'; style-src 'self' 'unsafe-inline' https://use.fontawesome.com; script-src 'self' 'unsafe-eval' 'unsafe-inline' https://cse.expertrec.com https://static.openreplay.com; img-src 'self' data: https://dilmahtea.me https://dev.cms.dilmahtea.me; media-src data:; font-src 'self' https://use.fontawesome.com; worker-src blob:; connect-src 'self' wss: https://log.expertrec.com https://searchv7.expertrec.com https://api.openreplay.com https://dev.products.scripts.dilmahtea.me;"
        />
      )
    }

    {
      // run script only if the page is not dev 404 page
      Astro.params.slug && <SetPreferredLocale />
    }

    <CartStore />

    <NotificationsObserver />

    <NotificationAnimations />
  </head>

  <LocalizeLinks locale={locale}>
    <div class="translation-not-found-notification sticky top-0 z-[1000]">
      <Notification
        type={notificationType}
        notification={localizedNotifications}
      >
        <div class="text-center">
          <notification></notification>
        </div>
      </Notification>
    </div>

    <script is:inline>
      if (window.requestedLocale) {
        const translationNotFoundNotification =
          document.currentScript.previousElementSibling.firstElementChild;

        translationNotFoundNotification.style.display = "flex";

        window.removeTopNotification(translationNotFoundNotification);
      }
    </script>

    <slot />
  </LocalizeLinks>
</html>
