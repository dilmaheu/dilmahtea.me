---
import "@styles/styles.scss";

import MainHead from "@components/MainHead.astro";
import Notification from "@components/Notification.astro";
import LocalizeLinks from "@components/LocalizeLinks.astro";

import CartStore from "@scripts/CartStore.astro";
import NotificationsObserver from "@scripts/NotificationsObserver.astro";
import NotificationAnimations from "@scripts/NotificationAnimations.astro";

import getLangNotAvailableNotification from "@utils/getLangNotAvailableNotification";

interface Props {
  page: Record<string, any>;
  meta: Record<string, any>;
  locale: string;
  metaImageSrc: string;
  availableLocales: string[];
}

const { page, meta, locale, availableLocales, metaImageSrc } =
  Astro.props as Props;

const { URL_slug: slugURL } = meta;

const { Type: notificationType, localizedNotifications } =
  getLangNotAvailableNotification();
---

<html lang={locale}>
  <head>
    <MainHead
      page={page}
      meta={meta}
      locale={locale}
      metaImageSrc={metaImageSrc}
      availableLocales={availableLocales}
    />

    {
      import.meta.env.DEV && (
        /* content-security-policy header for the development server */ <meta
          http-equiv="Content-Security-Policy"
          content="default-src 'none'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; script-src 'self' 'unsafe-inline' https://static.openreplay.com; img-src 'self' data:; media-src data:; font-src 'self' https://fonts.gstatic.com; worker-src blob:; connect-src 'self' wss: https://api.openreplay.com;"
        />
      )
    }

    {
      // prettier-ignore
      slugURL !== "404" && (
        <script is:inline define:vars={{ availableLocales }}>
          const preferredLocale = document.documentElement.lang;

          localStorage.setItem("locale", preferredLocale);

          window.preferredLocale = preferredLocale;
          window.availableLocales = availableLocales;
        </script>
      )
    }

    <CartStore />

    <NotificationsObserver />

    <NotificationAnimations />
  </head>

  <LocalizeLinks locale={locale}>
    <div class="translation-not-found-notification sticky top-0 z-[1000]">
      <Notification
        type={notificationType}
        notification={localizedNotifications}
      >
        <div class="text-center">
          <notification></notification>
        </div>
      </Notification>
    </div>

    <script is:inline>
      if (
        window.requestedLocale /* requestedLocale is defined in TranslationNotFoundRedirect.astro */
      ) {
        const translationNotFoundNotification =
          document.currentScript.previousElementSibling.firstElementChild;

        translationNotFoundNotification.style.display = "flex";

        /* removeTopNotification is defined in NotificationAnimations.astro */
        window.removeTopNotification(translationNotFoundNotification);
      }
    </script>

    <slot />
  </LocalizeLinks>
</html>
