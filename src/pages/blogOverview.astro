---
// Style Imports
import '../styles/global.css';
import '../styles/styles.css';
// Component Imports
import MainBG from '/images/willian-justen-de-vasconcellos-_MMP5j_fCqw-unsplash.webp';
import CupIcon from '/images/cup.svg';
import CupGreenIcon from '/images/cupGreen.svg';
import penIcon from '/images/pen.svg';
import calenderIcon from '/images/calender.svg';
import penGreenIcon from '/images/penGreen.svg';
import MainHead from '../components/MainHead.astro';
import Navbar from '../components/Navbar.astro';
import Footer from '../components/Footer.astro';
import CrowdFundingHomeQuery from '../queries/CrowdFundingHomeQuery'

import { Markdown } from 'astro/components';

const crowdfundingDefaultPage = await fetch(`${import.meta.env.DB_URL}`,
	{
		method: 'POST',
		headers: {
			'Content-Type': 'application/json',
			'Authorization': `Bearer ${import.meta.env.ACCESS_TOKEN}`
		},
		body: JSON.stringify({
			query: CrowdFundingHomeQuery,
		})
	}).then(response => response.json());

// Saving it's page attributes like meta and other components
const defPage = crowdfundingDefaultPage.data.crowdfundingHome.data.attributes;
// Saving footer text
const recurData = crowdfundingDefaultPage.data.recurringElement.data.attributes;

const title = defPage.Meta.HTML_Title
const description = defPage.Meta.HTML_Title
const noIndex = defPage.Meta.noFollow
const noFollow = defPage.Meta.noindex
const image = recurData.OpenGraph_default.data.attributes.provider_metadata.public_id
const slugURL = defPage.Meta.URL_slug
const canonicalURL = defPage.Meta.Canonical_link

const locale = 'en';
const availableLocales = ['en']
const Meta = [
					{
  HTML_Title: 'lorem',
  Meta_description: 'lorem',
  noindex: false,
  nofollow: false,
  URL_slug: 'BlogOverview',
  Canonical_link: 'BlogOverview'
}
]


const url = `${import.meta.env.CloudImg_URL}`;

const { page } = Astro.props

const GqlQuery = `{
    blogs {
	    data {
	      id
	      attributes {
	        localizations {
	        data {
	          attributes {
	            locale
	            Title
	            Intro_text
	            Intro_blob{
	              data{
	                id
	                attributes{
	                url
	                provider_metadata
	                formats
	                alternativeText
	                }
	              }
	            }
	            Block_text
	            createdAt
	            updatedAt
	            publishedAt
	                Meta{
	                HTML_Title
	                Meta_description
	                noindex
	                nofollow
	                URL_slug
	                Canonical_link
	                }
	            }
	          }
	        }
	        locale
	        Title
	        Intro_text
	        Intro_blob{
	          data{
	            id
	            attributes{
	            url
	            provider_metadata
	            formats
	            alternativeText
	            }
	          }
	        }
	        Block_text
	        createdAt
	        updatedAt
	        publishedAt
	        Meta{
	          HTML_Title
	          Meta_description
	          noindex
	          nofollow
	          URL_slug
	          Canonical_link
	        }
	      }
	    }
	  }
}`;


const response = await fetch(`${import.meta.env.DB_URL}`,
   {
       method:'POST',
       headers: {
         'Content-Type':'application/json',
         'Authorization': `Bearer ${import.meta.env.ACCESS_TOKEN}`
       },
       body: JSON.stringify({
         query: GqlQuery,
       })
   });

const data = await response.json();
const blog = data.data.blogs.data[1].attributes;

var create = blog.createdAt

var date = new Date(create);
var createdAtDate = date.toLocaleString("en-UK", { day : "numeric", month : "long", year : "2-digit"});
---

<html lang={locale}>

<head>
	<MainHead {title} {description} {noIndex} {noFollow} {image} {locale} {canonicalURL} {slugURL} {availableLocales} />
	{(availableLocales.includes(locale) && locale != "en") ?
	<Redirect />: null}
</head>

<body>
	<div class="overflow-hidden">
		<Navbar locale={locale} availableLocales={availableLocales} />
		<main>
			<!-- Hero Section -->

			<div class="hero sm:overflow-hidden relative">

				<!-- Background -->
				<div class="w-full absolute bottom-0">
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1056.7 660.3" class="heroCurve1">
						<defs>
							<clipPath id="heroImgFrame">
								<path d="M1056.7,0V619.7c-31,16.2-92.5,40.6-182,40.6H855.8c-24.8,0-49-.9-72.9-2.4-32.8-1.6-65.2-3.8-98-6-65.8-4.4-133.1-9-208.2-9-79.4,0-147.5,5.1-210.1,9.8-53,3.9-102.1,7.6-150.7,7.6h-13C9.3,657.9,0,631.4,0,631.4V0Z"/>
							</clipPath>
						</defs>
						<image class="h-full w-auto" height="100%" width="100%" href={MainBG} clip-path="url(#heroImgFrame)"></image>
					</svg>
				</div>


				<!-- Text content -->

				<div class="relative h-full wrapper z-30 HeroTxtContainer">
					<div class="sm:w-1/2 md:w-6/12 lg:w-7/12 HeroTxtContent" role="banner">
						<div class="flex flex-wrap">
							<div class="flex flex-wrap items-center gap-x-2.5 md:gap-x-4">
								<ol class="flex">
								    <li><a href="#">Home</a></li>
								    <li><span class="text-gray-500 mx-2">/</span></li>
								    <li><a href="#">Blog</a></li>
								  </ol>
							</div>

							<h1 class="blogHome_heroTitle">
								<a href="">{blog.Title}</a>
								<span class="icon relative top-0">
									<span class="relative headingInlineIcon">
										<img class="w-full h-full" src={CupIcon} alt="cup-icon" />
									</span>
								</span>
							</h1>
							<a href="">
								<div class="prose max-w-none blogHome_heroTxt">
									<Markdown>{blog.Intro_text}</Markdown>
								</div>
							</a>
							
							<div class="flex flex-wrap items-center gap-y-1 justify-center blogHeaderItemContainer">
							
								<div class="flex flex-wrap items-center gap-x-2.5 md:gap-x-4">
									<div class="blogHome_heroAuthIcn">
										<img class="w-full h-full" src={penIcon} alt="pen-icon">
									</div>

									<div class="flex flex-wrap gap-x-1.5 blogHome_heroAuth">by 
										<a href="" class="font-bold">Dilmah Family</a>
									</div>
								</div>
								<div class="flex flex-wrap items-center gap-x-2.5 md:gap-x-4">
									<div class="blogHome_heroAuthIcn">
										<img class="w-full h-full" src={calenderIcon} alt="pen-icon">
									</div>

									<div class="flex flex-wrap gap-x-1.5 blogHome_heroAuth">updated 
										<span class="font-bold"><Markdown>{createdAtDate}</Markdown></span>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>

				<!-- Blob Image  Desktop view-->

				<div class="hidden sm:block absolute z-20 h-full heroCurve2Container">
					<div class="w-full h-full relative">
						<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 617.8 543.8" class="h-full w-full">
							<defs>
								<clipPath id="heroImgFrame2">
									<path
										d="M617.8,0S213.3.3,60.8.8C-7.9,85.7-4.5,186,5.3,329.5,15.7,482.7,89,543.8,331.2,543.8c185.2,0,233.9-51.5,286.6-79.8Z" />
								</clipPath>
							</defs>
							<image class="w-auto h-full" style="" height="100%" width="100%" href={ url +  blog.Intro_blob.data.attributes.provider_metadata.public_id + `/small`} clip-path="url(#heroImgFrame2)"></image>
						</svg>
					</div>
				</div>
			</div>

			<!-- Blob Image Mobile view -->

			<div class="block sm:hidden relative -mt-20 z-20 w-full">
				<div class="heroCurve3Container relative">
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 375 290.3" class="h-full w-full">
						<defs>
							<clipPath id="heroImgFrame3">
								<path
									d="M375,21.4V283.8s-35.1,6.5-84.6,6.5c-25.5,0-51.2-1.1-76.9-2.1-30.8-1.3-61.6-2.6-92-2-14.4.2-29.5.9-44,1.5-34.4,1.5-65.7,2.9-77.5-1.5V21.4C23.2,7.1,55.3,0,105.7,0c28.3,0,62,6.7,91.6,12.6,23.3,4.6,44.1,8.8,57.7,8.8,9.6,0,22.5-1.9,36.4-4C322.9,12.8,359.7,7.4,375,21.4Z" />
							</clipPath>
						</defs>
						<image class="h-full w-auto" height="100%" width="100%" href={ url +  blog.Intro_blob.data.attributes.provider_metadata.public_id + `/small`} clip-path="url(#heroImgFrame3)"></image>
					</svg>
				</div>
			</div>



			<!-- Blog Section -->

			<div class="wrapper blogContentContainer">
				<div class="w-full" role="mian">
					<div class="prose max-w-none basicInfoSecTxt detailedBlog">
						<Markdown>{blog.Block_text}</Markdown>
					</div>
				</div>
			</div>

		</main>
		<Footer recurData={recurData} />
	</div>

	<script>
		document.addEventListener('DOMContentLoaded', function () {
			// Nav Open button
			document.getElementById("sidebarOpen").addEventListener("click", function () {
				var x = document.getElementById("sidebar");
				if (x.style.display === "block") {
					x.style.display = "none";
				}   
				else {
					x.style.display = "block";
				}
			}, false);
			// Nav Close button
			document.getElementById("sidebarClose").addEventListener("click", function () {
				var x = document.getElementById("sidebar");
				if (x.style.display === "block") {
					x.style.display = "none";
				}   
				else {
					x.style.display = "block";
				}
			}, false);

			document.getElementById("langBtn").addEventListener("click", function () {
				var x = document.getElementById("dropdownMenu");
				var y = document.getElementById("langBtn");
				if (x.style.display == "block") {
					x.style.display = "none";
					y.style.borderRadius = "25px";
				} else {
					x.style.display = "block";
					y.style.borderRadius = "25px 25px 0 0";
				}
			}, false);
			// Language button event listeners
			// Getting current locale
			const locale = document.documentElement.lang
			// Redirect function
			const redirectPath = (newLocale) => {
				let newPath
				if (newLocale == 'en') {
					newPath = window.location.pathname.replace(/^\/\w{2}/g, '')
					window.location.pathname = newPath
				} else if ((newLocale == "nl" || newLocale == "de") && locale == "en") {
					newPath = `/${newLocale}${window.location.pathname}`
					window.location.pathname = newPath
				} else {
					newPath = `/${newLocale}${window.location.pathname.replace(/^\/\w{2}/g, '')}`
					window.location.pathname = newPath
				}
			}
			// Select button 1 on click function
			const selectLang1 = document.getElementById(`selectLang1`)
			const selectLang2 = document.getElementById(`selectLang2`)
			if (selectLang1) {
				selectLang1.addEventListener("click", function () {
					const buttonLang = selectLang1.querySelector('div:last-child').innerHTML.toLowerCase()
					localStorage.setItem(`locale`, buttonLang)
					redirectPath(buttonLang)
				}, false)
			}
			// Select button 2 on click function
			if (selectLang2) {
				document.getElementById(`selectLang2`).addEventListener("click", function () {
					const buttonLang = selectLang2.querySelector('div:last-child').innerHTML.toLowerCase()
					localStorage.setItem(`locale`, buttonLang)
					redirectPath(buttonLang)
				}, false)
			}
		});
	</script>
</body>

</html>