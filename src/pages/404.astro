---
import CMS from "@store/CMS";
import BasicPage from "@pages/BasicPage.astro";
import PageLayout from "@layouts/PageLayout.astro";
import getAvailableLocales from "@utils/getAvailableLocales";

// fetching the error page
const basicPagesData = CMS.get("basicPages"),
  // saving it's page attributes like meta and other components
  requestPath = Astro.url.pathname,
  { ASSETS_URL } = import.meta.env;

let [, locale] = requestPath.match(/^\/([a-z]{2})\//) ?? [];

let recurringElements = CMS.get("recurringElement").data.attributes,
  { attributes: _404Page } = basicPagesData.data.find(
    ({ attributes }) => attributes.Meta.URL_slug === "404"
  );

const flattenedPages = [
  _404Page,
  ..._404Page.localizations.data.map(({ attributes }) => attributes),
];

const [availableLocales, availableLocalesRecord] =
  getAvailableLocales(flattenedPages);

const alternateURLs = Object.fromEntries(
  Object.entries(availableLocalesRecord).filter((entry) => entry[0] !== locale)
);

if (!(locale && availableLocales.includes(locale))) locale = "en";

if (locale !== "en") {
  _404Page = _404Page.localizations.data.find(
    ({ attributes }) => attributes.locale.substring(0, 2) === locale
  ).attributes;

  recurringElements = {
    // localize recurring elements
    ...recurringElements.localizations.data.find(
      ({ attributes }) => attributes.locale.substring(0, 2) === locale
    ).attributes,
  };
}
---

<script is:inline define:vars={{ availableLocales }}>
  const preferredLocale = localStorage.getItem("locale");

  const localeRegex = new RegExp(
    `^/(${availableLocales.map((locale) => locale).join("|")})/`
  );

  let [, locale] = location.pathname.match(localeRegex) ?? [];

  if (!locale && preferredLocale !== "en") {
    location.pathname = location.pathname.replace("/", `/${preferredLocale}/`);
  }
</script>

<PageLayout
  page={_404Page}
  locale={locale}
  alternateURLs={alternateURLs}
  availableLocales={availableLocales}
  meta={_404Page.Meta}
  recurData={recurringElements}
  metaImageSrc={ASSETS_URL +
    (_404Page.Block_blob?.data?.url ||
      recurringElements.OpenGraph_default.data.attributes.url)}
>
  <BasicPage page={_404Page} />
</PageLayout>
