---
import Layout from "../layouts/Layout.astro";
import BasicPage from "../components/pages/BasicPage.astro";
import NotFoundPagesQuery from "../queries/NotFoundPagesQuery";
import SetPreferredLocale from "../components/scripts/SetPreferredLocale.astro";

// fetching the error page
const _404PagesData = await fetch(`${import.meta.env.DB_URL}`, {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
    Authorization: `Bearer ${import.meta.env.ACCESS_TOKEN}`,
  },
  body: JSON.stringify({
    query: NotFoundPagesQuery,
  }),
}).then((response) => response.json());

// saving it's page attributes like meta and other components
const requestPath = Astro.url.pathname;

let page = _404PagesData.data.basicPages.data[0].attributes,
  recurData = _404PagesData.data.recurringElement.data.attributes;

const availableLocales = [
  "en",
  ...page.localizations.data.map(({ attributes }) =>
    attributes.locale.substring(0, 2)
  ),
];

let [, locale] = requestPath.match(/^\/([a-z]{2})\//) ?? [];

if (!(locale && availableLocales.includes(locale))) locale = "en";

if (locale !== "en") {
  page = page.localizations.data.find(
    ({ attributes }) => attributes.locale.substring(0, 2) === locale
  ).attributes;

  recurData = {
    // include OpenGraph_default data to non-english recurring elements
    OpenGraph_default: recurData.OpenGraph_default,
    // localize recurring elements
    ...recurData.localizations.data.find(
      ({ attributes }) => attributes.locale.substring(0, 2) === locale
    ).attributes,
  };
}
---

<SetPreferredLocale />

<script is:inline define:vars={{ availableLocales }}>
  let [, locale] = location.pathname.match(/^\/([a-z]{2})\//) ?? [];

  if (
    (!locale || !availableLocales.includes(locale)) &&
    /* preferredLocale is defined in SetPreferredLocale.astro */
    preferredLocale !== "en"
  ) {
    location.pathname = location.pathname.replace("/", `/${preferredLocale}/`);
  }
</script>

<Layout
  locale={locale}
  availableLocales={availableLocales}
  meta={page.Meta}
  recurData={recurData}
  metaImage={page.Block_blob != null && page.Block_blob.data != null
    ? page.Block_blob.data.attributes.provider_metadata.public_id
    : recurData.OpenGraph_default.data.attributes.provider_metadata.public_id}
>
  <BasicPage page={page} />
</Layout>
