---
import Layout from '../layouts/Layout.astro';

// All pages graphql query to be used with fetch
import AllPagesQuery from '../queries/AllPagesQuery'

// Getting the Confirmation and Home components to create pages
import Home from '../components/Home.astro';
import Confirmation from '../components/Confirmation.astro';
import CrowdfundingForm from '../components/CrowdfundingForm.astro';
import BasicPage from '../components/BasicPage.astro';

/**
 * This file is used for all the other pages
 */

// Using getStaticPaths to generate each path
export async function getStaticPaths() {
  const allPages = await fetch(`${import.meta.env.DB_URL}`,
    {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${import.meta.env.ACCESS_TOKEN}`
      },
      body: JSON.stringify({
        query: AllPagesQuery,
      })
    }).then(response => response.json());

  // Get all locales
  const getAllLocales = arr => {
    if (arr.length > 0) return arr.map(home =>
      home.attributes.locale.substring(0, 2)
    );
    return []
  }

  // Create Pages Function
  const createPages = (arrOrObj, obj) => Array.isArray(arrOrObj) ? arrOrObj.map((page) => {
    return {
      params: {
        slug: obj.type == 'plan' ?
          obj.slug :
          `${page.attributes.locale.substring(0, 2)}${obj.type != 'home' ? '/' + page.attributes.Meta.URL_slug : ''}`, // URL slug to be used
      },
      props: { // Props
        footerText: allPages.data.recurringElement.data.attributes.Footer_text, // footer text
        page: { // page object where empty its attributes and give it a type
          ...page.attributes,
          ...obj
        }
      }
    }
  }) : {
    params: {
      slug: obj.type == 'plan' ?
        obj.slug : obj.type == 'home' ? arrOrObj.locale.substring(0, 2) :
          arrOrObj.Meta.URL_slug, // URL slug to be used
    },
    props: { // Props
      footerText: allPages.data.recurringElement.data.attributes.Footer_text, // footer text
      page: { // page object where empty its attributes and give it a type
        ...arrOrObj,
        ...obj
      }
    }
  }

  let allPlans = [];
  const formMeta = allPages.data.crowdfundingForm.data.attributes.Meta;

  // All plans
  allPages.data.crowdfundingPlans.data.forEach((plan) => {
    const newPlan = { ...plan.attributes }
    const planLocales = getAllLocales(plan.attributes.localizations.data)
    const allLocalizedPlans = plan.attributes.localizations.data
    delete newPlan.localizations
    const planObj = {
      slug: `plans/${plan.attributes.Title.toLowerCase()}`,
      Perk: newPlan.Perk,
      Meta: formMeta,
      type: 'plan',
      availableLocales: planLocales,
      Intro_blob: allPages.data.crowdfundingHome.data.attributes.Intro_blob
    }
    const defaultPlan = createPages(newPlan, planObj)
    allPlans.push(defaultPlan)
    if (plan.attributes.localizations.data.length > 0) {
      allLocalizedPlans.forEach((localizedPlan) => {
        const localizedPlanObj = {
          slug: `${localizedPlan.attributes.locale.substring(0, 2)}/plans/${newPlan.Title.toLowerCase()}`,
          Perk: newPlan.Perk,
          Meta: formMeta,
          type: 'plan',
          availableLocales: planLocales,
          Intro_blob: allPages.data.crowdfundingHome.data.attributes.Intro_blob
        }
        const lclPlan = createPages(localizedPlan.attributes, localizedPlanObj)
        allPlans.push(lclPlan)
      })
    }
  })

  // Saving all Localized home pages
  let allLocalizedHomePages = allPages.data.crowdfundingHome.data.attributes.localizations.data;
  const allHomeLocales = getAllLocales(allLocalizedHomePages)
  allLocalizedHomePages = allLocalizedHomePages.map((homePage) => {
    const currentPlans = allPlans.filter((val) => val.props.page.locale == homePage.attributes.locale).map(val => val.props.page)
    const homeObj = {
      type: 'home',
      availableLocales: allHomeLocales,
      allPlans: currentPlans
    }
    let localizedHome = createPages(homePage.attributes, homeObj)
    return localizedHome
  })

  // The default Basic pages
  let allBasicPages = []
  // Mapping all localized basic pages into a new array that returns an object that generates the paths
  allPages.data.basicPages.data.forEach((page) => {
    let localizedPages = page.attributes.localizations.data
    const basicPagesLocales = getAllLocales(localizedPages)
    if (localizedPages.length > 0) {
      const lclObj = {
        availableLocales: basicPagesLocales,
        type: `basicPages`,
        Intro_blob: allPages.data.crowdfundingHome.data.attributes.Intro_blob
      }
      localizedPages = createPages(localizedPages, lclObj)
      localizedPages.forEach((lclPage) => allBasicPages.push(lclPage))
    }
    const pageObj = {
      availableLocales: basicPagesLocales,
      type: `basicPages`,
      Intro_blob: allPages.data.crowdfundingHome.data.attributes.Intro_blob,
    }
    const defaultBasicPage = createPages(page.attributes, pageObj)
    allBasicPages.push(defaultBasicPage)
  })

  // Getting Confirmation pages
  let allConfirmations = []
  let allLocalizedConfirmation = allPages.data.crowdfundingPaymentConfirmation.data.attributes.localizations.data;
  const confirmationLocales = getAllLocales(allLocalizedConfirmation)
  // The default confirmation page
  let defaultConfirmation = allPages.data.crowdfundingPaymentConfirmation.data.attributes;
  const defaultConfirmObj = {
    availableLocales: confirmationLocales,
    type: `confirm`,
    Intro_blob: allPages.data.crowdfundingHome.data.attributes.Intro_blob
  }

  defaultConfirmation = createPages(defaultConfirmation, defaultConfirmObj)
  allConfirmations.push(defaultConfirmation)

  // First check if there are any localized confirmation pages if not do nothing
  if (allLocalizedConfirmation.length > 0) {
    const localizedConfirmObj = {
      availableLocales: confirmationLocales,
      type: 'confirm',
      Intro_blob: allPages.data.crowdfundingHome.data.attributes.Intro_blob
    }
    allLocalizedConfirmation = createPages(allLocalizedConfirmation, localizedConfirmObj)
    allLocalizedConfirmation.forEach(page => allConfirmations.push(page))
  }

  // return all pages altogether each with the right return format
  return [...allLocalizedHomePages, ...allConfirmations, ...allPlans, ...allBasicPages]
}

// Get each pages props from Astro
const {
  page, footerText
} = Astro.props

---

<Layout locale={page.locale.substring(0,2)} meta={page.Meta} footerText={footerText}
  introBlobImage={page.Intro_blob.data.attributes.provider_metadata.public_id} availableLocales={page.availableLocales}>
  {page.type == `home` ?
  <Home {page} /> : page.type == `basicPages` ?
  <BasicPage {page} /> : page.type == `confirm` ?
  <Confirmation {page} />:
  <CrowdfundingForm {page} locale={page.locale.substring(0,2)}>
    <input type="hidden" id="planName" name="planName" value={page.Title} />
  </CrowdfundingForm>
  }
</Layout>