---
import CMS from "@store/CMS";
import products from "@store/Products";

import PageLayout from "@layouts/PageLayout.astro";
import CheckoutLayout from "@layouts/CheckoutLayout.astro";

import Cart from "@pages/Cart.astro";
import Posts from "@pages/Posts.astro";
import Estate from "@pages/Estate.astro";
import Product from "@pages/Product.astro";
import Homepage from "@pages/Homepage.astro";
import BasicPage from "@pages/BasicPage.astro";
import BlogDetails from "@pages/BlogDetails.astro";
import HowToDetails from "@pages/HowToDetails.astro";
import Crowdfunding from "@pages/Crowdfunding.astro";
import ElephantPath from "@pages/ElephantPath.astro";
import RecipeDetails from "@pages/RecipeDetails.astro";
import EstateDetails from "@pages/EstateDetails.astro";
import ProductDetails from "@pages/ProductDetails.astro";
import ProductCategory from "@pages/ProductCategory.astro";
import CrowdfundingForm from "@pages/CrowdfundingForm.astro";
import CheckoutSuccess from "@pages/CheckoutSuccess.astro";
import CheckoutKindness from "@pages/CheckoutKindness.astro";
import CheckoutShipping from "@pages/CheckoutShipping.astro";
import CheckoutInformation from "@pages/CheckoutInformation.astro";

import DefaultRouteRedirect from "@scripts/DefaultRouteRedirect.astro";
import TranslationNotFoundRedirect from "@scripts/TranslationNotFoundRedirect.astro";

import getAvailableLocales from "@utils/getAvailableLocales";

export async function getStaticPaths() {
  const {
    i18NLocales,
    ariaLabelRecurringElement,
    recurringElement,
    blogs,
    howTos,
    recipes,
    estates,
    crowdfundingForm,
    crowdfundingPlans,
    crowdfundingHome,
    basicPages: basicPagesData,
    crowdfundingPaymentConfirmation,
    homeBlog,
    homeHowTo,
    homeRecipe,
    homeEstate,
    homepage,
    homeProduct,
    homeElephantPath,
    productCategories,
    cart,
    checkoutKindness,
    checkoutInformation,
    checkoutShipping,
    checkoutSuccess,
  } = CMS.get("all");

  const allProducts = products.get("all");

  const allLocales = i18NLocales.data.map(({ attributes }) =>
    attributes.code.substring(0, 2)
  );

  const paginate = (routes) => {
    const POSTS_PER_PAGE = 10;

    routes.forEach((route) => {
      const { page } = route.props,
        { posts } = page;

      if (posts?.length > POSTS_PER_PAGE) {
        const { URL_slug: basePathname } = page.Meta,
          pagesCount = Math.ceil(posts.length / POSTS_PER_PAGE);

        // generate routes for additional pages
        Array.from({ length: pagesCount - 1 }).forEach((_, i) => {
          const routeClone = structuredClone(route);

          const postsSlice = posts.slice(
            i + 1 * POSTS_PER_PAGE,
            (i + 2) * POSTS_PER_PAGE
          );

          routeClone.params.slug += `/${i + 2}`;
          routeClone.props.page.posts = postsSlice;
          routeClone.props.page.pagination = {
            basePathname,
            pagesCount,
            currentPage: i + 2,
          };

          routes.push(routeClone);
        });

        // limit posts on the first page
        page.posts = posts.slice(0, POSTS_PER_PAGE);
        page.pagination = {
          basePathname,
          pagesCount,
          currentPage: 1,
        };
      }
    });
  };

  const getRouteData = (page, getProps) => {
    const flattenedPages = [
      page.attributes,
      ...page.attributes.localizations.data.map(({ attributes }) => attributes),
    ];

    const [availableLocales, availableLocalesRecord, availableSlugs] =
      getAvailableLocales(flattenedPages);

    return [
      ...availableSlugs.map((slug) => ({
        defaultRoute: true,
        availableLocalesRecord,
        slug: slug === "/" ? "/" : slug.slice(1, -1),
      })),
      ...allLocales.flatMap((locale) =>
        availableSlugs.map((slug) =>
          availableLocalesRecord[locale] === "/" + locale + slug
            ? flattenedPages.find(
                (attributes) => attributes.locale.substring(0, 2) === locale
              )
            : {
                locale,
                fullSlug: locale + slug.slice(0, -1),
                translationNotFound: true,
                availableLocalesRecord,
              }
        )
      ),
    ].map((attributes) => {
      const {
        locale,
        slug = attributes.Meta?.URL_slug,
        fullSlug = slug === "/"
          ? locale?.substring(0, 2)
          : locale
          ? locale?.substring(0, 2) + "/" + slug
          : slug,
      } = attributes;

      const props = getProps ? getProps(page, attributes) : {};

      if (!attributes.defaultRoute && !attributes.translationNotFound) {
        var alternateURLs = Object.fromEntries(
          Object.entries(availableLocalesRecord).filter(
            ([locale]) => locale !== attributes.locale.substring(0, 2)
          )
        );
      }

      return {
        params: { slug: fullSlug },
        props: {
          page: {
            ...props,
            ...attributes,
            alternateURLs,
            availableLocales,
          },
          recurData: recurringElement.data.attributes,
          ariaLabelRecurData: ariaLabelRecurringElement.data.attributes,
        },
      };
    });
  };

  const getRoutes = ({ data }, getProps, enablePagination?) => {
    const routes = Array.isArray(data)
      ? data.flatMap((page) => getRouteData(page, getProps))
      : getRouteData(data, getProps);

    enablePagination && paginate(routes);

    return routes;
  };

  const getPosts = ({ data }, locale) =>
    data
      .map(({ attributes }) => [
        attributes,
        attributes.localizations.data.map(({ attributes }) => attributes),
      ])
      .flat(2)
      .filter(
        (attributes) =>
          attributes.locale.substring(0, 2) === locale.substring(0, 2)
      )
      .sort(
        (a, b) =>
          new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
      );

  [
    ...crowdfundingPlans.data,
    ...crowdfundingPlans.data.flatMap(
      ({ attributes }) => attributes.localizations.data
    ),
  ].forEach(({ attributes }) => {
    attributes.Meta = {
      ...crowdfundingForm.data.attributes.Meta,
      URL_slug: `plans/${attributes.Title.toLowerCase()}`,
    };
  });

  const plansPages = getRoutes(crowdfundingPlans, () => ({ type: "plan" }));

  const crowdfundingPages = getRoutes(crowdfundingHome, (_, { locale }) => ({
    type: "crowdfunding",
    allPlans: locale && getPosts(crowdfundingPlans, locale),
  }));

  const basicPages = getRoutes(basicPagesData, () => ({ type: "basic" }));

  const crowdfundingPaymentConfirmationPages = getRoutes(
    crowdfundingPaymentConfirmation,
    () => ({ type: "basic" })
  );

  const blogDetailsPages = getRoutes(blogs, (_, { locale }) => ({
    type: "blogDetails",
    blogs: locale && getPosts(blogs, locale),
  }));

  const howToDetailsPages = getRoutes(howTos, (_, { locale }) => ({
    type: "howToDetails",
    howTos: locale && getPosts(howTos, locale),
  }));

  const recipeDetailsPages = getRoutes(recipes, () => ({
    type: "recipeDetails",
  }));

  const estateDetailsPages = getRoutes(estates, () => ({
    type: "estateDetails",
  }));

  const productDetailsPages = getRoutes(allProducts, (page) => ({
    type: "productDetails",
    names: (() => {
      const nameEntries = [page, ...page.attributes.localizations.data].map(
        ({ attributes }) => [
          attributes.locale.substring(0, 2),
          attributes.Title,
        ]
      );

      return Object.fromEntries(nameEntries);
    })(),
  }));

  const blogPages = getRoutes(
    homeBlog,
    (_, { locale }) => ({
      type: "blog",
      posts: locale && getPosts(blogs, locale),
    }),
    true
  );

  const howToPages = getRoutes(
    homeHowTo,
    (_, { locale }) => ({
      type: "howTo",
      posts: locale && getPosts(howTos, locale),
    }),
    true
  );

  const recipePages = getRoutes(
    homeRecipe,
    (_, { locale }) => ({
      type: "recipe",
      posts: locale && getPosts(recipes, locale),
    }),
    true
  );

  const estatePages = getRoutes(homeEstate, (_, { locale }) => ({
    type: "estate",
    posts: locale && getPosts(estates, locale),
  }));

  const productPages = getRoutes(homeProduct, () => ({
    type: "product",
  }));

  const productCategoryPages = getRoutes(productCategories, () => ({
    type: "productCategory",
  }));

  const homepagePages = getRoutes(
    homepage,
    (_, { locale }) => ({
      type: "homepage",
      posts: locale && [
        ...(getPosts(blogs, locale).slice(0, 1) || []),
        ...(getPosts(howTos, locale).slice(0, 1) || []),
        ...(getPosts(recipes, locale).slice(0, 1) || []),
      ],
    }),
    true
  );

  const cartPages = getRoutes(cart, () => ({
    type: "cart",
  }));

  const checkoutInformationPages = getRoutes(checkoutInformation, () => ({
    type: "checkoutInformation",
  }));

  const checkoutKindnessPages = getRoutes(checkoutKindness, () => ({
    type: "checkoutKindness",
  }));

  const checkoutShippingPages = getRoutes(checkoutShipping, () => ({
    type: "checkoutShipping",
  }));

  const checkoutSuccessPages = getRoutes(checkoutSuccess, () => ({
    type: "checkoutSuccess",
  }));

  const elephantPathPages = getRoutes(homeElephantPath, () => ({
    type: "elephantPath",
  }));

  return [
    ...plansPages,
    ...crowdfundingPages,
    ...basicPages,
    ...crowdfundingPaymentConfirmationPages,
    ...blogDetailsPages,
    ...howToDetailsPages,
    ...recipeDetailsPages,
    ...estateDetailsPages,
    ...productCategoryPages,
    ...productDetailsPages,
    ...blogPages,
    ...howToPages,
    ...recipePages,
    ...estatePages,
    ...productPages,
    ...homepagePages,
    ...cartPages,
    ...checkoutKindnessPages,
    ...checkoutInformationPages,
    ...checkoutShippingPages,
    ...checkoutSuccessPages,
    ...elephantPathPages,
  ];
}

const { ASSETS_URL } = import.meta.env;

const { defaultRoute, translationNotFound, availableLocalesRecord } =
    Astro.props.page,
  isRedirectionNecessary = defaultRoute || translationNotFound;
---

{
  isRedirectionNecessary ? (
    defaultRoute ? (
      <DefaultRouteRedirect availableLocalesRecord={availableLocalesRecord} />
    ) : (
      <TranslationNotFoundRedirect
        availableLocalesRecord={availableLocalesRecord}
      />
    )
  ) : (
    async () => {
      const { page } = Astro.props;

      page.locale = page.locale.substring(0, 2);

      const { Meta: meta, locale, alternateURLs, availableLocales } = page,
        recurData =
          locale === "en"
            ? Astro.props.recurData
            : Astro.props.recurData.localizations.data.find(
                ({ attributes }) => attributes.locale.substring(0, 2) === locale
              ).attributes,
        ariaLabelRecurData =
          locale === "en"
            ? Astro.props.ariaLabelRecurData
            : Astro.props.ariaLabelRecurData.localizations.data.find(
                ({ attributes }) => attributes.locale.substring(0, 2) === locale
              ).attributes;

      const Layout =
        page.type === "cart"
          ? Cart
          : page.type === "checkoutSuccess"
          ? CheckoutSuccess
          : page.type.startsWith("checkout")
          ? CheckoutLayout
          : PageLayout;

      const metaImageSrc =
        ASSETS_URL +
        (page.Intro_blob?.data?.attributes.url ||
          page.Block_blob?.data?.attributes.url ||
          recurData.OpenGraph_default?.data?.attributes.url);

      return (
        <Layout
          page={page}
          meta={meta}
          locale={locale}
          recurData={recurData}
          alternateURLs={alternateURLs}
          availableLocales={availableLocales}
          metaImageSrc={metaImageSrc}
        >
          {page.type === "homepage" ? (
            <Homepage page={page} ariaLabelRecurData={ariaLabelRecurData} />
          ) : page.type === "crowdfunding" ? (
            <Crowdfunding page={page} ariaLabelRecurData={ariaLabelRecurData} />
          ) : page.type === "basic" ? (
            <BasicPage page={page} />
          ) : page.type === "blog" ? (
            <Posts page={page} ariaLabelRecurData={ariaLabelRecurData} />
          ) : page.type === "blogDetails" ? (
            <BlogDetails
              page={page}
              recurData={recurData}
              ariaLabelRecurData={ariaLabelRecurData}
            />
          ) : page.type === "howTo" ? (
            <Posts page={page} ariaLabelRecurData={ariaLabelRecurData} />
          ) : page.type === "howToDetails" ? (
            <HowToDetails
              page={page}
              recurData={recurData}
              ariaLabelRecurData={ariaLabelRecurData}
            />
          ) : page.type === "recipe" ? (
            <Posts page={page} ariaLabelRecurData={ariaLabelRecurData} />
          ) : page.type === "recipeDetails" ? (
            <RecipeDetails
              page={page}
              recurData={recurData}
              ariaLabelRecurData={ariaLabelRecurData}
            />
          ) : page.type === "estate" ? (
            <Estate page={page} />
          ) : page.type === "estateDetails" ? (
            <EstateDetails
              page={page}
              recurData={recurData}
              ariaLabelRecurData={ariaLabelRecurData}
            />
          ) : page.type === "product" ? (
            <Product
              page={page}
              recurData={recurData}
              ariaLabelRecurData={ariaLabelRecurData}
            />
          ) : page.type === "productCategory" ? (
            <ProductCategory
              page={page}
              recurData={recurData}
              ariaLabelRecurData={ariaLabelRecurData}
            />
          ) : page.type === "productDetails" ? (
            <ProductDetails
              page={page}
              recurData={recurData}
              ariaLabelRecurData={ariaLabelRecurData}
            />
          ) : page.type === "checkoutInformation" ? (
            <CheckoutInformation page={page} recurData={recurData} />
          ) : page.type === "checkoutKindness" ? (
            <CheckoutKindness page={page} recurData={recurData} />
          ) : page.type === "checkoutShipping" ? (
            <CheckoutShipping page={page} recurData={recurData} />
          ) : page.type === "elephantPath" ? (
            <ElephantPath page={page} ariaLabelRecurData={ariaLabelRecurData} />
          ) : page.type === "plan" ? (
            <CrowdfundingForm
              page={page}
              recurData={recurData}
              locale={locale}
            />
          ) : null}
        </Layout>
      );
    }
  )
}
