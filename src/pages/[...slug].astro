---
import CMS from "@store/CMS";
import PageLayout from "@layouts/PageLayout.astro";
import CheckoutLayout from "@layouts/CheckoutLayout.astro";

import Cart from "@pages/Cart.astro";
import Posts from "@pages/Posts.astro";
import Estate from "@pages/Estate.astro";
import Product from "@pages/Product.astro";
import BasicPage from "@pages/BasicPage.astro";
import BlogDetails from "@pages/BlogDetails.astro";
import HowToDetails from "@pages/HowToDetails.astro";
import Crowdfunding from "@pages/Crowdfunding.astro";
import RecipeDetails from "@pages/RecipeDetails.astro";
import EstateDetails from "@pages/EstateDetails.astro";
import ProductDetails from "@pages/ProductDetails.astro";
import ProductCategory from "@pages/ProductCategory.astro";
import CrowdfundingForm from "@pages/CrowdfundingForm.astro";
import CheckoutSuccess from "@pages/CheckoutSuccess.astro";
import CheckoutKindness from "@pages/CheckoutKindness.astro";
import CheckoutShipping from "@pages/CheckoutShipping.astro";
import CheckoutInformation from "@pages/CheckoutInformation.astro";

import SetPreferredLocale from "@scripts/SetPreferredLocale.astro";
import DefaultRouteRedirect from "@scripts/DefaultRouteRedirect.astro";
import TranslationNotFoundRedirect from "@scripts/TranslationNotFoundRedirect.astro";

export async function getStaticPaths() {
  const {
    i18NLocales,
    ariaLabelRecurringElement,
    recurringElement,
    blogs,
    howTos,
    recipes,
    estates,
    crowdfundingForm,
    crowdfundingPlans,
    crowdfundingHome,
    basicPages: basicPagesData,
    crowdfundingPaymentConfirmation,
    homeBlog,
    homeHowTo,
    homeRecipe,
    homeEstate,
    homeProduct,
    catalog,
    productCategories,
    productVariants,
    productSizes,
    homepage,
    cart,
    checkoutKindness,
    checkoutInformation,
    checkoutShipping,
    checkoutSuccess,
  } = CMS.get("all");

  const homeProductVariations = { data: [homeProduct.data] };

  const filterVariant = (variant) => {
    const { products, localizations } = variant.attributes;

    localizations.data = localizations.data.filter((localization) => {
      const { products } = localization.attributes;

      return products.data.length > 0;
    });

    return products.data.length > 0;
  };

  const generateProductVariation = (
    homeProduct,
    variantAttributes,
    variantType
  ) => {
    const { Title } = variantAttributes,
      slug = Title.toLowerCase().replace(/ /g, "-"),
      homeProductVariation = structuredClone(homeProduct);

    homeProductVariation.data.attributes[variantType] = Title;
    homeProductVariation.data.attributes.Meta.URL_slug += "/" + slug;

    homeProductVariation.data.attributes.localizations.data =
      homeProductVariation.data.attributes.localizations.data.filter(
        ({ attributes }) => {
          const localVariantAttributes =
            variantAttributes.localizations.data.find(
              (variant) => variant.attributes.locale === attributes.locale
            )?.attributes;

          if (localVariantAttributes) {
            attributes[variantType] = Title;
            attributes.Meta.URL_slug += "/" + slug;

            return true;
          }
        }
      );

    homeProductVariations.data.push(homeProductVariation.data);

    return homeProductVariation;
  };

  const products = {
    data: catalog.data.attributes.Products.map(({ Title, products }) => {
      const ArrayRecordsProxy = {
        get: (target, key) => {
          if (!(key in target)) {
            target[key] = [];
          }

          return target[key];
        },
      };

      const availableVariants = new Proxy({}, ArrayRecordsProxy),
        availableSizes = new Proxy({}, ArrayRecordsProxy);

      products.data.forEach(({ attributes }) => {
        const { locale } = attributes,
          variant = attributes.variant.data.attributes.Title,
          size = attributes.size.data.attributes.Title,
          link = "/" + locale.substring(0, 2) + "/" + attributes.Meta.URL_slug;

        attributes.productVariant = variant;
        attributes.productSize = size;

        if (!availableVariants[locale].find(({ value }) => value === variant))
          availableVariants[locale].push({ value: variant, variant, link });

        if (!availableSizes[locale].find(({ value }) => value === size))
          availableSizes[locale].push({ value: size, size, link });

        attributes.localizations.data.forEach(({ attributes }) => {
          const { locale } = attributes,
            localizedVariant = attributes.variant.data.attributes.Title,
            localizedSize = attributes.size.data.attributes.Title,
            link =
              "/" + locale.substring(0, 2) + "/" + attributes.Meta.URL_slug;

          attributes.productVariant = variant;
          attributes.productSize = size;

          if (!availableVariants[locale].find(({ value }) => value === variant))
            availableVariants[locale].push({
              value: variant,
              variant: localizedVariant,
              link,
            });

          if (!availableSizes[locale].find(({ value }) => value === size))
            availableSizes[locale].push({
              value: size,
              size: localizedSize,
              link,
            });
        });
      });

      const processedProducts = products.data.map((data) => {
        const { attributes } = data;

        const flattenedVariants = [
          attributes,
          ...attributes.localizations.data.map(({ attributes }) => attributes),
        ];

        flattenedVariants.forEach((attributes) => {
          attributes.baseProductTitle = Title;
          attributes.availableVariants = availableVariants[attributes.locale];
          attributes.availableSizes = availableSizes[attributes.locale];
        });

        return data;
      });

      return processedProducts;
    }).flat(),
  };

  productSizes.data = productSizes.data.filter(filterVariant);
  productVariants.data = productVariants.data.filter(filterVariant);

  productSizes.data.forEach(({ attributes }) =>
    generateProductVariation(homeProduct, attributes, "size")
  );

  productVariants.data.forEach(({ attributes: variantAttributes }) => {
    const generatedHomeProductVariation = generateProductVariation(
      homeProduct,
      variantAttributes,
      "variant"
    );

    const availableSizes = variantAttributes.products.data.map(
      ({ attributes }) => attributes.size.data.attributes.Title
    );

    productSizes.data
      .filter(({ attributes }) => availableSizes.includes(attributes.Title))
      .forEach(({ attributes: sizeAttributes }) => {
        sizeAttributes = structuredClone(sizeAttributes);

        generateProductVariation(
          generatedHomeProductVariation,
          sizeAttributes,
          "size"
        );
      });
  });

  const allLocales = i18NLocales.data.map(({ attributes }) =>
    attributes.code.substring(0, 2)
  );

  const getRouteData = (page, getProps) => {
    const defaultSlug = page.attributes.Meta?.URL_slug,
      availableLocales = [
        "en",
        ...page.attributes.localizations.data.map(({ attributes }) =>
          attributes.locale.substring(0, 2)
        ),
      ];

    return [
      { defaultRoute: true },
      ...allLocales.map((locale) =>
        locale === "en"
          ? page.attributes
          : page.attributes.localizations.data.find(
              ({ attributes }) => attributes.locale.substring(0, 2) === locale
            )?.attributes || { locale, translationNotFound: true }
      ),
    ].map((attributes) => {
      const { locale } = attributes,
        { slug = attributes.Meta?.URL_slug || defaultSlug, ...props } = getProps
          ? getProps(page, attributes)
          : {},
        fullSlug =
          slug === "/"
            ? locale?.substring(0, 2)
            : locale
            ? locale?.substring(0, 2) + "/" + slug
            : slug;

      return {
        params: { slug: fullSlug },
        props: {
          page: {
            ...props,
            ...attributes,
            availableLocales,
          },
          recurData: recurringElement.data.attributes,
          ariaLabelRecurData: ariaLabelRecurringElement.data.attributes,
        },
      };
    });
  };

  const getPages = ({ data }, getProps) =>
    Array.isArray(data)
      ? data.map((page) => getRouteData(page, getProps)).flat()
      : getRouteData(data, getProps);

  const getPosts = ({ data }, locale) =>
    data
      .map(({ attributes }) => [
        attributes,
        attributes.localizations.data.map(({ attributes }) => attributes),
      ])
      .flat(2)
      .filter(
        (attributes) =>
          attributes.locale.substring(0, 2) === locale.substring(0, 2)
      )
      // @ts-ignore
      .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

  const plansPages = getPages(crowdfundingPlans, (page, { Title }) => ({
    type: "plan",
    Meta: crowdfundingForm.data.attributes.Meta,
    slug: `plans/${(Title || page.attributes.Title).toLowerCase()}`,
  }));

  const crowdfundingPages = getPages(crowdfundingHome, (page, { locale }) => ({
    type: "crowdfunding",
    allPlans: locale && getPosts(crowdfundingPlans, locale),
  }));

  const basicPages = getPages(basicPagesData, () => ({ type: "basic" }));

  const crowdfundingPaymentConfirmationPages = getPages(
    crowdfundingPaymentConfirmation,
    () => ({ type: "basic" })
  );

  const blogDetailsPages = getPages(blogs, (page, { locale }) => ({
    type: "blogDetails",
    blogs: locale && getPosts(blogs, locale),
  }));

  const howToDetailsPages = getPages(howTos, (page, { locale }) => ({
    type: "howToDetails",
    howTos: locale && getPosts(howTos, locale),
  }));

  const recipeDetailsPages = getPages(recipes, () => ({
    type: "recipeDetails",
  }));

  const estateDetailsPages = getPages(estates, () => ({
    type: "estateDetails",
  }));

  const productDetailsPages = getPages(products, (page) => ({
    type: "productDetails",
    names: (() => {
      const nameEntries = [page, ...page.attributes.localizations.data].map(
        ({ attributes }) => [
          attributes.locale.substring(0, 2),
          attributes.Title,
        ]
      );

      const names = Object.fromEntries(nameEntries);

      return names;
    })(),
  }));

  const blogPages = getPages(homeBlog, (page, { locale }) => ({
    type: "blog",
    posts: locale && getPosts(blogs, locale),
  }));

  const howToPages = getPages(homeHowTo, (page, { locale }) => ({
    type: "howTo",
    posts: locale && getPosts(howTos, locale),
  }));

  const recipePages = getPages(homeRecipe, (page, { locale }) => ({
    type: "recipe",
    posts: locale && getPosts(recipes, locale),
  }));

  const estatePages = getPages(homeEstate, (page, { locale }) => ({
    type: "estate",
    posts: locale && getPosts(estates, locale),
  }));

  const productPages = getPages(homeProductVariations, (page, { locale }) => ({
    type: "product",
  }));

  const productCategoryPages = getPages(
    productCategories,
    (page, { locale }) => ({
      type: "productCategory",
      posts: locale && getPosts(products, locale),
    })
  );

  const homepagePages = getPages(homepage, (page, { locale }) => ({
    type: "homepage",
    posts: locale && [
      ...getPosts(blogs, locale),
      ...getPosts(howTos, locale),
      ...getPosts(recipes, locale),
    ],
  }));

  const cartPages = getPages(cart, () => ({
    type: "cart",
  }));

  const checkoutInformationPages = getPages(checkoutInformation, () => ({
    type: "checkoutInformation",
  }));

  const checkoutKindnessPages = getPages(checkoutKindness, () => ({
    type: "checkoutKindness",
  }));

  const checkoutShippingPages = getPages(checkoutShipping, () => ({
    type: "checkoutShipping",
  }));

  const checkoutSuccessPages = getPages(checkoutSuccess, () => ({
    type: "checkoutSuccess",
  }));

  return [
    ...plansPages,
    ...crowdfundingPages,
    ...basicPages,
    ...crowdfundingPaymentConfirmationPages,
    ...blogDetailsPages,
    ...howToDetailsPages,
    ...recipeDetailsPages,
    ...estateDetailsPages,
    ...productCategoryPages,
    ...productDetailsPages,
    ...blogPages,
    ...howToPages,
    ...recipePages,
    ...estatePages,
    ...productPages,
    ...homepagePages,
    ...cartPages,
    ...checkoutKindnessPages,
    ...checkoutInformationPages,
    ...checkoutShippingPages,
    ...checkoutSuccessPages,
  ];
}

const { ASSETS_URL } = import.meta.env;

const { defaultRoute, translationNotFound } = Astro.props.page,
  isRedirectionNecessary = defaultRoute || translationNotFound;
---

{
  isRedirectionNecessary ? (
    defaultRoute ? (
      <DefaultRouteRedirect />
    ) : (
      <Fragment>
        <SetPreferredLocale />
        <TranslationNotFoundRedirect />
      </Fragment>
    )
  ) : (
    async () => {
      const { page } = Astro.props;

      page.locale = page.locale.substring(0, 2);

      page.type === `plan`
        ? (page.Meta.URL_slug = `plan/` + page.Title.toLowerCase())
        : page.Meta.URL_slug;

      const { Meta: meta, locale, availableLocales } = page,
        recurData =
          locale === "en"
            ? Astro.props.recurData
            : Astro.props.recurData.localizations.data.find(
                ({ attributes }) => attributes.locale.substring(0, 2) === locale
              ).attributes,
        ariaLabelRecurData =
          locale === "en"
            ? Astro.props.ariaLabelRecurData
            : Astro.props.ariaLabelRecurData.localizations.data.find(
                ({ attributes }) => attributes.locale.substring(0, 2) === locale
              ).attributes;

      const Layout =
        page.type === "cart"
          ? Cart
          : page.type === "checkoutSuccess"
          ? CheckoutSuccess
          : page.type.startsWith("checkout")
          ? CheckoutLayout
          : PageLayout;

      const metaImageSrc =
        ASSETS_URL +
        (page.Intro_blob?.data?.attributes.url ||
          page.Block_blob?.data?.attributes.url ||
          recurData.OpenGraph_default?.data?.attributes.url);

      return (
        <Layout
          {
          /* @ts-ignore */ }
          page={page}
          meta={meta}
          locale={locale}
          recurData={recurData}
          availableLocales={availableLocales}
          metaImageSrc={metaImageSrc}
        >
          {page.type === `homepage` ? (
            <Posts page={page} ariaLabelRecurData={ariaLabelRecurData} />
          ) : page.type === `crowdfunding` ? (
            <Crowdfunding page={page} ariaLabelRecurData={ariaLabelRecurData} />
          ) : page.type === `basic` ? (
            <BasicPage page={page} />
          ) : page.type === `blog` ? (
            <Posts page={page} ariaLabelRecurData={ariaLabelRecurData} />
          ) : page.type === `blogDetails` ? (
            <BlogDetails
              page={page}
              recurData={recurData}
              ariaLabelRecurData={ariaLabelRecurData}
            />
          ) : page.type === `howTo` ? (
            <Posts page={page} ariaLabelRecurData={ariaLabelRecurData} />
          ) : page.type === `howToDetails` ? (
            <HowToDetails
              page={page}
              recurData={recurData}
              ariaLabelRecurData={ariaLabelRecurData}
            />
          ) : page.type === `recipe` ? (
            <Posts page={page} ariaLabelRecurData={ariaLabelRecurData} />
          ) : page.type === `recipeDetails` ? (
            <RecipeDetails
              page={page}
              recurData={recurData}
              ariaLabelRecurData={ariaLabelRecurData}
            />
          ) : page.type === `estate` ? (
            <Estate
              page={page}
              recurData={recurData}
              ariaLabelRecurData={ariaLabelRecurData}
            />
          ) : page.type === `estateDetails` ? (
            <EstateDetails
              page={page}
              recurData={recurData}
              ariaLabelRecurData={ariaLabelRecurData}
            />
          ) : page.type === `product` ? (
            <Product
              page={page}
              recurData={recurData}
              ariaLabelRecurData={ariaLabelRecurData}
            />
          ) : page.type === `productCategory` ? (
            <ProductCategory
              page={page}
              recurData={recurData}
              ariaLabelRecurData={ariaLabelRecurData}
            />
          ) : page.type === `productDetails` ? (
            <ProductDetails
              page={page}
              recurData={recurData}
              ariaLabelRecurData={ariaLabelRecurData}
            />
          ) : page.type === `checkoutInformation` ? (
            <CheckoutInformation page={page} recurData={recurData} />
          ) : page.type === `checkoutKindness` ? (
            <CheckoutKindness page={page} recurData={recurData} />
          ) : page.type === `checkoutShipping` ? (
            <CheckoutShipping page={page} recurData={recurData} />
          ) : page.type === `plan` ? (
            <CrowdfundingForm
              page={page}
              recurData={recurData}
              locale={locale}
            />
          ) : null}
        </Layout>
      );
    }
  )
}
